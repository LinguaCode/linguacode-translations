{
  "blocks":{
    "controlPanelBlock":{
      "edit":"Upravit",
      "delete":"Smazat"
    },
    "lovePanelBlock":{
      "like":"jako",
      "liked":"Oblíbené",
      "star":"Hvězda",
      "starred":"Označené"
    },
    "moreFromUserBlock":{
      "viewAll":"Zobrazit vše",
      "moreFromFirst":"Více od",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"Seřadit podle",
      "recent":"Nedávná",
      "views":"Zobrazení",
      "stars":"Hvězdičky",
      "likes":"Likes",
      "random":"Náhodné"
    },
    "shareBlock":{
      "link":"Odkaz",
      "share":"Sdílet",
      "tweet":"Tweet",
      "textTwitter":"Program \"${programTitle}\" od \"${userName}\" na #LinguaCode ${userPageLink}",
      "descriptionVK":"LinguaCode je sociální platforma navržena hlavně pro mladistvé, kde se mohou učit kódovat a programovat, sdílet své kódy v jejich rodné řeči bez nutnosti znalosti anglického jazyka."
    },
    "userPrimaryInfoBlock":{
      "editProfile":"Upravit profil"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"Připojen na"
    }
  },
  "pages":{
    "errorPage":{
      "title":"Chyba",
      "explanation":"Ale toto je nepříjemné - je nám líto, ale na stránce se vyskytla kritická chyba."
    },
    "landingPage":{
      "title":"LinguaCode: Učení programováním",
      "learningByCoding":"Učení <span className=\"masthead--lora-italic\"> Programováním</span>",
      "explanation":"Přinášíme výuku programování a kódování v novém světle plném radosti a života.",
      "facebookSignIn":"Přihlásit přes Facebook",
      "or":"nebo",
      "seeTheListOfPrograms":"Seznam vytvořených programů",
      "descriptionHead":"Nejlepší nová cesta ve výuce programování.",
      "descriptionBody":"LinguaCode je sociální platforma navržena hlavně pro mladistvé, kde se mohou učit kódovat a programovat, sdílet své kódy v jejich rodné řeči bez nutnosti znalosti anglického jazyka.",
      "advantagesHeadline":"LinguaCode vám pomáhá<span className=\"u-emphasized\">učit se lépe</span>",
      "advantageTopFirstHeadline":"Vícejazyčná",
      "advantageTopFirstDescription":"Pište programy nejen v rodném jazyce.",
      "advantageTopSecondHeadline":"Je to ZDARMA!",
      "advantageTopSecondDescription":"Vše je zadarmo.",
      "advantageTopThirdHeadline":"Rychlý start",
      "advantageTopThirdDescription":"Začít je mnohem jednodušší než si myslíte!",
      "advantageBottomFirstHeadline":"Představivost",
      "advantageBottomFirstDescription":"Uč se, zkus, Vytvoř!",
      "advantageBottomSecondHeadline":"Vzdělání",
      "advantageBottomSecondDescription":"Naučit s eprogramovat stejně dobře, jako jiné předměty.",
      "advantageBottomThirdHeadline":"Komunita",
      "advantageBottomThirdDescription":"Sdílejte své programy s přáteli a najděte nové!",
      "joinText":"Přidejte se<span className=\"u-emphasized\">do komunity</span>studentů",
      "facebookRegister":"Zaregistrovat teď, je to ZDARMA!"
    },
    "notFoundPage":{
      "title":"Stránka nenalezena",
      "explanation":"Omlouváme se, ale stránka, kterou se pokoušíte zobrazit, neexistuje.",
      "descriptionPartFirst":"Zkuste jít do",
      "descriptionPartSecond":"hlavní stránka",
      "descriptionPartThird":"místo."
    },
    "programChangePage":{
      "titleOfEditPage":"Upravit program ${userName}/${title}",
      "editProgramHeadline":"Editace programu",
      "editProgramButton":"Upravit Program",
      "titleOfCreatePage":"Vytvořit nový program",
      "newProgramHeadline":"Vytvořit nový program",
      "submitProgramButton":"Odeslat Program",
      "programContent":"Program obsahuje všechny informace o kódu.",
      "name":"Jméno",
      "programNameForm":"Skvělé názvy programů jsou krátké a lehce zapamatovatelné, jako <b>ahoj-světe</b>.",
      "titleOfProgram":"Nadpis",
      "description":"Popis",
      "validationError":"Chyba ověření",
      "errorTextForNameLength":"Délka <b>názvu</b> by měla mít více než 0 a méně než 32 znaků, povoleny jsou znaky latiny a pomlčka.",
      "errorTextForName":"Název zdroje se již vámi používá.",
      "errorTextForTitle":"Délka <b>názvu</b> by měla mít více než 0 a méně než 128 znaků.",
      "errorTextForDescription":"Délka <b>Popisu</b> by měla mít více než 0 a méně než 5120 znaků.",
      "errorTextForSource":"Délka <b>zdroje</b> by měla mít více než 0 a méně než 10240 znaků."
    },
    "programs":{
      "title":"Programy"
    },
    "settingsPage":{
      "title":"Nastavení",
      "publicProfile":"Veřejný profil",
      "validationError":"Chyba ověření",
      "username":"Uživatelské jméno",
      "yourUsername":"Vaše uživatelské jméno",
      "usernameWasAlreadyUsed":"Uživatelské jméno je již obsazeno",
      "usernameWasReserved":"Uživatelské jméno bylo vyhrazeno",
      "usernameValidation":"Délka <b>uživatelského jména</b> by měla mít méně než 24 znaků a měla by obsahovat malá písmena a číslice.",
      "name":"Jméno",
      "yourFirstNameAndLastName":"Vaše křestní jméno a příjmení",
      "nameValidation":"Délka <b>názvu</b> by měla mít více znaků než 0 a méně než 24",
      "bio":"Životopis",
      "tellALittleAboutYourself":"Řekněte něco málo o sobě",
      "bioValidation":"Dělka <b>životopisu</b> by měla být kratší než 128 znaků.",
      "country":"Země",
      "select":"vybrat",
      "countryValidation":"Vyberte některou ze zemí",
      "updateProfile":"Aktualizovat profil"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"Přihlásit se",
      "signInDescription":"Operace je možná pouze v případě, že jste přihlášeni."
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"Jste si opravdu jistí, že chcete odstranit tento program?",
      "answerYes":"ano",
      "answerNo":"ne"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"Výstup",
        "outputNameValue":"```linguacode výstup(X) ```",
        "outputDescription":"Vytiskne všechny hodnoty X: čísla, operace, text a proměnné hodnoty. Například",
        "outputDescriptionValue":"```linguacode výstup(4) # 4 výstup(«Howdy») # Howdy výstup(1+2) # 3 ```",
        "inputName":"Vstup",
        "inputNameValue":"```linguacode vstup(X) ```",
        "inputDescription":"Veškerá proměnná hodnota X deklarováná uživatelem. Například",
        "inputDescriptionValue":"```linguacode vstup(a) ```",
        "ifElseStatementName":"Kontrola prohlášení",
        "ifElseStatementNameValue":"```linguacode\nkdyž<condition N1>pak\n    <operation N1>\njinak když<condition N2>pak\n    <operation N2>\njinak\n    <operation N3>\n```",
        "ifElseStatementDescription":"Operace budou provedeny, jestliže zadané podmínky budou platné/pravdivé. Pro příklad",
        "ifElseStatementDescriptionValue":"```linguacode\na = 5\nb = 5\nif a > b then\n    výstup(«a > b»)\njinak když a < b pak\n    výstup(«a < b»)\njinak\n    výstup(«b == a»)            # b == a\n```",
        "loopForName":"Omezené opakování",
        "loopForNameValue":"```linguacode\nopakování<N>krát\n    <operation>\n```",
        "loopForDescription":"Ukončí kus kódu několikrát v řadě. Pro příklad",
        "loopForDescriptionValue":"```linguacode\nopakuje 10krát\n    výstup(«Howdy»)\n```",
        "loopWhileDoName":"Smyčka \"Jestliže Udělá\"",
        "loopWhileDoNameValue":"```linguacode\njestliže<condition>pak\n    <operation>\n```",
        "loopWhileDoDescription":"\"Jestliže Udělá\" smyčka se spustí prostřednictvím bloku kódu, tak dlouho, dokud je splněna zadaná podmínka. Například",
        "loopWhileDoDescriptionValue":"```linguacode\na = 1\njestliže a < 5 pak\n    výstup(a)\n    a = a + 1\n```",
        "loopDoWhileName":"Smyčka \"Udělá Jestliže\"",
        "loopDoWhileNameValue":"```linguacode\nudělá\n    <operation>\njestliže<condition>\n```",
        "loopDoWhileDescription":"Smyčka \"udělá, Jestliže\" bude opakovat smyčku, dokud platí podmínka. Pro příklad",
        "loopDoWhileDescriptionValue":"```linguacode\na = 1\nudělá \n    výstup(a)\n    a = a + 1\njestliže a < 5\n```",
        "piName":"matematické konstanty pí",
        "piNameValue":"```linguacode\nvýstup(pi)\n```",
        "piDescription":"Tiskne matematické konstanty <b>pí</b>. Například",
        "piDescriptionValue":"```linguacode\nvýstup(pi)                             # 3.141592653589793\n```",
        "eNumberName":"Matematická konstanta e",
        "eNumberNameValue":"```linguacode\nvýstup(e)\n```",
        "eNumberDescription":"Tiskne matematické konstanty <b>pí</b>. Například",
        "eNumberDescriptionValue":"```linguacode\nvýstup(pi)                             # 3.141592653589793\n```",
        "sqrName":"Druhá odmocnina čísla",
        "sqrNameValue":"```linguacode\nsqr(X)\n```",
        "sqrDescription":"Vrátí druhou odmocninu čísla <b>X</b> zadaných uživatelem. Například",
        "sqrDescriptionValue":"```linguacode\nX = 5 \nY = sqr(X) \nvýstup(Y) # 25\n```",
        "powName":"Hodnota čísla",
        "powNameValue":"```linguacode\npow(X,Y)\n```",
        "powDescription":"Vrátí hodnoty <b>X</b> na velikost <b>Y</b>. Například",
        "powDescriptionValue":"```linguacode X = 2 Y = 5 Z = pow(X, Y) výstup(Z) # 32 ```",
        "sqrtName":"Druhá odmocnina čísla",
        "sqrtNameValue":"```linguacode sqrt(X) ```",
        "sqrtDescription":"Vrátí druhou odmocninu čísla <b>X</b> zadaných uživatelem. Například",
        "sqrtDescriptionValue":"```linguacode X = 9 Y = sqrt(X) výstup(Y) # 3 ```",
        "absName":"Absolutní hodnota čísla",
        "absNameValue":"```linguacode abs(X) ```",
        "absDescription":"Vrátí absolutní hodnotu čísla <b>X</b> zadaných uživatelem. Pro example՝",
        "absDescriptionValue":"```linguacode X = -5 Y = abs(X) výstup(Y) # 5 ```",
        "roundName":"Zaokrouhlování čísel",
        "roundNameValue":"```linguacode zaokrouhlené(X) ```",
        "roundDescription":"Zaokrouhlí číslo <b>X</b> na nejbližší celé číslo a vrátí hodnotu. Například",
        "roundDescriptionValue":"```linguacode X = 2.3 a = round(X) výstup(a) # 2 ```",
        "floorName":"Počet podlaží",
        "floorNameValue":"```linguacode podlaží(X) ```",
        "floorDescription":"Zaokrouhlí <b>X</b> číslo <b>dolů</b> na nejbližší celé číslo a vrátí hodnotu. Například",
        "floorDescriptionValue":"```linguacode X = 2.6 a = podlaží(X) výstup(a) # 2 ```",
        "ceilName":"Číslo ceil",
        "ceilNameValue":"```linguacode ceil(X) ```",
        "ceilDescription":"Zaokrouhlit <b>X</b> číslo <b>nahoru</b> na nejbližší celé číslo a vrátí hodnotu",
        "ceilDescriptionValue":"```linguacode X = 2.2 a = ceil(X) výstup(a) # 3 ```",
        "sinName":"Sinus",
        "sinNameValue":"```linguacode sin(X) ```",
        "sinDescription":"Vrátí hodnotu <b>sinus</b> čísla <b>X</b>. Například",
        "sinDescriptionValue":"```linguacode X = sin(pi) výstup(X) # 0 ```",
        "cosName":"Kosinus",
        "cosNameValue":"```linguacode cos(X) ```",
        "cosDescription":"Vrátí hodnotu <b>kosinus</b> čísla <b>X</b>. Například",
        "cosDescriptionValue":"```linguacode X = cos(pi) vystup(X) # -1 ```",
        "tanName":"Tangens",
        "tanNameValue":"```linguacode tan(X) ```",
        "tanDescription":"Vrátí hodnotu <b>tangens</b> čísla <b>X</b>. Pro Příklad",
        "tanDescriptionValue":"```linguacode X = tan(pi) výstup(X) # 0 ```",
        "ctgName":"Kotangens",
        "ctgNameValue":"```linguacode ctg(X) ```",
        "ctgDescription":"Vrátí hodnotu <b>kotangens</b> čísla <b>X</b>. Pro příklad",
        "ctgDescriptionValue":"```linguacode X = ctg(pi/4) výstup(X) # 1 ```",
        "arcSinName":"Arkussinus čísla",
        "arcSinNameValue":"```linguacode arcsin(X) ```",
        "arcSinDescription":"Vrátí hodnotu, kde sinus získá stejnou hodnotu jako <b>X</b>. Například",
        "arcSinDescriptionValue":"```linguacode a = arcsin(1) výstup(a) # pi/2 ```",
        "arcCosName":"Arkuskosinus",
        "arcCosNameValue":"```linguacode arccos(X) ```",
        "arcCosDescription":"Vrátí hodnotu, kde kosinus získá stejnou hodnotu jako <b>X</b>. Například",
        "arcCosDescriptionValue":"```linguacode a = arccos(1) výstup(a) # 0 ```",
        "arcTanName":"Arkustangens",
        "arcTanNameValue":"```linguacode arctan(X) ```",
        "arcTanDescription":"Vrátí hodnotu, kde tangens získá stejnou hodnotu jako <b>X</b>. Například",
        "arcTanDescriptionValue":"```linguacode a = arctan(0) výstup(a) # 0 ```",
        "arcCtgName":"Arccotangent",
        "arcCtgNameValue":"```linguacode arcctg(X) ```",
        "arcCtgDescription":"Vrátí hodnotu, kde kotangens získá stejnou hodnotu jako <b>X</b>. Například",
        "arcCtgDescriptionValue":"```linguacode a = arcctg(1) output(a) # pi/4 ```",
        "logName":"Logaritmus",
        "logNameValue":"```linguacode log(X,Y) ```",
        "logDescription":"Vrátí hodnotu logaritmu <b>X</b> na základní <b>Y</b>. Například",
        "logDescriptionValue":"```linguacode a = log(3,27) výstup(a) # 3 ```",
        "lgName":"Desítkový logaritmus",
        "lgNameValue":"```linguacode lg(Y) ```",
        "lgDescription":"Vrátí hodnotu logaritmus <b>X</b> na základních <b>10</b>. Například",
        "lgDescriptionValue":"```linguacode a = lg(100) výstup(a) # 10 ```",
        "lnName":"Přirozený logaritmus",
        "lnNameValue":"```linguacode ln(Y) ```",
        "lnDescription":"Vrátí hodnotu logaritmu <b>X</b> na základ <b>e</b>. Například",
        "lnDescriptionValue":"```linguacode a = ln(e) výstup(a) # 1 ```",
        "randomName":"Generování náhodných čísel",
        "randomNameValue":"```linguacode náhodná(X,[Y]) ```",
        "randomDescription":"Pokud je zadán parametr <b>Y</b>, program bude náhodně generovat a vrátí náhodné celé číslo z rozsahu <b>[X; [Y]</b>., ale bez parametru <b>Y</b> bude rozsah <b>[0; X]</b>. například",
        "randomDescriptionValueFirst":"```linguacode X = 10 a = náhodné(X) # [0; 10] výstup(a) # 4 ```",
        "randomDescriptionValueSecond":"```linguacode X = 5 Y = 15 a = náhodná(X,Y) # [5; 15] výstup(a) # 12 ```"
      },
      "tutorials":{
        "intro":"Úvod",
        "output":"Výstup",
        "variables":"Proměnné",
        "input":"Vstup",
        "operations":"Operace",
        "conditions":"Podmínky",
        "boolean":"Logická hodnota",
        "languageAboutLanguageTitle":"O jazyce",
        "languageAboutLanguageContent":"LinguaCode je vytvořen pro všechny, kteří se chtějí naučit zaklady programování pohodlnější a jednodušší cestou.  \nK učení s LinguaCode nepotřebujete znalost jiných jazyků nebo technických dovedností. Vše co potřebujete je přání učit se a píle\n#### Vlastnosti:  - **Vícejazyčný**  - **Víceplatformový**  - **Jednoduchý zdrojový kód**  - **Zdarma**",
        "languageFeaturesTitle":"Vlastnosti jazyka",
        "languageFeaturesContent":"LinguaCode je založen na Pythonu a JavaScriptu, jednoduchý k pochopení díky jednoduchému zdrojovému kódu a pak k urychlení výuky ostatních jazyků.  **Všechny zakladní koncepty jazyka:**  - **Každý příkaz začíná na nové řádce**  Zdrojový kód tak bude více čistý a jednoduchý.  - **Příkazy mohou být psány velkými i malými písmeny.**  Urychlí to programování ale preferují se písmena malá. - **Text může být psán mezi tázací i uvozovací znaménka.**  V hodně zemí neexistují \"tázací znaménka\", takže si můžete vybrat jaká verze je pro vás vhodnější  - **Text za symbolem «\\#» je posuzován jako komentář a nemá efekt na zdrojový kód.**  Komentáře užíváme pro poznámky.",
        "outputCommandDefinitionTitle":"Definice příkazu",
        "outputCommandDefinitionContent":"Každý program, který dělá některé operace, by nám měla ukázat informace o výsledek. To je důvod, proč všechny programové systémy mají textový výstup možnost a místo, kde můžeme vidět výsledek, která se nazývá **Terminál**. \n\nPříkaz \"*výstup*\" je používán pro textový výstup. \n\n#### Například \nZdrojový kód``jazykového kódu\nvýstup(\"Ahoj\")\n``Výsledek``terminálu\nAhojky\n``",
        "outputPossibleValuesTitle":"Možné hodnoty",
        "outputPossibleValuesContent":"Výstup příkazu lze tisknout text, čísla, matematické operace a proměnné hodnoty.\n\n#### Například \nZdrojový kód \n``jazykového kódu\nvýstup(100)\nvýstup(5 * 25)\n``Výsledek``terminálu\n100\n125\n``",
        "variablesDeclaresAndAssignsTitle":"Deklarování a přiřazování",
        "variablesDeclaresAndAssignsContent":"Často musíme uložit text, číslo a početní operace někam s cílem, aby jej znovu použít. Kontejnerů, kde můžeme ukládat různé hodnoty, se nazývají **proměnné**. Na první musíme zadat název proměnné a pak přiřadit hodnotu. Poté můžeme odkazovat na hodnotu jednoduše tím, že volá proměnná s jeho jménem. \nProměnné jsou uloženy v Random-access memory (RAM) počítače a když použijeme proměnnou, počítače vrátí hodnotu odpovídající název proměnné z paměti RAM.\n#### Důležité si uvědomit,\nNázvy proměnných \n**1.** Může obsahovat písmena, symboly nebo číslice \n**2.** Nemůžu začít s řadou \n**3.** Nemůže obsahovat prostor a symboly aritmetických operací\n#### Například \nPro tisk číslo **617** místo toho \n``jazykového kódu\nvýstup(617)\n``\nbudeme psát\n``jazykového kódu\nX = 617\nvýstup(X)\n``\nVýsledek\n`terminál\n617\n`` \nA pokud chceme na výstupu stejnou hodnotu třikrát, budeme psát \n``jazykového kódu\nX = 617\nvýstup(X)\nvýstup(X)\nvýstup(X)\n`` \nVýsledek \n`terminál\n617\n617\n617\n``",
        "variablesPracticalUseTitle":"Praktické využití",
        "variablesPracticalUseContent":"Jak vidíme, můžeme přiřadit jak číselné a textové hodnoty do proměnné. Ale často potřebujeme přiřadit proměnné nějakou hodnotu, která byla přiřazena další. V tom případě můžeme přiřadit již existující proměnné do nového.\n#### Například \nZdrojový kód\n``jazykového kódu\na = 1\nb = 2\nc = a + b\nvýstup(c)\n`` \nVýsledek\n`terminál\n3\n``\n",
        "variablesMultipleUsesTitle":"Vícenásobné použití",
        "variablesMultipleUsesContent":"Nemáte k vytvoření nové proměnné na novou hodnotu pokaždé. Můžeme také změnit hodnoty přiřazené proměnné. Vyhneme se od zbytečných proměnných a zdrojový kód bude více jednoduché, že způsob,.\n#### Například\nPředpokládejme, že máme **100** jablka a uložit tuto hodnotu do **apple** proměnná. Počet jablek bylo snížení o **5** každý den. \nMusíme výstup počet jablek pro každý den. \n\nZdrojový kód\n``jazykového kódu\napple = 100\nvýstup(apple)\n\napple = jablko - 5 # 95\nvýstup (apple)\n\napple = jablko - 5 # 90\nvýstup(apple)\n\napple = jablko - 5 # 85\nvýstup(apple)\n`` \nVýsledek\n`terminál\n100\n95\n90\n85\n``",
        "inputCommandDefinitionTitle":"Příkaz definice",
        "inputCommandDefinitionContent":"V programování budeme potřebovat jak pro výstup a v mnoha případech na vstupní data. Potřebujeme to, kdy proměnné mohou přijímat žádnou hodnotu. Můžeme také změnit zdrojový kód, pokaždé, a přiřadit nové hodnoty do proměnné, ale to není efektivní a vyžaduje příliš dlouhou dobu. \n\nV tom případě musíme použít příkaz \"*vstup*\". \n\nA tady je jednoduchý příklad programu, který vypíše dvojnásobek počtu zadaných uživatelem. ``jazykového kódu\nvstup(číslo)\nvýstup(počet * 2)\n`` Po spuštění tohoto programu se zobrazí symbol \"**>**\" což znamená, že program začal a je třeba zadat chybějící údaje. Po zadání libovolné číslo a stisknutím tlačítka **Zadejte** uvidíme, dvakrát na zadaný počet. `terminál\n>617\n1234\n`Především potřebujeme, aby se psát programy, které mohou být používány lidmi, kteří ani nevědí, programování.",
        "inputWorkMechanismTitle":"Práce mechanismus",
        "inputWorkMechanismContent":"Nyní se podívejme, jak příkaz input funguje. Například máme tento program ``jazykového kódu\nvýstup(\"Prosím, Zadejte vaše přihlašovací údaje:\")\nvýstup(\"Jméno:\")\nvstup(jméno)\nvýstup(\"Příjmení:\")\nvstup(příjmení)\nvýstup(\"Ahoj\" + jmeno + \"\" + příjmení)\n`` Jak vidíme tam jsou 6 řádků v našem programu. \nPo spuštění to můžeme vidět, že program pracoval až do řádku 3.``terminál\nProsím, zadejte vaše přihlašovací údaje:\nJméno:\n>\n` Po vstupu do zmeškaných data, budeme vidět, že teď to fungovalo, dokud řádek 5.``terminál\nProsím, zadejte vaše přihlašovací údaje:\nJméno:\n>Mořské\nPříjmení:\n>\n` A konečně po zadání poslední pokazil údaje program bude pracovat a konce.`terminál\nProsím, zadejte vaše přihlašovací údaje:\nJméno:\n>Mořské\nPříjmení:\n>Chamchyan\nAhoj, Mořské Chamchyan\n` Takže jsme viděli, že s tímto příkazem program pracuje po částech, které vyžadují, aby vstupní zmeškaných data.",
        "operationsArithmeticOperatorsTitle":"Aritmetické operace",
        "operationsArithmeticOperatorsContent":"V jazykového kódu je možné provádět jednoduché aritmetické operace, jako **+**, **-**, **\\***, **/**. \n\nNapříklad tento program bude dělat všechny aritmetické operátory s **1** a **2** čísla. ``jazykového kódu\nvýstupu(1 + 2) # 3\nvýstup(1 - 2) # -1\nvýstup(1 * 2) # 2\nvýstup(1 / 2) # 0.5\n` ` #### Důležité si uvědomit, \nJak víme, v Matematice násobení proměnné s další proměnná, nebo číslo může být napsáno bez symbol násobení. Například *7 krát X* bude napsáno **7X** nebo *X krát Y* jako **XY**. \nAle v programování je důležité napsat symbol násobení. Například **7 \\* X**, nebo **X \\* Y**.",
        "operationsExecutingPriorityTitle":"Operace provádění prioritních",
        "operationsExecutingPriorityContent":"A to jak v Matematice a v programování, pokud existuje dělení nebo násobení, musíme nejprve udělat, je, a jen poté, co jsme udělat sčítání a odčítání. \n\n#### Například ``jazykového kódu\nX = 10 + 2 * 4 - 2\n# X = 10 + 8 - 2\n# X = 18 - 2\n# X = 16\n` Ale to můžeme změnit vykonávající prioritu pomocí závorek. \n#### Například ``jazykového kódu\nX = (10 + 2) * (4 - 2)\n# X = 12 * (4 - 2)\n# X = 12 * 2\n# X = 24\n`V programování můžeme použít závorky, i když jsou zbytečné. \nTo nebude špatné, ale to raději psát jednoduché a jasné zdrojový kód, který bude snadno pochopitelný pro ostatní.",
        "operationsNumbersTitle":"Čísla",
        "operationsNumbersContent":"Jak víme <a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">numbers</a> jsou matematické objekty používané k počítání, měření a označení. \nExistují 5 druhy čísel. Budeme jednat se všemi z nich, s výjimkou pro komplexní numbes \n- ** přirozená čísla** **1**, **2**, ...``jazykového kódu\nvýstup(7 + 4) # 13\n`` \n- **celá čísla** ..., **-1**, **0**, **1**, ...``jazykového kódu\nvýstup(-6 * 5 + -3) # -33\n`` \n- **racionální čísla** **1/2**, **2/3**, **0.125**, ...``jazykového kódu\nvýstup(0.617 * 2 * 1000) # 1234\n`` \n- **reálná čísla** **√2**, **1.62**, ...``jazykového kódu\nvýstup(2/3 + 1/2) # 1\n``",
        "operationsSumOfStringAndNumberTitle":"Součet řetězce a čísla",
        "operationsSumOfStringAndNumberContent":"Jak vidíme, je možné přidat i čísla a texty k sobě, v nichž výsledek řádky jsou spojeny v jednom řádku. Ale často potřebujeme získat řádek, ve kterém budou použity číselné hodnoty. V tom případě je možné přidat text na číslo, v jehož důsledku počet bude upraven a v kombinaci s text jako text.``jazykového kódu\ntext = \"existuje\" + 365 + \"dny v roce\"\n# text = \"existuje\" + \"365\" + \"dny v roce\"\n# text = \"tam jsou 365\" + \"dny v roce\"\n# text = \"tam jsou 365 dní v roce\"\n` ` #### Důležité si uvědomit, \nS řádky můžeme dělat jen to přidáním operace. Zatímco dělat jiné operace, bude výsledkem chyba.",
        "conditionsCommandsIfTitle":"Příkaz \"If\"",
        "conditionsCommandsIfContent":"Někdy v programování potřebujeme provést nějaké operace na základě stavu. Pro to existují podmínky, kontrola příkazy jako \"Pokud\", \"if-else\" a \"Jiný-Kdyby\". \n\nPsaní podobě příkazu \"**Pokud**\" ``jazykového kódu\npokud <condition> pak\n<operation>\n` Tady mezi příkazy \"Jestliže\" a \"pak\" tam je podmínka, a poté, co je z nové řady a po **4 místa** je napsáno provozu (nebo operací), které bude provedeno, pokud tvrzení je pravdivé. \n\n#### Například ``jazykového kódu\na = 5\nb = 2\npokud a > b, pak\nvýstup(\"a > b\")\n``",
        "conditionsCommandsIfElseTitle":"Příkaz \"If-Else\"",
        "conditionsCommandsIfElseContent":"Takže víme, jak používat podmíněný příkaz v programech. Nyní budeme diskutovat případ, kdy je podmínka false.\n\nPsaní formou \"**if-Else**\" prohlášení ``jazykového kódu\npokud <condition> pak\n<operation N1>\njiný\n<operation N2>\n` Tady po příkazu \"Když\" tam je nový příkaz \"Jiný\". A z nové linky, po 4 místa je napsáno operace, která bude provedena, pokud uvedená podmínka je false.\n\n#### Například ``jazykového kódu\na = 5\nb = 10\npokud a > b\nvýstup(\"a > b\")\njiný\nvýstup(\"b <\")\n``",
        "conditionsCommandsElseIfTitle":"Příkaz \"Else-If\"",
        "conditionsCommandsElseIfContent":"Jsme již diskutovali, který příkaz bude proveden na základě stavu je true nebo false. Ale někdy musíme zkontrolovat více než jeden stav, ve stejnou dobu. \n\nPsaní formou \"**if-Else-If**\" prohlášení``jazykového kódu\npokud <condition N1> pak\n<operation N1>\njinak pokud <condition N2> pak\n<operation N2>\njiný\n<operation N3>\n` Tady musíme kontrolovat více než jednu podmínku. V případě \"Jiného-Pokud\" psaní podobě tam může být 1 nebo více \"Jinak-Pokud\" prohlášení mezi příkazů \"If\" a \"Ostatní\". \n\n#### Například ``jazykového kódu\na = 5\nb = 5\npokud a > b, pak\nvýstup(\"a > b\")\njinak pokud a < b, pak\nvýstup(\"a < b\")\njiný\nvýstup(\"b ==\")\n``",
        "booleanTypesBooleanTitle":"Popis",
        "booleanTypesBooleanContent":"My už víme, jak zkontrolovat prohlášení a některé z nich mohou být *pravda* (22 > 18 let) nebo *false* (16 > 18). Někdy kvůli délce stav kontrola line, to stane se obtížné číst zdrojový kód. Zde přichází na pomoc booleovské hodnoty \n\n- **pravda** ``jazykového kódu\npodmínka = true\nvýstup(stav) #true\n`` \n\n- **false**``jazykového kódu\nstav = false\nvýstup(stav) #false\n` Žádný logický srovnání známo, že nám vrátí jednu z uvedených hodnot \n\nExemple *pravda* srovnání ``jazykového kódu\nstav = 1 < 5\nvýstup(stav) # true\n`` Exemple *false* srovnání ``jazykového kódu\nstav = 10 < 5\nvýstup(stav) # false\n` Takže ve stavu, kontrolu příkazů, které můžeme použít proměnné s logickými hodnotami. \n\n#### Například ``jazykového kódu\nvýstup(\"Napište číslo \"a\":\")\nvstup(a)\n\nvýstup(\"Napište číslo \"b\":\")\nvstup(b)\n\ncondition1 = a > b\ncondition2 = a < b\n\npokud condition1 pak\nvýsledek = \"a > b\"\njinak pokud condition2 pak\nvýsledek = \"a < b\"\njiný\nvýsledek = \"a == b\"։\nvýstup(\"Výsledek:\" + výsledek)\n``",
        "booleanOperatorsComparisonTitle":"Operátory porovnání",
        "booleanOperatorsComparisonContent":"Ve stavu, kontrola příkazy jsme již použity symboly \"větší než\" > \"a menší než\" < porovnávací operátory. Ale teď zde můžeme použít jakékoliv jiné subjekty nám známé. \n\n- **>** porovná číselné hodnoty, v nichž první je *#větší* než druhý. Například ``jazykového kódu\nvýstup(5 > 1) # true\nvýstup(1 > 5) # false\n`` \n\n- **>=** porovná číselné hodnoty, v nichž první je *#větší nebo rovno* druhý. Například ``jazykového kódu\nvýstup(5 >= 5) # true\nvýstup(1 >= 5) # false\n`` \n\n- **<** porovná číselné hodnoty, v nichž první je *#méně* než druhý. Například ``jazykového kódu\nvýstup(1 < 5) # true\nvýstup(5 < 1) # false\n`` \n\n- **<=** porovná číselné hodnoty, v nichž první je *#menší nebo rovno* druhý. Například ``jazykového kódu\nvýstup(1 <= 5) # true\nvýstup(5 <= 1) # false\n`` \n\n- **==** porovná číselné nebo textové hodnoty, v nichž první je *#rovná* druhý. Například ``jazykového kódu\nvýstup(5 == 5) # true\nvýstup(5 == 1) # false\nvýstup(\"voják\" == \"voják\") # true\nvýstup(\"Ahoj\" == \"Helo\") # false\n`` \n\n- **!=** porovnává číselné nebo textové hodnoty, v nichž první je *#nerovná se* druhý. Například ``jazykového kódu\nvýstup(5 != 1) # true\nvýstup(5 != 5) # false\nvýstup(\"Ahoj\" != \"Helo\") # true\nvýstup(\"voják\" != \"voják\") # false\n`` \n\n- **()** vrátí zvrátit výsledek nějaké číselné nebo textové srovnání. Například ``jazykového kódu\nvýstup(not(1 > 5)) # true\nvýstup ((5 == 5)) # false\nvýkon(ne(false)) # true\nvýstup(not(true)) # false\n``",
        "booleanOperatorsLogicalTitle":"Logické operátory",
        "booleanOperatorsLogicalContent":"Takže víme, jak psát nějaký podmíněný příkaz, ale často potřebujeme spojit několik podmínek do jedné, a na základě něj provést některé operace. Kombinování podmínek probíhá pomocí booleovských operátorů. \n\n- Příkaz \"**a**\" spojuje dvě podmínky v jednom, která se nazývá **pravda,**, když obě podmínky jsou *pravda* a **false**, když alespoň jedna z podmínek je *false*. Například ``jazykového kódu\nvýstup(5 > 1 և 10 < 100) # true\nvýstup(20 < 100 և 1 > 5) # false\n`` \n\n- Příkaz \"**nebo**\" spojuje dvě podmínky v jednom, která se nazývá **pravda,**, když alespoň jedna z podmínek je *pravda* a **false** když obě podmínky jsou *false*. Například ``jazykového kódu\nvýstup(5 > 1 nebo 100 < 10) # true\nvýstup(20 > 100 nebo 1 > 5) # false\n``",
        "booleanOperatorsExecutingPriorityTitle":"Provádění prioritních",
        "booleanOperatorsExecutingPriorityContent":"Jsme se naučili, jak kombinovat 2 podmínky, ale mohou být více než 2, na základě obsahu programu. V tom případě, že podmínky budou v kombinaci s ostatními z *zleva doprava*, dokud oni tvoří jednu podmínku.\n\n#### Například ``jazykového kódu\nvýstup(5 < 1 և 1 < 7 nebo 1 >= 3 nebo 9 == 9)\n` to je stejné jako `jazykového kódu\nvýstup(false և pravda nebo nepravda nebo pravda)\n` pojďme kombinovat **1** a **2** \"**nepravdivé a pravdivé**\" podmínky v jednom․ ``jazykového kódu\nvýstup(nepravda nebo nepravda nebo pravda)\n`pak **1+2** stav s **3** bude \"**nepravdivé nebo nepravdivé**\" ``jazykového kódu\nvýstup(false nebo true)\n` a konečně **1+2+3** stav s **4.** bude \"**false nebo true**\"․ ``jazykového kódu\nvýstup(pravda)\n` A tak jsme se kombinovat 4 podmínky v jednom. Můžeme kombinovat více podmínek, že způsob,. \n\nNěkdy musíme změnit zleva doprava kombinující prioritu pomocí závorek. \n\n#### Například ``jazykového kódu\nvýstup(5 < 1 և (1 < 7 nebo (1 >= 3 nebo 9 == 9)))\n`` \n\nto je stejné jako `jazykového kódu\nvýstup(false և (pravda nebo (false nebo true)))\n` pojďme kombinovat **3** a **4** \"**false nebo true**\" podmínky v jednom ``jazykového kódu\nvýstup(false nebo (false nebo true))\n`` po **2** s podmínkou **3+4** podmínkou bude \"**false nebo true**\" ``jazykového kódu\nvýstup(false և pravda)\n`` a nakonec spojíme **1** stav s **2+(3+4)**. To bude \"**nepravdivé a pravdivé**\" ``jazykového kódu\nvýstup(false)\n` A tak jsme viděli, že výsledek je měnit s měnící se kombinací prioritou."
      },
      "syntaxInfo":{
        "modalTitle":"Příkaz průvodce",
        "cheatSheetTitle":"Tahák",
        "lesson":"Tutorial"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b>Klávesové zkratky</b>",
      "undo":"Vrátit zpět",
      "redo":"Opakovat",
      "selectAll":"Vybrat vše",
      "run":"Spustit",
      "terminal":"Terminály"
    },
    "program":{
      "program":"Program",
      "sourceCode":"Zdrojový kód",
      "functionArgumentSyntaxError":"Funkce argument Chyba syntaxe v ${line} linii.",
      "undefinedVariable":"Proměnná \"${variable}\" nedefinovaná v ${line} linii.",
      "indentError":"Prostorová chyba v ${line} linii.",
      "hackAttempt":"Pokus o hack. Vaše ip adresa \"${ip}\" byla uložena do naší databáze.",
      "syntaxError":"Chyba syntaxe",
      "timeout":"Vypršel časový limit. Ujistěte se, že kód nemá nekonečnou smyčku.",
      "true":"pravda",
      "false":"lež",
      "NaN":"neznámé",
      "null":"neznámé",
      "Infinity":"nekonečno",
      "undefined":"nedefinováno"
    },
    "programListGroup":{
      "programs":"Programy"
    },
    "terminal":{
      "hotkeys":"<b>Klávesové zkratky</b>",
      "undo":"Vrátit zpět",
      "redo":"Opakovat",
      "selectAll":"Vybrat vše",
      "terminal":"Terminály"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"Přihlásit se"
    },
    "menuButton":{
      "settings":"Nastavení",
      "logOut":"Odhlásit se"
    }
  },
  "panels":{
    "header":{
      "title":"Domů"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"Uživatel zatím nemá žádné programy."
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"Zatím nemáš žádné programy.",
      "programNotFoundClickPartFirst":"Klik",
      "programNotFoundClickPartSecond":"zde",
      "programNotFoundClickPartThird":"chcete-li vytvořit nový program."
    },
    "loading":{
      "loading":"Načítání"
    }
  }
}