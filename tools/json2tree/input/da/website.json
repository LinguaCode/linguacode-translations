{
  "blocks":{
    "controlPanelBlock":{
      "edit":"Rediger",
      "delete":"Slet"
    },
    "lovePanelBlock":{
      "like":"Som",
      "liked":"Kunne godt lide",
      "star":"Stjerne",
      "starred":"Stjerne"
    },
    "moreFromUserBlock":{
      "viewAll":"Se alle",
      "moreFromFirst":"Mere fra",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"Sortér efter",
      "recent":"Seneste",
      "views":"Udsigt",
      "stars":"Stjerner",
      "likes":"Kan lide",
      "random":"Tilfældig"
    },
    "shareBlock":{
      "link":"Link",
      "share":"Dele",
      "tweet":"Tweet",
      "textTwitter":"Programmet \"${programTitle}\" af ${userName} på #LinguaCode ${userPageLink}",
      "descriptionVK":"LinguaCode er en social kodning platform og er designet specielt til børn, hvor de kan lære programmering og dele deres koder med deres eget sprog og uden at det er nødvendigt at beherske engelsk."
    },
    "userPrimaryInfoBlock":{
      "editProfile":"Rediger profil"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"Sluttede på"
    }
  },
  "pages":{
    "errorPage":{
      "title":"Fejl",
      "explanation":"Beklager, men en kritisk fejl på denne side."
    },
    "landingPage":{
      "title":"LinguaCode: Læring gennem Kodning",
      "learningByCoding":"Læring <span className=\"masthead--lora-italic\">by Coding</span>",
      "explanation":"Vi gør læring til programmering og kodning, så fuld af glæde og liv, vil du grine højt.",
      "facebookSignIn":"Log ind med Facebook",
      "or":"eller",
      "seeTheListOfPrograms":"Se listen over findes programmer",
      "descriptionHead":"Den bedste måde at lære et programmeringssprog.",
      "descriptionBody":"LinguaCode er en social kodning platform og er designet specielt til børn, hvor de kan lære programmering og dele deres koder med deres eget sprog og uden at det er nødvendigt at beherske engelsk.",
      "advantagesHeadline":"LinguaCode hjælper dig <span className=\"u-emphasized\">learn bedre </span>",
      "advantageTopFirstHeadline":"Flersprogede",
      "advantageTopFirstDescription":"Skrive programmer på dit eget sprog, og ikke kun.",
      "advantageTopSecondHeadline":"Det er gratis!",
      "advantageTopSecondDescription":"Alt er gratis.",
      "advantageTopThirdHeadline":"Hurtig start",
      "advantageTopThirdDescription":"Kom godt i gang er meget nemmere end du tror!",
      "advantageBottomFirstHeadline":"Fantasi",
      "advantageBottomFirstDescription":"Lære, prøve, Skabe!",
      "advantageBottomSecondHeadline":"Uddannelse",
      "advantageBottomSecondDescription":"Lær programmering, samt andre emner.",
      "advantageBottomThirdHeadline":"Fællesskab",
      "advantageBottomThirdDescription":"Del dine programmer med venner og finde nye venner.",
      "joinText":"Slutte sig til <span className=\"u-emphasized\">the community</span> af elever",
      "facebookRegister":"Tilmeld dig nu, det er GRATIS!"
    },
    "notFoundPage":{
      "title":"Siden Blev Ikke Fundet",
      "explanation":"Beklager, men den side, du forsøger at få vist, ikke findes.",
      "descriptionPartFirst":"Prøv vej til",
      "descriptionPartSecond":"hovedsiden",
      "descriptionPartThird":"i stedet."
    },
    "programChangePage":{
      "titleOfEditPage":"Redigere ${userName}/${title} program",
      "editProgramHeadline":"Redigering af et program",
      "editProgramButton":"Rediger Program",
      "titleOfCreatePage":"Opret et nyt program",
      "newProgramHeadline":"Opret et nyt program",
      "submitProgramButton":"Indsende Program",
      "programContent":"Et program, som indeholder alle oplysninger om din kode.",
      "name":"Navn",
      "programNameForm":"Stort program navne er kort og mindeværdig, som <b>hello-world</b>.",
      "titleOfProgram":"Titel",
      "description":"Beskrivelse",
      "validationError":"Valideringsfejl",
      "errorTextForNameLength":"Længden af <b>name</b> skal mere end 0 og mindre end 32, det bør bestå af latin symboler og streger.",
      "errorTextForName":"Dette navn af den kilde, der allerede bruges af dig.",
      "errorTextForTitle":"Længden af <b>title</b> skal mere end 0 og mindre end 128.",
      "errorTextForDescription":"Længden af <b>description</b> skal mere end 0 og mindre end 5120.",
      "errorTextForSource":"Længden af <b>source</b> skal mere end 0 og mindre end 10240."
    },
    "programs":{
      "title":"Programmer"
    },
    "settingsPage":{
      "title":"Indstillinger",
      "publicProfile":"Offentlig profil",
      "validationError":"Valideringsfejl",
      "username":"Brugernavn",
      "yourUsername":"Dit brugernavn",
      "usernameWasAlreadyUsed":"Brugernavn blev allerede brugt",
      "usernameWasReserved":"Brugernavn blev reserveret",
      "usernameValidation":"Længden af <b>username</b> bør være mindre end 24 og indeholde små bogstaver i latin og tal.",
      "name":"Navn",
      "yourFirstNameAndLastName":"Dit fornavn og efternavn",
      "nameValidation":"Længden af <b>name</b> skal være større end 0 og mindre end 24",
      "bio":"Bio",
      "tellALittleAboutYourself":"Fortæl lidt om dig selv",
      "bioValidation":"Længden af <b>bio</b> bør være mindre end 128.",
      "country":"Land",
      "select":"vælg",
      "countryValidation":"Vælg et af de lande,",
      "updateProfile":"Opdater profil"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"Log ind",
      "signInDescription":"Driften er kun muligt, når du er logget på."
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"Er du sikker på du ønsker at slette programmet ?",
      "answerYes":"ja",
      "answerNo":"ingen"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"Udgang",
        "outputNameValue":"``linguacode\noutput(X)\n``",
        "outputDescription":"Udskriver enhver X-værdi: tal, operationer, tekst og variable værdier. For eksempel",
        "outputDescriptionValue":"``linguacode\noutput(4) # 4\noutput(\"Howdy\") # Howdy\noutput(1+2) # 3\n``",
        "inputName":"Input",
        "inputNameValue":"``linguacode\ninput(X)\n``",
        "inputDescription":"Enhver X-variabel værdi erklærer af brugeren. For eksempel",
        "inputDescriptionValue":"``linguacode\ninput(a)\n``",
        "ifElseStatementName":"Kontrol af erklæring",
        "ifElseStatementNameValue":"``linguacode\nhvis <condition N1> derefter\n<operation N1>\nellers hvis <condition N2> derefter\n<operation N2>\nandet\n<operation N3>\n``",
        "ifElseStatementDescription":"Operationerne vil blive gennemført baseret på angivne betingelse er sand. For eksempel",
        "ifElseStatementDescriptionValue":"``linguacode\na = 5\nb = 5\nhvis a > b, så\noutput(\"a > b\")\nelse if a < b, så\noutput(\"a < b\")\nandet\noutput(\"b == a\") # b == a\n``",
        "loopForName":"Begrænset gentage",
        "loopForNameValue":"``linguacode\ngentag <N> gange\n<operation>\n``",
        "loopForDescription":"Udfører en blok af kode, et antal gange. For eksempel",
        "loopForDescriptionValue":"``linguacode\ngentag 10 gange\noutput(\"Howdy\")\n``",
        "loopWhileDoName":"Loop \", Mens Du Gør\"",
        "loopWhileDoNameValue":"``linguacode\nmens <condition> derefter\n<operation>\n``",
        "loopWhileDoDescription":"\"Mens du Gør\" - løkke udfører gennem en blok af kode, så længe en bestemt betingelse er sand. For eksempel",
        "loopWhileDoDescriptionValue":"``linguacode\na = 1\nmens en < 5 da\noutput(a)\na = a + 1\n``",
        "loopDoWhileName":"Loop \", Mens\"",
        "loopDoWhileNameValue":"``linguacode\ngøre\n<operation>\nmens <condition>\n``",
        "loopDoWhileDescription":"Loop \", Mens\" vil gentage løkke, så længe betingelse er sand. For eksempel",
        "loopDoWhileDescriptionValue":"``linguacode\na = 1\ngøre \noutput(a)\na = a + 1\nmens en < 5\n``",
        "piName":"pi matematisk konstant,",
        "piNameValue":"``linguacode\noutput(pi)\n``",
        "piDescription":"Udskriver matematiske konstant <b>pi</b>. For eksempel",
        "piDescriptionValue":"``linguacode\noutput(pi) # 3.141592653589793\n``",
        "eNumberName":"e matematisk konstant,",
        "eNumberNameValue":"``linguacode\nudgang(e)\n``",
        "eNumberDescription":"Udskriver matematiske konstant <b>e</b>. For eksempel",
        "eNumberDescriptionValue":"``linguacode\nudgang(e) # 2.718281828459045\n``",
        "sqrName":"Kvadratet af antallet",
        "sqrNameValue":"``linguacode\nsqr(X)\n``",
        "sqrDescription":"Returnerer kvadratet af <b>X</b> nummer indtastes af brugeren. For eksempel",
        "sqrDescriptionValue":"``linguacode\nX = 5 \nY = sqr(X) \noutput(Y) # 25\n``",
        "powName":"Effekt af antal",
        "powNameValue":"``linguacode\npow(X,Y)\n``",
        "powDescription":"Returnerer værdien af <b>X</b> til magt <b>Y</b>. For eksempel",
        "powDescriptionValue":"``linguacode\nX = 2 \nY = 5 \nZ = pow(X, Y) \noutput(Z) # 32\n``",
        "sqrtName":"Kvadratroden af antal",
        "sqrtNameValue":"``linguacode\nsqrt(X)\n``",
        "sqrtDescription":"Returnerer kvadratroden af <b>X</b> nummer indtastes af brugeren. For eksempel",
        "sqrtDescriptionValue":"``linguacode\nX = 9 \nY = sqrt(X) \noutput(Y) # 3\n``",
        "absName":"Absolutte værdi af tal",
        "absNameValue":"``linguacode\nabs(X)\n``",
        "absDescription":"Returnerer den absolutte værdi af <b>X</b> nummer indtastes af brugeren. For eksempel՝",
        "absDescriptionValue":"``linguacode\nX = -5 \nY = abs(X) \noutput(Y) # 5\n``",
        "roundName":"Antal afrunding",
        "roundNameValue":"``linguacode\nround(X)\n``",
        "roundDescription":"Runder et <b>X</b> tal til det nærmeste heltal, og returnerer værdien. For eksempel",
        "roundDescriptionValue":"``linguacode\nX = 2.3 \na = round(X) \noutput(a) # 2\n``",
        "floorName":"Antal gulvtæppe",
        "floorNameValue":"``linguacode\nfloor(X)\n``",
        "floorDescription":"Runder et <b>X</b> antal <b>downwards</b> til nærmeste hele tal, og returnerer værdien. For eksempel",
        "floorDescriptionValue":"``linguacode\nX = 2.6 \na = floor(X) \noutput(a) # 2\n``",
        "ceilName":"Antal ceil",
        "ceilNameValue":"``linguacode\nceil(X)\n``",
        "ceilDescription":"Runde en <b>X</b> antal <b>upwards</b> til sin nærmeste hele tal, og returnerer værdien",
        "ceilDescriptionValue":"``linguacode\nX = 2.2 \na = ceil(X) \noutput(a) # 3\n``",
        "sinName":"Sinus",
        "sinNameValue":"``linguacode\nsin(X)\n``",
        "sinDescription":"Returnerer værdien af den <b>sine</b> af en <b>X</b> nummer. For eksempel",
        "sinDescriptionValue":"``linguacode\nX = sin(pi) \noutput(X) # 0\n``",
        "cosName":"Cosinus",
        "cosNameValue":"``linguacode\ncos(X)\n``",
        "cosDescription":"Returnerer værdien af den <b>cosine</b> af en <b>X</b> nummer. For eksempel",
        "cosDescriptionValue":"``linguacode\nX = cos(pi) \noutput(X) # -1\n``",
        "tanName":"Tangent",
        "tanNameValue":"``linguacode\ntan(X)\n``",
        "tanDescription":"Returnerer værdien af den <b>tangent</b> af en <b>X</b> nummer. For eksempel՝",
        "tanDescriptionValue":"``linguacode\nX = tan(pi) \noutput(X) # 0\n``",
        "ctgName":"Cotangens",
        "ctgNameValue":"``linguacode\nctg(X)\n``",
        "ctgDescription":"Returnerer værdien af den <b>cotangent</b> af en <b>X</b> nummer. For eksempel՝",
        "ctgDescriptionValue":"``linguacode\nX = ctg(pi/4) \noutput(X) # 1\n``",
        "arcSinName":"Arcsinus",
        "arcSinNameValue":"``linguacode\narcsin(X)\n``",
        "arcSinDescription":"Returnerer den værdi, hvor sinus får samme værdi som <b>X</b>. For eksempel",
        "arcSinDescriptionValue":"``linguacode\na = arcsin(1) \noutput(a) # pi/2 \n``",
        "arcCosName":"Arccosine",
        "arcCosNameValue":"``linguacode\narccos(X)\n``",
        "arcCosDescription":"Returnerer den værdi, hvor cosinus får samme værdi som <b>X</b>. For eksempel",
        "arcCosDescriptionValue":"``linguacode\na = arccos(1) \noutput(a) # 0\n``",
        "arcTanName":"Tangens",
        "arcTanNameValue":"``linguacode\narctan(X)\n``",
        "arcTanDescription":"Returnerer den værdi, hvor tangenten får samme værdi som <b>X</b>. For eksempel",
        "arcTanDescriptionValue":"``linguacode\na = arctan(0) \noutput(a) # 0\n``",
        "arcCtgName":"Arccotangent",
        "arcCtgNameValue":"``linguacode\narcctg(X)\n``",
        "arcCtgDescription":"Returnerer den værdi, hvor cotangens får samme værdi som <b>X</b>. For eksempel",
        "arcCtgDescriptionValue":"``linguacode\na = arcctg(1) \noutput(a) # pi/4\n``",
        "logName":"Logaritme",
        "logNameValue":"``linguacode\nlog(X,Y)\n``",
        "logDescription":"Returnerer værdien af den naturlige logaritme af <b>X</b> til base <b>Y</b>. For eksempel",
        "logDescriptionValue":"``linguacode\na = log(3,27) \noutput(a) # 3\n``",
        "lgName":"- Talslogaritmen",
        "lgNameValue":"``linguacode\nlg(Y)\n``",
        "lgDescription":"Returnerer værdien af den naturlige logaritme af <b>X</b> til base <b>10</b>. For eksempel",
        "lgDescriptionValue":"``linguacode\na = lg(100) \noutput(a), # 10\n``",
        "lnName":"Naturlige logaritme",
        "lnNameValue":"``linguacode\nln(Y)\n``",
        "lnDescription":"Returnerer værdien af den naturlige logaritme af <b>X</b> til base <b>e</b>. For eksempel",
        "lnDescriptionValue":"``linguacode\na = ln(e) \noutput(a), # 1\n``",
        "randomName":"Generering af tilfældige tal",
        "randomNameValue":"``linguacode\ntilfældige(X,[Y])\n``",
        "randomDescription":"Hvis parameter <b>Y</b> er givet, vil programmet tilfældigt generere og vende tilbage tilfældige heltal fra range<b>[X, Y]</b>. Men uden <b>Y</b> parameter området vil være <b>[0; X]</b>. For eksempel",
        "randomDescriptionValueFirst":"``linguacode\nX = 10 \na = random(X) # [0; 10]\noutput(a) # 4 \n``",
        "randomDescriptionValueSecond":"``linguacode\nX = 5 \nY = 15 \na = random(X,Y) # [5; 15]\noutput(a) # 12\n``"
      },
      "tutorials":{
        "intro":"Indledning",
        "output":"Udgang",
        "variables":"Variabler",
        "input":"Input",
        "operations":"Operationer",
        "conditions":"Betingelser",
        "boolean":"Boolesk",
        "languageAboutLanguageTitle":"Om Sprog",
        "languageAboutLanguageContent":"LinguaCode er skabt for alle dem, der ønsker at lære programmering grundlæggende i en mere behagelig måde. \nAt lære med LinguaCode det er ikke vigtigt kendskab til fremmedsprog eller tekniske færdigheder. Alt hvad du behøver, er lyst til at lære og flid. \n\n#### Funktioner:\n- **Flersproget**\n- **Multiplatform**\n- **Enkel Kildekode**\n- **Gratis**\n",
        "languageFeaturesTitle":"Sprog Funktioner",
        "languageFeaturesContent":"LinguaCode er baseret på Python, Pascal og JavaScript, hvilket gør det let at forstå, med enkle source-kode og derefter lære et andet programmeringssprog, mere hurtigt. \n\n**Her er alle de grundlæggende begreber for sprog:**\n\n- **Hver kommando starter fra ny linje.** \nKildekoden vil være mere enkel og klar, ved den måde.\n- **Kommandoer kan være skrevet af både store og små.** \nDet fremskynder processen med programmering, men det er foretrukket at skrive med små bogstaver.\n- **Teksten kan være skrevet mellem anførselstegn og apostroffer.** \nI mange lande er der ingen anførselstegn i brug, så her kan du vælge praktisk-version til dig.\n- **Tekst skrevet efter-symbol\", \\ # \" anses som en kommentar og har ingen indflydelse på arbejdet i kildekoden.** \nKommentarer er givet til at tage noter.",
        "outputCommandDefinitionTitle":"Kommando definition",
        "outputCommandDefinitionContent":"Hvert program, som gør nogle handlinger, der skal vise os oplysninger om resultatet. Det er derfor, de alle programmering systemer har tekst output mulighed, og det sted, hvor vi kan se resultatet, som kaldes **Terminal**. \n\nKommandoen \"*output*\" bruges til tekst output. \n\n#### For eksempel \nSource code``linguacode\noutput(\"Howdy\")\n`\"`\"Terminal\nHowdy\n``",
        "outputPossibleValuesTitle":"Mulige værdier",
        "outputPossibleValuesContent":"Kommando udgang kan udskrive tekst, tal, matematiske operationer og variable værdier.\n\n#### For eksempel \nKildekoden \n``linguacode\noutput(100)\noutput(5 * 25)\n`\"`\"Terminal\n100\n125\n``",
        "variablesDeclaresAndAssignsTitle":"At erklære og opgave",
        "variablesDeclaresAndAssignsContent":"Ofte har vi brug for at gemme tekst, tal og numeriske operationer, et eller andet sted med henblik på at bruge det igen. De containere, hvor vi kan gemme forskellige værdier, der er kaldet **variabler**. Først skal vi give et navn til en variabel og derefter tildele en værdi til den. Efter det kan vi henvise til den værdi, blot ved at kalde variabel med navn. \nVariabler, der er gemt i Random-access memory (RAM) på computeren, og når vi bruger de variable, computeren tilbage til den værdi, der svarer til den pågældende variabel navn fra RAM.\n#### Vigtigt at huske\nVariabel-navne \n**1.** Kan indeholde bogstaver, symboler eller tal \n**2.** Kan ikke begynde med et tal \n**3.** Kan ikke indeholde mellemrum og symboler af aritmetiske operationer\n#### For eksempel \nFor udskrivning nummer **617** i stedet for denne \n``linguacode\noutput(617)\n``\nvi vil skrive\n``linguacode\nX = 617\noutput(X)\n``\nResultat\n``terminal\n617\n`` \nOg hvis vi ønsker at sende den samme værdi, tre gange, vil vi skrive \n``linguacode\nX = 617\noutput(X)\noutput(X)\noutput(X)\n`` \nResultat \n``terminal\n617\n617\n617\n``",
        "variablesPracticalUseTitle":"Praktisk brug",
        "variablesPracticalUseContent":"Som vi ser, kan vi tildele både numeriske og tekst værdier til variabler. Men ofte har vi brug for at tildele variablen en vis værdi, som var blevet tildelt til en anden. I dette tilfælde kan vi tildele allerede eksisterende variabel til den nye.\n#### For eksempel \nKildekoden\n``linguacode\na = 1\nb = 2\nc = a + b\noutput(c)\n`` \nResultat\n``terminal\n3\n``\n",
        "variablesMultipleUsesTitle":"Mange brug",
        "variablesMultipleUsesContent":"Du behøver ikke at oprette en ny variabel en ny værdi, hver gang. Vi kan også ændre de værdier, der er tildelt til variable. Vi vil undgå unødvendige variabler og kildekoden vil være mere enkel på den måde.\n#### For eksempel\nLad os antage, at vi har **100** æbler og gemme denne værdi i **apple** variabel. Antallet af æbler var faldende ved **5** hver eneste dag. \nVi skal output tælle æbler hver dag. \n\nKildekoden\n``linguacode\napple = 100\noutput(apple)\n\napple = apple - 5 # 95\noutput (apple)\n\napple = apple - 5 # 90\noutput(apple)\n\napple = apple - 5 # 85\noutput(apple)\n`` \nResultat\n``terminal\n100\n95\n90\n85\n``",
        "inputCommandDefinitionTitle":"Kommando definition",
        "inputCommandDefinitionContent":"I programmering vi har brug for både output og i mange tilfælde, at input-data. Vi har brug for det, når variabler kan modtage nogen værdi. Vi kan også ændre kilde-koden, hver gang og tildele dem nye værdier til de variable, men det er ikke effektiv og har brug for lang tid. \n\nI dette tilfælde bruger vi kommandoen \"*input*\". \n\nOg her er et simpelt eksempel på program, som udgange dobbelt-nummer indtastes af brugeren. ``linguacode\ninput(antal)\noutput(number * 2)\n` \"Efter at have kørt dette program vil vi se symbolet\"**>**\", hvilket betyder at programmet er startet, og vi har behov for at indtaste en manglende data. Efter indtastning af et vilkårligt antal og trykke på*, *Indtast** vi vil se dobbelt af indtastet nummer. ``terminal\n>617\n1234\n``For det meste er vi nødt til at skrive programmer, som kan bruges af folk, som ikke selv kender til programmering.",
        "inputWorkMechanismTitle":"Arbejde mekanisme",
        "inputWorkMechanismContent":"Lad os nu se, hvordan input kommandoen virker. Vi har For eksempel dette program ``linguacode\noutput(\"Indtast dine legitimationsoplysninger:\")\noutput(\"Navn:\")\ninput(navn)\noutput(\"Efternavn:\")\ninput(efternavn)\noutput(\"Hej\" + navn + \"\" + efternavn)\n` Ligesom vi se, at der er 6 linjer i vores program. \nEfter at have kørt det vi kan se, at programmet arbejdede indtil linje 3.``terminal\nIndtast dine legitimationsoplysninger:\nNavn:\n>\n` \"Efter indtastning af den mistede data, vil vi se, at nu er det arbejdet, indtil linje 5.``terminal\nIndtast dine legitimationsoplysninger:\nNavn:\n>Marine\nEfternavn:\n>\n` Og endelig efter indtastning af sidste rodet data, vil programmet arbejde og ende.``terminal\nIndtast dine legitimationsoplysninger:\nNavn:\n>Marine\nEfternavn:\n>Chamchyan\nHej, Marine Chamchyan\n` Vi så, at med denne kommando program virker en del af del, der kræver, at input mistede data.",
        "operationsArithmeticOperatorsTitle":"Aritmetiske operationer",
        "operationsArithmeticOperatorsContent":"I LinguaCode det er muligt at gennemføre simple matematiske operationer som **+**, **-**, **\\***, **/**. \n\nFor eksempel dette program vil gøre alt, aritmetiske operatorer med **1** og **2** numre. ``linguacode\noutput(1 + 2) # 3\noutput(1 - 2) # -1\noutput(1 * 2) # 2\noutput(1 / 2) # 0.5\n` ` #### Vigtigt at huske \nSom vi ved i Math multiplikation af variabel med en anden variabel eller tal kan skrives uden symbol af multiplikation. For eksempel *7 gange X* vil blive skrevet **7X** eller *X gange Y* like **XY**. \nMen i programmering det er vigtigt at skrive symbolet for multiplikation. For eksempel **7 \\* X**, eller **X \\* Y***.",
        "operationsExecutingPriorityTitle":"Operationer udførelse prioritet",
        "operationsExecutingPriorityContent":"Både i Matematik og i programmering, hvis der er en division eller multiplikation, har vi for det første gøre dem, og kun efter at vi gør det addition og subtraktion. \n\n#### For eksempel ` \" linguacode\nX = 10 + 2 * 4 - 2\n# X = 10 + 8 - 2\n# X = 18 - 2\n# X = 16\n` Men vi kan ændre udførelse prioritet ved hjælp af parenteser. \n#### For eksempel ` \" linguacode\nX = (10 + 2) * (4 - 2)\n# X = 12 * (4 - 2)\n# X = 12 * 2\n# X = 24\n``I teknologi vi kan bruge parenteser, selv hvis de er unødvendige. \nDet vil ikke være forkert, men det er foretrukket at skrive enkle og klare source kode, som vil være let at forstå for andre.",
        "operationsNumbersTitle":"Tal",
        "operationsNumbersContent":"Som vi ved, <a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">numbers</a> er matematiske objekter, der bruges til at tælle, måle og mærke. \nDer er 5 typer af tal. Vi vil beskæftige sig med dem alle, undtagen for komplekse numbes \n- ** naturlige tal** **1**, **2**, ...``linguacode\noutput(7 + 4) # 13\n`` \n- **antal heltal** ..., **-1**, **0**, **1**, ...``linguacode\noutput(-6 * 5 + -3) # -33\n`` \n- **rationelle tal** **1/2**, **2/3**, **0.125**, ...``linguacode\noutput(0.617 * 2 * 1000) # 1234\n`` \n- **reelle tal** **√2**, **1.62**, ...``linguacode\noutput(2/3 + 1/2) # 1\n``",
        "operationsSumOfStringAndNumberTitle":"Summen af strygere og numre",
        "operationsSumOfStringAndNumberContent":"Som vi ser det, er det muligt at tilføje både tal og tekster til hver andre, i, som er resultatet linjer er kombineret i én line. Men ofte har vi brug for at få en linje, hvor der vil blive brugt numeriske værdi. I dette tilfælde er det muligt at tilføje tekst til nummeret, som resultat nummer vil blive ændret, og kombineret med teksten som tekst.``linguacode\ntext = \"der er\" + 365 + \"dage i året\"\n# text = \"der er\" + \"365\" + \"dage i året\"\n# text = \"der er 365\" + \"dage i året\"\n# text = \"der er 365 dage i året\"\n` ` #### Vigtigt at huske \nMed linjer, vi kan gøre, er kun at tilføje drift. Mens du laver andre aktiviteter vil medføre fejl.",
        "conditionsCommandsIfTitle":"Kommandoen \"Hvis\"",
        "conditionsCommandsIfContent":"Nogle gange i programmering vi har brug for at udføre nogle operationer, der er baseret på en betingelse. For det der er betingelse kontrol kommandoer som \"Hvis\", \"If-else\" og \"Andet-Hvis\". \n\nSkriver form af kommandoen \"**Hvis**\" ``linguacode\nhvis <condition> derefter\n<operation>\n` \"Her mellem kommandoer \"Hvis\" og \"så\" der er nogen betingelse, og efter at den nye linje, og efter **4 områder** er skrevet drift (eller handlinger), som vil blive gjort, hvis det udsagn er sandt. \n\n#### For eksempel ` \" linguacode\na = 5\nb = 2\nhvis a > b, så\noutput(\"a > b\")\n``",
        "conditionsCommandsIfElseTitle":"Kommandoen \"If-Else\"",
        "conditionsCommandsIfElseContent":"Så vi ved, hvordan du bruger betinget erklæring i programmer. Nu vil vi drøfte sagen, når betingelsen er falsk.\n\nSkriver form af \"**Hvis-Andet**\" erklæring ``linguacode\nhvis <condition> derefter\n<operation N1>\nandet\n<operation N2>\n` \"Her efter kommandoen \"Hvis\" der er en ny kommando \"Andet\". Og fra den nye linje, efter 4 rum er skrevet af drift, hvilket vil blive gjort, hvis de nævnte betingelse er falsk.\n\n#### For eksempel ` \" linguacode\na = 5\nb = 10,\nhvis a > b\noutput(\"a > b\")\nandet\noutput(\"b\")\n``",
        "conditionsCommandsElseIfTitle":"Kommandoen \"Else-If\"",
        "conditionsCommandsElseIfContent":"Vi har allerede diskuteret, hvilken kommando der skal udføres baseret på betingelse er sand eller falsk. Men nogle gange er vi nødt til at kontrollere mere end en tilstand, i den samme tid. \n\nSkriver form af \"**Hvis-Andet-Hvis**\" erklæring``linguacode\nhvis <condition N1> derefter\n<operation N1>\nellers hvis <condition N2> derefter\n<operation N2>\nandet\n<operation N3>\n` \"Her skal vi ind mere end én betingelse. I tilfælde af \"Anden-Hvis\" skriftlig form der kan være 1 eller flere \"Andet-Hvis\" - sætninger mellem kommandoer \"Hvis\" og \"Andet\". \n\n#### For eksempel ` \" linguacode\na = 5\nb = 5\nhvis a > b, så\noutput(\"a > b\")\nelse if a < b, så\noutput(\"a < b\")\nandet\noutput(\"b == a\")\n``",
        "booleanTypesBooleanTitle":"Beskrivelse",
        "booleanTypesBooleanContent":"Vi ved allerede, hvordan at kontrollere, erklæringer og nogle af dem kan være *sand* (22 > 18) eller *falsk* (16 > 18). Nogle gange på grund af længden af den betingelse, at kontrollere linjen, bliver det svært at læse kildekoden. Her kommer til at hjælpe booleske værdier \n\n- **sand** ``linguacode\ntilstand = true\noutput(tilstand) #sandt\n`` \n\n- **falsk**``linguacode\ntilstand = false\noutput(tilstand) #falsk\n` \"Enhver boolesk sammenligning kendt, at usa vender tilbage til en af de givne værdier \n\nExemple *sand* sammenligning ``linguacode\nbetingelse = 1 < 5\noutput(tilstand) # sandt\n`` Exemple af *falsk* sammenligning ``linguacode\ntilstand = 10 < 5\noutput(tilstand) # falsk\n`` Så i stand kontrol-kommandoer, som vi kan bruge variabler med booleske værdier. \n\n#### For eksempel ` \" linguacode\noutput(\"Skriv et tal \"a\":\")\ninput(a)\n\noutput(\"Skriv et tal \"b\":\")\ninput b)\n\ncondition1 = a - > b\ncondition2 = en < b\n\nhvis condition1 derefter\nresultat = > b\"\nellers hvis condition2 derefter\nresultat = \"a < b\"\nandet\nresultat = \"a == b\"։\noutput(\"Resultat:\" + result)\n``",
        "booleanOperatorsComparisonTitle":"Sammenligning operatører",
        "booleanOperatorsComparisonContent":"I stand kontrol-kommandoer, som vi allerede har brugt symboler af \"større end\" og \"mindre end\" < sammenligning operatører. Men nu her, vi kan bruge andre aktører kendt til os. \n\n- **>** sammenligner numeriske værdier, hvor den første er *#større* end den anden. For eksempel ` \" linguacode\noutput(5 > 1) # sandt\noutput(1 > 5) # falsk\n`` \n\n- **>=** sammenligner numeriske værdier, hvor den første er *#større end eller lig* af den anden. For eksempel ` \" linguacode\noutput(5 >= 5) # sandt\noutput(1 >= 5) # falsk\n`` \n\n- **<** sammenligner numeriske værdier, hvor den første er *#mindre* end den anden. For eksempel ` \" linguacode\noutput(1 < 5) # sandt\noutput(5 < 1) # falsk\n`` \n\n- **<=** sammenligner numeriske værdier, hvor den første er *#mindre end eller lig med at* den anden. For eksempel ` \" linguacode\noutput(1 <= 5) # sandt\noutput(5 <= 1) # falsk\n`` \n\n- **==** sammenligner numeriske værdier eller tekst, hvor den første er *#svarende til* den anden. For eksempel ` \" linguacode\noutput(5 == 5) # sandt\noutput(5 == 1) # falsk\noutput(\"soldat\" == \"soldat\") # sandt\noutput(\"Hej\" == \"Helo\") # falsk\n`` \n\n- **!=** sammenligner numeriske værdier eller tekst, hvor den første er *#ikke lige til at* * * den anden. For eksempel ` \" linguacode\noutput(5 != 1) # sandt\noutput(5 != 5) # falsk\noutput(\"HelLo\" != \"Helo\") # sandt\noutput(\"soldat\" != \"soldier\") # falsk\n`` \n\n- **()** afkast vendt resultatet af en numerisk eller tekst sammenligning. For eksempel ` \" linguacode\noutput(ikke(1 > 5)) # sandt\noutput(ikke(5 == 5)) # falsk\noutput(ej(falsk)) # sandt\noutput(not(true)) # falsk\n``",
        "booleanOperatorsLogicalTitle":"Booleske operatorer",
        "booleanOperatorsLogicalContent":"Så vi ved, hvordan til at skrive en betinget erklæring, men ofte er vi nødt til at kombinere en række forhold i én, og baseret på det udføre nogle operationer. En kombination af de betingelser, der finder sted med booleske operatorer. \n\n- Kommandoen \"*** * * * *\" kombinerer to betingelser, som er kaldet **sand** når begge betingelser er *sand* og **falsk**, når mindst en af betingelserne er, *falsk*. For eksempel ` \" linguacode\noutput(5 > 1 և 10 < 100) # sandt\noutput(20 < 100 և 1 > 5) # falsk\n`` \n\n- Kommandoen \"**eller**\" kombinerer to betingelser, som er kaldet **sand**, når mindst en af betingelserne er, *sand* og **falsk** når de to betingelser er: *falsk*. For eksempel ` \" linguacode\noutput(5 > 1 eller 100 < 10) # sandt\noutput(20 > 100 eller 1 > 5) # falsk\n``",
        "booleanOperatorsExecutingPriorityTitle":"Udførelse prioritet",
        "booleanOperatorsExecutingPriorityContent":"Vi lærte hvordan til at kombinere 2 forhold, men de kan være mere end 2, er baseret på programmets indhold. I det tilfælde, at betingelserne vil blive kombineret med hinanden fra venstre til højre*, indtil de danner en betingelse.\n\n#### For eksempel ` \" linguacode\noutput(5 < 1 և 1 < 7 eller 1 >= 3 eller 9 == 9)\n` dette er det samme som ``linguacode\noutput(falsk և sandt eller falsk eller sand)\n` lad os kombinere **1** * * * * *2** \"**falske og sande**\" betingelser i en․ ``linguacode\noutput(falsk eller falsk eller sand)\n`da **1+2** tilstand med **3** \"**urigtige eller falske**\" ``linguacode\noutput(falsk eller sand)\n` ` , og endelig **1+2+3** tilstand med **4.** \"**falsk eller sand**\"․ ``linguacode\noutput(sand)\n` Og så er vi kombinerer de 4 betingelser i ét. Vi kan kombinere flere forhold på den måde. \n\nNogle gange er vi nødt til at skifte fra venstre til højre kombinere prioritet ved hjælp af parenteser. \n\n#### For eksempel ` \" linguacode\noutput(5 < 1 և (1 < 7 eller (1 >= 3 eller 9 == 9)))\n`` \n\ndette er det samme som ``linguacode\noutput(falsk և (sand eller falsk eller sand)))\n` lad os kombinere **3** * * * * *4.** \"**falsk eller sand**\" betingelser i en ``linguacode\noutput(falsk eller (falsk eller sand))\n` \"efter det **2** tilstand med **3+4** betingelsen vil være \"**falsk eller sand**\" ``linguacode\noutput(falsk և sandt)\n` \"og til sidst lad os kombinere **1** tilstand med **2+(3+4)**. Det vil være \"**falske og sande**\" ``linguacode\noutput(falsk)\n` Og så, så vi, at resultatet er ændret med skiftende kombinere prioritet."
      },
      "syntaxInfo":{
        "modalTitle":"Kommando guide",
        "cheatSheetTitle":"Cheat sheet",
        "lesson":"Tutorial"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b> Hotkeys</b>",
      "undo":"Fortryd",
      "redo":"Redo",
      "selectAll":"Vælg alle",
      "run":"Kører",
      "terminal":"Terminal"
    },
    "program":{
      "program":"Program",
      "sourceCode":"Kildekoden",
      "functionArgumentSyntaxError":"Funktion argument syntaksfejl i ${line} linje.",
      "undefinedVariable":"\"${variable}\" variabel ikke defineret i ${line} linje.",
      "indentError":"Plads fejl i ${line} linje.",
      "hackAttempt":"Hack forsøg. Din \"${ip}\" ip-adresse er gemt i vores database.",
      "syntaxError":"Syntaks fejl",
      "timeout":"Udarbejde timeout. Sørg for, at koden ikke har uendelig løkke.",
      "true":"sandt",
      "false":"falsk",
      "NaN":"ukendt",
      "null":"ukendt",
      "Infinity":"infinity",
      "undefined":"undefined"
    },
    "programListGroup":{
      "programs":"Programmer"
    },
    "terminal":{
      "hotkeys":"<b> Hotkeys</b>",
      "undo":"Fortryd",
      "redo":"Redo",
      "selectAll":"Vælg alle",
      "terminal":"Terminal"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"Log ind"
    },
    "menuButton":{
      "settings":"Indstillinger",
      "logOut":"Log ud"
    }
  },
  "panels":{
    "header":{
      "title":"Hjem"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"Bruger ikke har nogen programmer endnu."
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"Du behøver ikke have nogen programmer endnu.",
      "programNotFoundClickPartFirst":"Klik",
      "programNotFoundClickPartSecond":"her",
      "programNotFoundClickPartThird":"for at oprette et nyt program."
    },
    "loading":{
      "loading":"Ilægning af"
    }
  }
}