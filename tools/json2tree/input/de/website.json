{
  "blocks":{
    "controlPanelBlock":{
      "edit":"Bearbeiten",
      "delete":"Löschen"
    },
    "lovePanelBlock":{
      "like":"gefallen",
      "liked":"Gefällt mir",
      "star":"Favorit hinzufügen",
      "starred":"Markierte"
    },
    "moreFromUserBlock":{
      "viewAll":"Alles anzeigen",
      "moreFromFirst":"Mehr aus",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"Sortieren Nach",
      "recent":"Letzten",
      "views":"Ansichten",
      "stars":"Favoriten",
      "likes":"Gefällt mir",
      "random":"Zufällig"
    },
    "shareBlock":{
      "link":"Verlinken",
      "share":"Mitteilen",
      "tweet":"Tweet",
      "textTwitter":"Programm \"${programTitle}\" von ${userName} auf #LinguaCode ${userPageLink}",
      "descriptionVK":"LinguaCode ist eine social-coding Plattform und ist speziell für Kinder geplant, wo sie Programmierung lernen und ihre Code mit ihren Muttersprache mitteilen können, ohne die Notwendigkeit English zu können."
    },
    "userPrimaryInfoBlock":{
      "editProfile":"Profile bearbeiten"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"Beigetreten"
    }
  },
  "pages":{
    "errorPage":{
      "title":"Fehler",
      "explanation":"Leider ist ein Kritischer Fehler auf dieser Seite aufgetreten. "
    },
    "landingPage":{
      "title":"LinguaCode: Learning by Coding",
      "learningByCoding":"Lernen <span className=\"masthead--lora-italic\"> von Coding</span>",
      "explanation":"Wir machen die Lernen von Programmierung und Codierung so voller Freude und Leben, so wirst du laut lachen.",
      "facebookSignIn":"Über Facebook anmelden",
      "or":"oder",
      "seeTheListOfPrograms":"Siehe die Liste der vorhanden Programme",
      "descriptionHead":"Die beste neue Weise eine Programmiersprache zu lernen.",
      "descriptionBody":"LinguaCode ist eine social-coding Plattform und ist speziell für Kinder geplant, wo sie Programmierung lernen und ihre Code mit ihren Muttersprache mitteilen können, ohne die Notwendigkeit English zu können.",
      "advantagesHeadline":"LinguaCode hilft Ihnen <span className=\"u-emphasized\"> besser </span> zu lernen",
      "advantageTopFirstHeadline":"Vielsprachig",
      "advantageTopFirstDescription":"Schreiben Sie Programme auf Ihre Muttersprache und nicht nur.",
      "advantageTopSecondHeadline":"Es ist kostenlos!",
      "advantageTopSecondDescription":"Alles ist kostenlos.",
      "advantageTopThirdHeadline":"Direkter Start",
      "advantageTopThirdDescription":"Der Anfang ist viel einfacher als Sie denken!",
      "advantageBottomFirstHeadline":"Phantasie",
      "advantageBottomFirstDescription":"Lernen Sie, versuchen Sie, Erstellen Sie!",
      "advantageBottomSecondHeadline":"Bildung",
      "advantageBottomSecondDescription":"Lernen Sie Programmierung, sowie andere Fächer.",
      "advantageBottomThirdHeadline":"Gemeinschaft",
      "advantageBottomThirdDescription":"Teilen Sie ihre Programme mit Freunden mit und finden Sie neue Freunde.",
      "joinText":"Tritt der Community der Lernenden bei",
      "facebookRegister":"Registrieren Sie sich jetzt, es ist KOSTENLOS!"
    },
    "notFoundPage":{
      "title":"Seite nicht gefunden",
      "explanation":"Leider die angeforderte Seite existiert nicht.",
      "descriptionPartFirst":"Versuchen überschrift zu",
      "descriptionPartSecond":"hauptseite",
      "descriptionPartThird":"statt."
    },
    "programChangePage":{
      "titleOfEditPage":"Bearbeiten Sie die ${userName}/${title} Programm",
      "editProgramHeadline":"Bearbeiten Sie das Programm",
      "editProgramButton":"Programm bearbeiten",
      "titleOfCreatePage":"Erstellen Sie ein neues Programm",
      "newProgramHeadline":"Erstellen Sie ein neues Programm",
      "submitProgramButton":"Vorlegen Sie das Programm",
      "programContent":"Ein Programm enthält alle Informationen über Ihren Code.",
      "name":"Name",
      "programNameForm":"Tolles Programm-Namen sind kurz und unvergesslich, wie <b>hello-world</b>.",
      "titleOfProgram":"Titel",
      "description":"Beschreibung",
      "validationError":"Validierungsfehler",
      "errorTextForNameLength":"Die Länge der <b>name</b> sollte mehr als 0 und weniger als 32, es sollte aus lateinischen Symbolen und Strichen bestehen.",
      "errorTextForName":"Dieser Name der Quelle wird bereits von Ihnen verwendet.",
      "errorTextForTitle":"Länge der <b>title</b> sollte mehr als 0 und weniger als 128 sein.",
      "errorTextForDescription":"Länge der <b>description</b> sollte mehr als 0 und weniger als 5120 sein.",
      "errorTextForSource":"Länge der <b>source</b> sollte mehr als 0 und weniger als 10240 sein."
    },
    "programs":{
      "title":"Programme"
    },
    "settingsPage":{
      "title":"Konfiguration",
      "publicProfile":"Öffentliches Profil",
      "validationError":"Validierungsfehler",
      "username":"Benutzername",
      "yourUsername":"Ihr Benutzername",
      "usernameWasAlreadyUsed":"Benutzername wurde schon verwendet",
      "usernameWasReserved":"Benutzername war reserviert",
      "usernameValidation":"Länge der <b>username</b> sollte weniger als 24 sein und aus Kleinbuchstaben des lateinischen und Zahlen bestehen.",
      "name":"Name",
      "yourFirstNameAndLastName":"Dein Vorname und Nachname",
      "nameValidation":"Länge der <b>name</b> sollte mehr als 0 und weniger als 24 sein",
      "bio":"Bie",
      "tellALittleAboutYourself":"Erzählen Sie ein wenig über sich",
      "bioValidation":"Länge der <b>bio</b> sollte weniger als 128 sein.",
      "country":"Land",
      "select":"wählen Sie",
      "countryValidation":"Wählen Sie aus Ländern",
      "updateProfile":"Profil aktualisieren"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"Eintragen",
      "signInDescription":"Der Betrieb ist nur möglich, wenn Sie angemeldet sind."
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"Sind Sie sicher, dass Sie dieses Programm löschen möchten?",
      "answerYes":"ja",
      "answerNo":"nein"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"Ausgabe",
        "outputNameValue":"``linguacode\nAusgang(X)\n``",
        "outputDescription":"Druckt jedem X-Wert: Zahlen, Operationen, T ext und variable Werte. Zum Beispiel",
        "outputDescriptionValue":"``linguacode\nAusgang(4) # 4\noutput(«Howdy») # Howdy\nAusgang(1+2) # 3\n``",
        "inputName":"Eingang",
        "inputNameValue":"``linguacode\ninput(X)\n``",
        "inputDescription":"Jedem X variable Wert mit der Deklaration durch den Benutzer. Zum Beispiel",
        "inputDescriptionValue":"``linguacode\nEingang(a)\n``",
        "ifElseStatementName":"Überprüfung der Anweisung",
        "ifElseStatementNameValue":"``linguacode\nwenn <condition N1> dann\n<operation N1>\nsonst, wenn <condition N2> dann\n<operation N2>\nsonst\n<operation N3>\n``",
        "ifElseStatementDescription":"Operationen werden ausgeführt, nach der angegebenen richtigen Bedingung. Zum Beispiel",
        "ifElseStatementDescriptionValue":"``linguacode\na = 5\nb = 5\nwenn a > b dann\nAusgabe(«a > b»)\nsonst wenn a < b dann\noutput(«a < b»)\nsonst\noutput(«b == a») # b == a\n``",
        "loopForName":"Begrenzt Wiederholung",
        "loopForNameValue":"``linguacode\nwiederholen Sie <N> mal\n<operation>\n``",
        "loopForDescription":"Führt einen code-block vielmals. Zum Beispiel",
        "loopForDescriptionValue":"``linguacode\nwiederholen Sie 10-mal\noutput(«Howdy»)\n``",
        "loopWhileDoName":"Schleife \"While-Do\"",
        "loopWhileDoNameValue":"``linguacode\nwährend <condition> dann\n<operation>\n``",
        "loopWhileDoDescription":"Der \"Während\" - Schleife führt durch einen code-block solange eine angegebene Bedingung richtig ist. Zum Beispiel",
        "loopWhileDoDescriptionValue":"``linguacode\na = 1\nwährend ein < 5 dann\nAusgang(a)\na = a + 1\n``",
        "loopDoWhileName":"Schleife \"Do While\"",
        "loopDoWhileNameValue":"``linguacode\ntun\n<operation>\nwährend <condition>\n``",
        "loopDoWhileDescription":"Schleife \"Do While\" wiederhole die Schleife, solange die Bedingung richtig ist. Zum Beispiel",
        "loopDoWhileDescriptionValue":"``linguacode\na = 1\ntun \nAusgang(a)\na = a + 1\nwährend ein < 5\n``",
        "piName":"mathematische Konstante pi",
        "piNameValue":"``linguacode\nAusgabe(pi)\n``",
        "piDescription":"Druckt mathematische Konstante <b>pi</b>. Zum Beispiel",
        "piDescriptionValue":"``linguacode\nAusgabe(pi) # 3.141592653589793\n``",
        "eNumberName":"mathematische Konstante e",
        "eNumberNameValue":"``linguacode\nAusgabe - (e)\n``",
        "eNumberDescription":"Druckt mathematische Konstante <b>e</b>. Zum Beispiel",
        "eNumberDescriptionValue":"``linguacode\nAusgabe - (e) # 2.718281828459045\n``",
        "sqrName":"Quadrat der Zahl",
        "sqrNameValue":"``linguacode\nsqr(X)\n``",
        "sqrDescription":"Gibt Platz <b>X</b> Zahl eingegeben durch den Benutzer. Zum Beispiel",
        "sqrDescriptionValue":"``linguacode\nX = 5 \nY = sqr(X) \nAusgang(Y) # 25\n``",
        "powName":"Macht der Zahl",
        "powNameValue":"``linguacode\npow(X,Y)\n``",
        "powDescription":"Gibt den Wert des <b>X</b> der Macht der <b>Y</b> zurück. Zum Beispiel",
        "powDescriptionValue":"``linguacode\nX = 2 \nY = 5 \nZ = pow(X, Y) \nAusgang(Z) # 32\n``",
        "sqrtName":"Quadratwurzel der Zahl",
        "sqrtNameValue":"``linguacode\nsqrt(X)\n``",
        "sqrtDescription":"Gibt die Quadratwurzel von <b>X</b> Zahl eingegeben durch den Benutzer. Zum Beispiel",
        "sqrtDescriptionValue":"``linguacode\nX = 5 \nY = sqr(X) \nAusgang(Y) # 25\n``",
        "absName":"Absoluten Wert einer Zahl",
        "absNameValue":"``linguacode\nabs(X)\n``",
        "absDescription":"Gibt den absoluten Wert der <b>X</b>-Reihe, die vom Benutzer eingegeben ist. Für example՝",
        "absDescriptionValue":"``linguacode\nX = 5 \nY = sqr(X) \nAusgang(Y) # 25\n``",
        "roundName":"Anzahl Rundung",
        "roundNameValue":"``linguacode\nrund(X)\n``",
        "roundDescription":"Rundet einen <b>X</b> Zahl auf die nächste Ganzzahl und gibt den Wert zurück. Zum Beispiel",
        "roundDescriptionValue":"``linguacode\nX = 2.3 \na = rund(X) \nAusgang(a) # 2\n``",
        "floorName":"Anzahl Stock",
        "floorNameValue":"``linguacode\nfloor(X)\n``",
        "floorDescription":"Rundet einen <b>X</b> Anzahl <b>downwards</b> auf die nächste Ganzzahl und gibt den Wert zurück. Zum Beispiel",
        "floorDescriptionValue":"``linguacode\nX = 2.3 \na = rund(X) \nAusgang(a) # 2\n``",
        "ceilName":"Anzahl ceil",
        "ceilNameValue":"``linguacode\nceil(X)\n``",
        "ceilDescription":"Rundet einen <b>X</b> Anzahl <b>upwards</b> auf seine nächste Ganzzahl und gibt den Wert zurück",
        "ceilDescriptionValue":"``linguacode\nX = 2.3 \na = rund(X) \nAusgang(a) # 2\n``",
        "sinName":"Sinus",
        "sinNameValue":"``linguacode\nsin(X)\n``",
        "sinDescription":"Gibt den Wert der <b>tangent</b> einer <b>X</b> Anzahl zurück. Zum Beispiel՝",
        "sinDescriptionValue":"``linguacode\nX = sin(pi) \nAusgabe(X) # 0\n``",
        "cosName":"Kosinus",
        "cosNameValue":"``linguacode\ncos(X)\n``",
        "cosDescription":"Gibt den Wert der <b>cosine</b> einer <b>X</b> Anzahl. Zum Beispiel",
        "cosDescriptionValue":"``linguacode\nX = cos(pi) \nAusgabe(X) # -1\n``",
        "tanName":"Tangens",
        "tanNameValue":"``linguacode\ntan(X)\n``",
        "tanDescription":"Gibt den Wert der <b>tangent</b> einer <b>X</b> Anzahl zurück. Zum Beispiel՝",
        "tanDescriptionValue":"``linguacode\nX = tan(pi) \nAusgabe(X) # 0\n``",
        "ctgName":"Cotangens",
        "ctgNameValue":"``linguacode\nctg(X)\n``",
        "ctgDescription":"Gibt den Wert der <b>tangent</b> einer <b>X</b> Anzahl zurück. Zum Beispiel՝",
        "ctgDescriptionValue":"``linguacode\nX = tan(pi) \nAusgabe(X) # 0\n``",
        "arcSinName":"Arcsin",
        "arcSinNameValue":"'''Linguacode arcsin(X) '''",
        "arcSinDescription":"Gibt den Wert zurück, bei denen der Sinus den gleichen Wert wie <b>X</b> bekommt. Zum Beispiel",
        "arcSinDescriptionValue":"``linguacode\na = arcsin(1) \nAusgang(a) # pi/2 \n``",
        "arcCosName":"Arccosine",
        "arcCosNameValue":"``linguacode\narccos(X)\n``",
        "arcCosDescription":"Gibt den Wert zurück, bei denen der Sinus den gleichen Wert wie <b>X</b> bekommt. Zum Beispiel",
        "arcCosDescriptionValue":"``linguacode\na = arccos(1) \nAusgang(a) # 0\n``",
        "arcTanName":"Arkustangens",
        "arcTanNameValue":"``linguacode\narctan(X)\n``",
        "arcTanDescription":"Gibt den Wert zurück, bei denen der Tangent den gleichen Wert wie <b>X</b> bekommt. Zum Beispiel",
        "arcTanDescriptionValue":"``linguacode\na = arctan(0) \nAusgang(a) # 0\n``",
        "arcCtgName":"Arccotangent",
        "arcCtgNameValue":"``linguacode\narcctg(X)\n``",
        "arcCtgDescription":"Gibt den Wert an, bei denen die cotangens den gleichen Wert wie <b>X</b> bekommt. Zum Beispiel",
        "arcCtgDescriptionValue":"``linguacode\na = arcctg(1) \nAusgang(a) # pi/4\n``",
        "logName":"Logarithmus",
        "logNameValue":"``linguacode\nlog(X,Y)\n``",
        "logDescription":"Gibt den Wert des Logarithmus von <b>X</b> auf der Basis <b>Y</b>. Zum Beispiel",
        "logDescriptionValue":"``linguacode\na = log(3,27) \nAusgang(a) # 3\n``",
        "lgName":"Allgemeiner Logarithmus",
        "lgNameValue":"``linguacode\nlg(Y)\n``",
        "lgDescription":"Gibt den Wert des Logarithmus von <b>X</b> auf der Basis <b>10</b>. Zum Beispiel",
        "lgDescriptionValue":"``linguacode\na = lg(100) \nAusgang(a) # 10\n``",
        "lnName":"Natürlicher Logarithmus",
        "lnNameValue":"``linguacode\nln(Y)\n``",
        "lnDescription":"Gibt den Wert des Logarithmus von <b>X</b> auf der Basis <b>e</b>. Zum Beispiel",
        "lnDescriptionValue":"``linguacode\na = ln(e) \nAusgang(a) # 1\n``",
        "randomName":"Zufallszahl generieren",
        "randomNameValue":"``linguacode\nrandom(X,[Y])\n``",
        "randomDescription":"Wenn der Parameter <b>Y</b> gegeben ist, wird das Programm nach dem Zufallsprinzip generieren und zufällige integer-Zahl aus range<b>[X; Y]</b> zurückgeben. Aber ohne <b>Y</b> Parameter wird der Bereich <b>[0; X]</b>. Zum Beispiel",
        "randomDescriptionValueFirst":"``linguacode\nX = 10 \na = random(X) # [0; 10]\nAusgang(a) # 4 \n``",
        "randomDescriptionValueSecond":"``linguacode\nX = 5 \nY = 15 \na = random(X,Y) # [5; 15]\nAusgang(a) # 12\n``"
      },
      "tutorials":{
        "intro":"Einleitung",
        "output":"Ausgabe",
        "variables":"Variablen",
        "input":"Eingang",
        "operations":"Operationen",
        "conditions":"Bedingungen",
        "boolean":"Boolesch",
        "languageAboutLanguageTitle":"Über die Sprache",
        "languageAboutLanguageContent":"LinguaCode ist  für die Menschen, die die Grundlage der Programmierung  auf gemütliche Weise lernen wollen, geschaffen.                               Mit LinguaCode ist es nicht notwendig die Kenntnis von Fremdsprachen oder technischen Fähigkeiten zu haben. Alles was Sie brauchen ist der Wunsch. zu lernen und Fleiß. \n\n#### Charakteristische Eigenschaften:\n- **Multilingual**\n- **Multiplattform**\n- **Einfache Source code**\n- **Kostenlos**\n",
        "languageFeaturesTitle":"Charakteristische Eigenschaften der Sprache",
        "languageFeaturesContent":"Die Grundlage der LinguaCode sind Python, Pascal und JavaScript, um es leicht zu verstehen und dann eine andere Programmierungssprache schneller zu lernen. \n\n** * * Hier sind alle grundlegenden Konzepte der Sprache:**\n\n- **Jeder Befehl beginnt von neuen Zeile.** \nSource code wird einfacher und klarer.\n- **- Befehle geschrieben werden können, sowohl mit groß- als auch mit  Kleinbuchstaben.** \nEs beschleunigt den Prozess der Programmierung, aber es ist bevorzugt, mit Kleinbuchstaben zu schreiben.\n- **Texte können zwischen die beiden Anführungszeichen und Apostrophe geschrieben worden sein.** \nIn vielen Ländern gibt es keine Anführungszeichen, so hier können Sie  die bessere Version für sie aussuchen.\n- **Texte nach dem symbol «\\#» gelten als Befehl und haben keine Einfluss auf die Arbeit Von source-code.** \nKommentare sind für Notizen.",
        "outputCommandDefinitionTitle":"Definition des Befehls",
        "outputCommandDefinitionContent":"Jedes Programm, das einige Operationen macht, soll uns Informationen über Resultat zeigen. Deshalb alle Programmierungssysteme Text-Ausgabe-Möglichkeit haben und auch den Platz, wo wir das Ergebnis sehen können. Es wird **Terminal** genannt.\n\nBefehl «*Ausgang*» wird  für die Ausgabe der Texte verwendet.\n\n#### Zum Beispiel \nSource code``linguacode\nAusgang(«Howdy»)\n``Ergebnis`` - terminal\nHowdy\n``",
        "outputPossibleValuesTitle":"Mögliche Werte",
        "outputPossibleValuesContent":"Die Ausgabe des Befehls kann Texte, Zahlen, mathematische Operationen und Variablen Werten drucken.\n\n#### Zum Beispiel \nSource code \n``linguacode\nAusgang(100)\nAusgang(5 * 25)\n``Ergebnis`` - terminal\n100\n125\n``",
        "variablesDeclaresAndAssignsTitle":"Deklaration und Zuteilung",
        "variablesDeclaresAndAssignsContent":"Oft müssen wir den text speichern, die Anzahl und numerische Operationen irgendwo mit dem Zweck, um es wieder verwenden. Die Container, wo wir sparen können, werden unterschiedliche Werte genannt **Variablen***. Zuerst müssen wir einen Namen für die variable, und weisen Sie einen Wert zu. Nach ihm können wir entnehmen den Wert einfach durch den Aufruf der variable mit seinem Namen. \nVariablen gespeichert werden, die in Random-access memory (RAM) des Computers und, wenn wir die variable benutzen, computer gibt den Wert an die variable name aus dem RAM.\n#### Wichtig, daran zu erinnern\nVariablen-Namen \n**1.** Buchstaben, Symbole oder Ziffern \n**2.** Kann nicht mit einer Zahl beginnen \n**3.** Nicht enthalten Leerzeichen und Symbole für arithmetische Operationen\n#### Zum Beispiel \nFür den Druck Anzahl **617** stattdessen \n``linguacode\nAusgabe(617)\n``\nwir schreiben\n``linguacode\nX = 617\nAusgang(X)\n``\nErgebnis\n``terminal\n617\n`` \nUnd wenn wir wollen, dass die Ausgabe den gleichen Wert drei mal, schreiben wir \n``linguacode\nX = 617\nAusgang(X)\nAusgang(X)\nAusgang(X)\n`` \nErgebnis \n``terminal\n617\n617\n617\n``",
        "variablesPracticalUseTitle":"Praktische Nutzung",
        "variablesPracticalUseContent":"Wie wir sehen, können wir weisen Sie sowohl numerische und text-Werten zu Variablen. Aber oft müssen wir weisen der variable einen Wert, der zugeordnet ist zu einer anderen. In diesem Fall können wir weisen Sie bereits vorhandene variable in das neue.\n#### Zum Beispiel \nSource code\n``linguacode\na = 1\nb = 2\nc = a + b\nAusgang(c)\n`` \nErgebnis\n``terminal\n3\n``\n",
        "variablesMultipleUsesTitle":"Mehrfache Verwendung",
        "variablesMultipleUsesContent":"Sie müssen nicht erstellen Sie eine neue variable einen neuen Wert zu jeder Zeit. Wir können auch ändern Sie die Werte der Variablen zugewiesen. Wir vermeiden unnötige Variablen und Quellcode wird mehr einfach so.\n#### Zum Beispiel\nNehmen wir an, wir haben **100** äpfel und speichern Sie diesen Wert in **apple** variable. Die Anzahl der äpfel wurde eine Verringerung von **5** jeden Tag ist. \nWir müssen die Ausgabe-Anzahl der äpfel für jeden Tag. \n\nSource code\n``linguacode\napple = 100\nAusgabe(apple)\n\napple = apple - 5 # 95\nAusgabe (apple)\n\napple = apple - 5 # 90\nAusgabe(apple)\n\napple = apple - 5 # 85\nAusgabe(apple)\n`` \nErgebnis\n``terminal\n100\n95\n90\n85\n``",
        "inputCommandDefinitionTitle":"Command-definition",
        "inputCommandDefinitionContent":"In der Programmierung müssen wir sowohl die Ausgabe, und in vielen Fällen die Eingabe von Daten. Wir benötigen es, wenn Variablen erhalten können einen beliebigen Wert. Wir können auch Quellcode ändern zu jeder Zeit und zuweisen neuer Werte an die Variablen, aber es ist nicht wirksam, und braucht zu lange. \n\nIn diesem Fall benutzen wir den Befehl \"*Eingabe*\". \n\nUnd hier ist ein einfaches Beispiel-Programm die Ausgänge doppelte Zahl eingegeben durch den Benutzer. ``linguacode\nEingabe(Zahl)\noutput(Zahl * 2)\n`` Nach der Ausführung dieses Programms sehen wir das symbol \"**>**\" was bedeutet das Programm hat begonnen und wir müssen die Eingabe der fehlenden Daten. Nach Eingabe jeder Nummer und drücken **Geben** wir werden sehen Doppel der eingegebenen Zahl. ``terminal\n>617\n1234\n``Meist müssen wir Programme schreiben, die verwendet werden können, von Leuten, die gar nicht wissen, Programmierung.",
        "inputWorkMechanismTitle":"Arbeiten Mechanismus",
        "inputWorkMechanismContent":"Nun lassen Sie uns sehen, wie der Kommando-Eingabe funktioniert. Zum Beispiel haben wir das Programm ``linguacode\noutput(\"Bitte Geben Sie Ihre Zugangsdaten ein:\")\noutput(\"Name:\")\ninput(name)\noutput(\"Nachname:\")\nEingang(Familienname)\nAusgabe(\"Hallo\" + name + \"\" + Nachname)\n`` Wie wir sehen, es sind 6 Zeilen in unserem Programm. \nNach dem ausführen von es, können wir sehen, dass Programm gearbeitet, bis die Linie 3.``terminal\nBitte geben Sie Ihre Zugangsdaten ein:\nName:\n>\n`` Nach der Eingabe der fehlenden Daten, werden wir sehen, dass es nun geklappt bis Zeile 5.``terminal\nBitte geben Sie Ihre Zugangsdaten ein:\nName:\n>Marine\nFamilienname:\n>\n`` Und schließlich nach der Eingabe der letzten Daten Durcheinander-Programm funktioniert und Ende.``terminal\nBitte geben Sie Ihre Zugangsdaten ein:\nName:\n>Marine\nFamilienname:\n>Chamchyan\nHi, Marine Chamchyan\n`` So haben wir gesehen, dass mit diesem Befehl das Programm arbeitet Teil-von Teil erfordert Eingabe von fehlenden Daten.",
        "operationsArithmeticOperatorsTitle":"Arithmetische Operationen",
        "operationsArithmeticOperatorsContent":"In LinguaCode es möglich ist, implementieren einfache arithmetische Operationen wie **+**, **-**, **\\***, **/**. \n\nZum Beispiel dieses Programm wird alles tun, arithmetische Operatoren **1** und **2** zahlen. ``linguacode\nAusgang(1 + 2) # 3\nAusgang(1 - 2) # -1\nAusgang(1 * 2) # 2\nAusgang(1 / 2) # 0.5\n` ` #### Wichtig, daran zu erinnern \nWie wir wissen, in der Mathematik die Multiplikation von Variablen mit anderen Variablen oder Zahl geschrieben werden kann, ohne symbol der Multiplikation. Zum Beispiel *7 mal X* geschrieben **7X** oder *X-mal-Y* **XY**. \nAber in der Programmierung ist es wichtig zu schreiben, symbol der Multiplikation. Zum Beispiel **7 \\* X** oder **X \\* Y**.",
        "operationsExecutingPriorityTitle":"Operationen ausführen Priorität",
        "operationsExecutingPriorityContent":"Sowohl in der Mathematik und in der Programmierung, wenn es eine division oder Multiplikation, die wir Erstens tun Sie nur, nachdem wir die addition und die Subtraktion. \n\n#### Zum Beispiel ``linguacode\nX = 10 + 2 * 4 - 2\n# X = 10 + 8 - 2\n# X = 18 - 2\n# X = 16\n`` Aber wir können ändern, die Ausführung Priorität durch die Verwendung von Klammern. \n#### Zum Beispiel ``linguacode\nX = (10 + 2) * (4 - 2)\n# X = 12 * (4 - 2)\n# X = 12 * 2\n# X = 24\n``In der Programmierung können wir Klammern verwenden, auch wenn Sie unnötig sind. \nEs wird nicht falsch sein, aber es ist bevorzugt, zu schreiben, einfach und klar-source-code, die einfach zu verstehen für andere.",
        "operationsNumbersTitle":"Zahlen",
        "operationsNumbersContent":"Wie wir wissen <a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">numbers</a> sind mathematische Objekte, mit denen Sie zählen, Messen und beschriften. \nEs gibt 5 Arten von zahlen. Wir behandeln alle von Ihnen, außer für komplexe numbes \n- ** Natürliche zahlen** **1**, **2**, ...``linguacode\nAusgabe(7 + 4) # 13\n`` \n- **ganze zahlen** ..., **-1**, **0**, **1**, ...``linguacode\nAusgang(-6 * 5 + -3) # -33\n`` \n- **rationale zahlen** **1/2**, **2/3**, **0.125**, ...``linguacode\nAusgang(0.617 * 2 * 1000) # 1234\n`` \n- **reelle zahlen** **√2**, **1.62**, ...``linguacode\nAusgabe(2/3 + 1/2) # 1\n``",
        "operationsSumOfStringAndNumberTitle":"Summe von strings und zahlen",
        "operationsSumOfStringAndNumberContent":"Wie wir sehen, ist es möglich, fügen Sie beide zahlen und Texte zu einander, in deren Ergebnis die Linien sind kombiniert in einer Zeile. Aber oft müssen wir eine Zeile, in der es verwendet werden, numerischen Wert. In diesem Fall ist es möglich, text hinzuzufügen, der Zahl, in deren Ergebnis die Zahl verändert werden und in Verbindung mit dem text als text.``linguacode\ntext = «es sind » + 365 + « Tage im Jahr»\n# text = «es gibt » + «365» + « Tage im Jahr»\n# text = «es gibt 365» + « Tage im Jahr»\n# text = «es gibt 365 Tage im Jahr»\n` ` #### Wichtig, daran zu erinnern \nMit Linien können wir nur hinzufügen-Betrieb. Während Sie andere Vorgänge-Ergebnis-Fehler.",
        "conditionsCommandsIfTitle":"Befehl \"Wenn\"",
        "conditionsCommandsIfContent":"Manchmal in der Programmierung, die wir brauchen, um ausführen einiger Operationen basierend auf der Bedingung. Für es gibt es Bedingung, überprüfen Sie Befehle wie \"If\", \"If-else\" und \"Else-If\". \n\nDie Schriftform der Befehl «**Wenn**» ``linguacode\nwenn <condition> dann\n<operation>\n`` Hier die Befehle zwischen «If» und «dann» dort ist jede Bedingung, die, nachdem Sie von der neuen Linie und nach **4 Leerzeichen** geschrieben-operation (oder von Operationen), die durchgeführt werden, wenn die Aussage wahr ist. \n\n#### Zum Beispiel ``linguacode\na = 5\nb = 2\nwenn a > b dann\nAusgabe(«a > b»)\n``",
        "conditionsCommandsIfElseTitle":"Befehl \"If-Else\"",
        "conditionsCommandsIfElseContent":"So wissen wir, wie die Verwendung von bedingten Anweisung in Programmen. Jetzt diskutieren wir den Fall, wenn die Bedingung false ist.\n\nSchreiben in form von «**If-Else**» Anweisung ``linguacode\nwenn <condition> dann\n<operation N1>\nsonst\n<operation N2>\n`` Hier wird nach dem Befehl \"Wenn\" gibt es einen neuen Befehl \"Else\". Und von der neuen Linie, nach 4 Leerzeichen geschrieben ist, die operation, die durchgeführt wird, wenn die erwähnte Bedingung false ist.\n\n#### Zum Beispiel ``linguacode\na = 5\nb = 10\nwenn a > b\nAusgabe(«a > b»)\nsonst\noutput(«b < a»)\n``",
        "conditionsCommandsElseIfTitle":"Befehl \"Else-If\"",
        "conditionsCommandsElseIfContent":"Wir haben bereits diskutiert, welcher Befehl ausgeführt werden soll, basiert auf Bedingung ist true oder false. Aber manchmal müssen wir prüfen, mehr als einen Zustand in der gleichen Zeit. \n\nSchreiben in form von \"**If-Else-If - **\" Anweisung``linguacode\nwenn <condition N1> dann\n<operation N1>\nsonst, wenn <condition N2> dann\n<operation N2>\nsonst\n<operation N3>\n` Hier müssen wir überprüfen, ob mehr als eine Bedingung. Im Fall von \"Sonst-Wenn\" die Schriftform kann es 1 oder mehrere \"Else-If\" - Anweisungen Befehle zwischen \"If\" und \"Else\". \n\n#### Zum Beispiel ``linguacode\na = 5\nb = 5\nwenn a > b dann\nAusgabe(«a > b»)\nsonst wenn a < b dann\noutput(«a < b»)\nsonst\noutput(«b == a»)\n``",
        "booleanTypesBooleanTitle":"Beschreibung",
        "booleanTypesBooleanContent":"Wir wissen bereits, wie check-Anweisungen und einige von Ihnen werden kann *wahr* (22 > 18) oder *falsch* (16 > 18). Manchmal wegen der Länge den Zustand prüfen Zeile, wird es schwierig, den Quellcode zu Lesen. Hier kommt zu Hilfe der booleschen Werte \n\n- **true** ``linguacode\nZustand = true\noutput(Zustand) #true\n`` \n\n- **falsch**``linguacode\nBedingung = false\noutput(Zustand) #false\n`` Jeden booleschen Vergleich uns bekannten zurückgibt, die einem der angegebenen Werte \n\nBeispiele von *echten* Vergleich ``linguacode\nZustand = 1 < 5\noutput(Zustand) # true\n`` Exemple des *falschen* - Vergleich ``linguacode\nZustand = 10 < 5\noutput(Zustand) # false\n`` Also in der Bedingung überprüfung der Befehle, die wir verwenden können Variablen mit booleschen Werten. \n\n#### Zum Beispiel ``linguacode\nAusgabe(«eine Zahl Schreiben \"a\":»)\nEingang(a)\n\noutput(«Schreiben Sie eine Zahl \"b\":»)\nEingang(b)\n\nbedingung1 = a > b\nbedingung2 = a < b\n\nwenn bedingung1 dann\nErgebnis = «a > b»\nsonst falls bedingung2 dann\nErgebnis = «a < b»\nsonst\nErgebnis = «a == b»։\noutput(«Ergebnis: » + Ergebnis)\n``",
        "booleanOperatorsComparisonTitle":"Vergleichsoperatoren",
        "booleanOperatorsComparisonContent":"In der Bedingung prüfen Befehle, die wir bereits verwendet haben Symbole für \"größer als\" > und \"kleiner als\" < Vergleichsoperatoren. Aber jetzt können wir hier verwenden, alle anderen Betreiber ist uns bekannt. \n\n- **>** vergleicht die numerischen Werte, in denen der erste ist *#größer* als der zweite. Zum Beispiel ``linguacode\nAusgang(5 > 1) # true\nAusgang(1 > 5) # false\n`` \n\n- **>=** vergleicht die numerischen Werte, die die erste ist,*#, größer oder gleich*, die zweite. Zum Beispiel ``linguacode\nAusgang(5 >= 5) # true\nAusgang(1 >= 5) # false\n`` \n\n- **<** vergleicht die numerischen Werte, in denen der erste ist *#weniger* als der zweite. Zum Beispiel ``linguacode\nAusgang(1 < 5) # true\nAusgang(5 < 1) # false\n`` \n\n- **<=** vergleicht die numerischen Werte, in denen der erste ist *#kleiner oder gleich* des zweiten. Zum Beispiel ``linguacode\nAusgang(1 <= 5) # true\nAusgang(5 <= 1) # false\n`` \n\n- **==** vergleicht numerische oder text-Werte, in denen der erste ist *#gleich* der zweite. Zum Beispiel ``linguacode\nAusgang(5 == 5) # true\nAusgang(5 == 1) # false\noutput(«Soldat» == «Soldat») # true\nAusgabe(«Hallo» == «Helo») # false\n`` \n\n- **!=** vergleicht numerische oder text-Werte, in denen der erste ist *#nicht gleich* die zweite. Zum Beispiel ``linguacode\nAusgang(5 != 1) # true\nAusgang(5 != 5) # false\nAusgabe(«Hallo» != «Helo») # true\noutput(«Soldat» != «Soldat») # false\n`` \n\n- **()** gibt Umgekehrt Ergebnis einer numerischen oder text-Vergleich. Zum Beispiel ``linguacode\noutput(not(1 > 5)) # true\nAusgang(nicht(5 == 5)) # false\nAusgang(nicht(false)) # true\noutput(not(true)) # false\n``",
        "booleanOperatorsLogicalTitle":"Boolesche Operatoren",
        "booleanOperatorsLogicalContent":"So wissen wir, wie wir schreiben, bedingte Anweisung, aber oft müssen wir kombinieren eine Reihe von Bedingungen, und basierend auf es ausführen einiger Operationen. Die Kombination der Bedingungen erfolgt, die durch Boolesche Operatoren. \n\n- Befehl «**und**» verbindet zwei Zustände in einem, der aufgerufen wird **true** wenn beide Bedingungen erfüllt sind *wahr* und **falsch** wenn mindestens eine der Bedingungen ist *falsch*. Zum Beispiel ``linguacode\nAusgang(5 > 1 և 10 < 100) # true\nAusgang(20 < 100 և 1 > 5) # false\n`` \n\n- Befehl «**oder**» verbindet zwei Zustände in einem, der aufgerufen wird **true** wenn mindestens eine der Bedingungen ist *wahr* und **falsch**, wenn die zwei Bedingungen sind *falsch*. Zum Beispiel ``linguacode\nAusgang(5 > 1 oder 100 < 10) # true\nAusgang(20 > 100 oder 1 > 5) # false\n``",
        "booleanOperatorsExecutingPriorityTitle":"Ausführung Priorität",
        "booleanOperatorsExecutingPriorityContent":"Wir haben gelernt, zu kombinieren 2 Bedingungen, aber Sie kann mehr sein als 2, basierend auf der Programm-Inhalte. In diesem Fall werden die Bedingungen miteinander kombiniert: *Links nach rechts*, bis Sie die form einer Bedingung.\n\n#### Zum Beispiel ``linguacode\nAusgang(5 < 1 և 1 < 7 oder 1 >= 3 oder 9 == 9)\n`` das ist das gleiche wie ``linguacode\noutput(false և true oder false oder true)\n`` let ' s kombinieren **1.** und **2.** \"**falsch und wahr**\" Bedingungen in einer․ ``linguacode\noutput(false oder false oder true)\n``dann **1+2** Zustand mit **3.** \"**falsche oder falsch**\" ``linguacode\noutput(false oder true)\n`` und schließlich **1+2+3** Zustand mit **4.** \"**wahr oder falsch**\"․ ``linguacode\noutput(true)\n`` Und wir kombinieren also 4 Bedingungen. Wir kombinieren können weitere Bedingungen, die Art und Weise. \n\nManchmal müssen wir ändern, von Links nach rechts zu kombinieren Priorität durch die Verwendung von Klammern. \n\n#### Zum Beispiel ``linguacode\nAusgang(5 < 1 և (1 < 7 oder (1 >= 3 oder 9 == 9)))\n`` \n\ndies ist das gleiche wie ``linguacode\noutput(false և (true or (false oder true)))\n`` let ' s kombinieren **3.** und **4.** \"**wahr oder falsch**\" - Bedingungen in einem ``linguacode\noutput(false or (false oder true))\n`` nachdem es **2.** Zustand mit **3+4** Zustand \"**wahr oder falsch**\" ``linguacode\noutput(false և true)\n`` und schließlich wollen wir vereinen **1** Zustand mit **2+(3+4)**. Es wird \"**true, false und**\" ``linguacode\noutput(false)\n`` Und so sahen wir, dass das Ergebnis verändert sich mit dem Wechsel zu kombinieren Priorität."
      },
      "syntaxInfo":{
        "modalTitle":"Command guide",
        "cheatSheetTitle":"Cheat sheet",
        "lesson":"Tutorial"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b> Hotkeys</b>",
      "undo":"Rückgängig machen",
      "redo":"Wiederholen",
      "selectAll":"Wählen Sie alle",
      "run":"Laufen",
      "terminal":"Terminal"
    },
    "program":{
      "program":"Programm",
      "sourceCode":"Source code",
      "functionArgumentSyntaxError":"Die Funktion-argument-syntax-Fehler in ${line} Linie.",
      "undefinedVariable":"Die \"${variable}\" variable nicht definiert in ${line} Linie.",
      "indentError":"Leerzeichen Fehler im ${line} Linie.",
      "hackAttempt":"Hack-Versuch. Ihre \"${ip}\" ip-Adresse wurde gespeichert in unserer Datenbank.",
      "syntaxError":"Syntax-Fehler",
      "timeout":"Kompilieren timeout. Stellen Sie sicher, dass die Codes nicht unendlich-Schleife.",
      "true":"true",
      "false":"false",
      "NaN":"unbekannt",
      "null":"unbekannt",
      "Infinity":"infinity",
      "undefined":"undefined"
    },
    "programListGroup":{
      "programs":"Programme"
    },
    "terminal":{
      "hotkeys":"<b> Hotkeys</b>",
      "undo":"Rückgängig machen",
      "redo":"Wiederholen",
      "selectAll":"Wählen Sie alle",
      "terminal":"Terminal"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"Anmelden"
    },
    "menuButton":{
      "settings":"Einstellungen",
      "logOut":"Melden Sie sich"
    }
  },
  "panels":{
    "header":{
      "title":"Home"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"Benutzer nicht alle Programme noch."
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"Sie haben noch keine Programme noch.",
      "programNotFoundClickPartFirst":"Klicken Sie auf",
      "programNotFoundClickPartSecond":"hier",
      "programNotFoundClickPartThird":"erstellen Sie ein neues Programm."
    },
    "loading":{
      "loading":"Laden"
    }
  }
}