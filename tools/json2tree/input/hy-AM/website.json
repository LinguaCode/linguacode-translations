{
  "blocks":{
    "controlPanelBlock":{
      "edit":"Խմբագրել",
      "delete":"Ջնջել"
    },
    "lovePanelBlock":{
      "like":"Հավանել",
      "liked":"Հավանված",
      "star":"Պահպանել",
      "starred":"Պահպանված"
    },
    "moreFromUserBlock":{
      "viewAll":"Տեսնել բոլորը",
      "moreFromFirst":"Ավելին",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"Դասավորել ըստ",
      "recent":"Վերջինների",
      "views":"Դիտումների",
      "stars":"Պահպանվածների",
      "likes":"Հավանվածների",
      "random":"Պատահականության"
    },
    "shareBlock":{
      "link":"Հղում",
      "share":"Կիսվել",
      "tweet":"Թվիթ",
      "textTwitter":"${userName}-ի «${programTitle}» ծրագիրը #LinguaCode-ում",
      "descriptionVK":"LinguaCode-ը սոցիալ ծրագրագրավորման հարթակ է` հատուկ ստեղծված երեխաների համար, որտեղ նրանք կարող են սովորել ծրագրավորում, կիսվել իրենց կոդերով` հենց իրենց մայրենի լեզվով` առանց անգլերենին տիրապետելու անհրաժեշտության:"
    },
    "userPrimaryInfoBlock":{
      "editProfile":"Խմբագրել"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"Միացել է"
    }
  },
  "pages":{
    "errorPage":{
      "title":"Սխալ",
      "explanation":"Ներողություն ենք հայցում, տեղի է ունեցել ներքին համակարգային սխալ։"
    },
    "landingPage":{
      "title":"LinguaCode` Սովորենք ծրագրավորելով",
      "learningByCoding":"Սովորենք <span className=\"masthead--lora-italic\">ծրագրավորելով</span>",
      "explanation":"Մենք օգնում ենք սովորել ծրագրավորել եւ կոդավորել՝ դարձնելով այդ պրոցեսը հաճելի եւ օգտակար:",
      "facebookSignIn":"Մուտք Ֆեյսբուքով",
      "or":"կամ",
      "seeTheListOfPrograms":"Տեսնել առկա ծրագրերը",
      "descriptionHead":"Ծրագրավորում սովորելու նոր եւ լավագույն ճանապարհը",
      "descriptionBody":"LinguaCode-ը սոցիալ ծրագրագրավորման հարթակ է` հատուկ ստեղծված երեխաների համար, որտեղ նրանք կարող են սովորել ծրագրավորում, կիսվել իրենց կոդերով` հենց իրենց մայրենի լեզվով` առանց անգլերենին տիրապետելու անհրաժեշտության:",
      "advantagesHeadline":"LinguaCode-ն օգնում է <span className=\"u-emphasized\">սովորել առավել արդյունավետ</span>",
      "advantageTopFirstHeadline":"Բազմալեզու",
      "advantageTopFirstDescription":"Գրեք ծրագրեր ցանկացած լեզուներով:",
      "advantageTopSecondHeadline":"Անվճար",
      "advantageTopSecondDescription":"Բոլոր նյութերն անվճար են:",
      "advantageTopThirdHeadline":"Արագ սկիզբ",
      "advantageTopThirdDescription":"Սկսելն ավելի հեշտ է, քան Դուք մտածում եք:",
      "advantageBottomFirstHeadline":"Երևակայություն",
      "advantageBottomFirstDescription":"Սովորեք, փորձեք, ստեղծեք:",
      "advantageBottomSecondHeadline":"Կրթություն",
      "advantageBottomSecondDescription":"Սովորեք ծրագրավորումը նույն մակարդակով, ինչպես ցանկացած այլ առարկա:",
      "advantageBottomThirdHeadline":"Համայնք",
      "advantageBottomThirdDescription":"Կիսվեք ծրագրերով եւ ձեռք բերեք նոր ընկերներ:",
      "joinText":"Միացիր սովորողների <span className=\"u-emphasized\">համայնքին</span>",
      "facebookRegister":"Գրանցվեք հիմա, այն ԱՆՎՃԱՐ է"
    },
    "notFoundPage":{
      "title":"Էջը չի գտնվել",
      "explanation":"Կներեք, սակայն էջը, որը ցանկանում էիք այցելել, գոյություն չունի:",
      "descriptionPartFirst":"Փոխարենը փորձեք վերադառնալ",
      "descriptionPartSecond":"գլխավոր էջ:",
      "descriptionPartThird":"փոխարենը։"
    },
    "programChangePage":{
      "titleOfEditPage":"Խմբագրել ${userName}/${title} ծրագիրը",
      "editProgramHeadline":"Խմբագրել ծրագիրը",
      "editProgramButton":"Խմբագրել",
      "titleOfCreatePage":"Ստեղծել նոր ծրագիր",
      "newProgramHeadline":"Ստեղծել նոր ծրագիր",
      "submitProgramButton":"Հաստատել",
      "programContent":"Ծրագիրը պարունակում է ամբողջ տեղեկությունը Ձեր կոդի մասին:",
      "name":"Անուն",
      "programNameForm":"Ծրագրերի լավագույն անունները կարճ են եւ հիշվող, ինչպես օրինակ` <b>hello-world</b>:",
      "titleOfProgram":"Վերնագիր",
      "description":"Նկարագրություն",
      "validationError":"Վավերացման սխալ",
      "errorTextForNameLength":"<b>Անունի</b> երկարությունը պետք է լինի ավելի երկար, քան 0-ն եւ չգերազանցի 32-ը, այն պետք է կազմված լինի լատինական սիմվոլներից եւ գծերից:",
      "errorTextForName":"Այս անունն արդեն օգտագործվել է Ձեր կողմից:",
      "errorTextForTitle":"<b>Վերնագրի</b> երկարությունը պետք է լինի ավելի երկար, քան 0-ն եւ չգերազանցի 128-ը:",
      "errorTextForDescription":"<b>Նկարագրության</b> երկարությունը պետք է լինի ավելի երկար, քան 0-ն եւ չգերազանցի 5120-ը:",
      "errorTextForSource":"<b>Կոդի</b> երկարությունը պետք է լինի ավելի երկար, քան 0-ն եւ չգերազանցի 10240-ը:"
    },
    "programs":{
      "title":"Ծրագրեր"
    },
    "settingsPage":{
      "title":"Կարգավորումներ",
      "publicProfile":"Անձնական էջ",
      "validationError":"Վավերացման սխալ",
      "username":"Գաղտնանուն",
      "yourUsername":"Ձեր գաղտնանունը",
      "usernameWasAlreadyUsed":"Գաղտնանունն արդեն զբաղված է",
      "usernameWasReserved":"Գաղտնանունը ռեզերվացված է",
      "usernameValidation":"<b>Գաղտնանվան</b> երկարությունը պետք է չգերազանցի 24-ը, կազմված լինի լատինական փոքրատառերից եւ թվերից:",
      "name":"Անուն",
      "yourFirstNameAndLastName":"Ձեր անունը եւ ազգանունը",
      "nameValidation":"<b>Անունի</b> երկարությունը պետք է լինի ավելի երկար, քան 0-ն եւ չգերազանցի 24-ը:",
      "bio":"Կենսագրություն",
      "tellALittleAboutYourself":"Մի փոքր պատմեք Ձեր մասին",
      "bioValidation":"<b>Կենսագրության</b> երկարությունը պետք է չգերազանցի 128-ը:",
      "country":"Երկիր",
      "select":"Ընտրել",
      "countryValidation":"Ընտրեք Ձեր երկիրը",
      "updateProfile":"Թարմացնել"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"Մուտք",
      "signInDescription":"Գործողությունը հնարավոր է կատարել միայն համակարգ մուտք գործելուց հետո։"
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"Վստա՞հ եք, որ ցանկանում եք ջնջել ծրագիրը",
      "answerYes":"Այո",
      "answerNo":"Ոչ"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"Արտածում",
        "outputNameValue":"```linguacode\nտպել(X)\n```",
        "outputDescription":"Արտածում է ցանկացած X արժեք՝ թվեր, գործողություններ, տեքստ, փոփոխականների արժեքներ: Օրինակ՝",
        "outputDescriptionValue":"```linguacode\nտպել(4)                        # 4\nտպել(«ողջույն»)                # ողջույն\nտպել(1+2)                      # 3\n```",
        "inputName":"Մուտք",
        "inputNameValue":"```linguacode\nգրել(X)\n```",
        "inputDescription":"Օգտատիրոջ կողմից կամայական X փոփոխական արժեքի սահմանում։ Օրինակ՝",
        "inputDescriptionValue":"```linguacode\nգրել(a)\n```",
        "ifElseStatementName":"Պայմանի ստուգում",
        "ifElseStatementNameValue":"```linguacode\nեթե <պայման N1> ապա\n    <գործողություն N1>\nայլապես եթե <պայման N2> ապա\n    <գործողություն N2>\nայլապես\n    <գործողություն N3>\n```",
        "ifElseStatementDescription":"Պայմանից կամ պայմաններից կախված գործողությունների կատարում։ Օրինակ՝",
        "ifElseStatementDescriptionValue":"```linguacode\na = 5\nb = 5\nեթե a > b ապա\n    տպել(«a > b»)\nայլապես եթե a < b ապա\n    տպել(«a < b»)\nայլապես\n    տպել(«b == a»)             # b == a\n```",
        "loopForName":"Սահմանափակ քանակի կրկնողություն",
        "loopForNameValue":"```linguacode\nկրկնել <N> անգամ\n    <գործողություն>\n```",
        "loopForDescription":"Գործողությունը կրկնվում է նշված N անգամ։ Օրինակ՝",
        "loopForDescriptionValue":"```linguacode\nկրկնել 10 անգամ\n    տպել(«ողջույն»)\n```",
        "loopWhileDoName":"Նախապայմանային կրկնողություն",
        "loopWhileDoNameValue":"```linguacode\nմինչ <պայման> ապա\n    <գործողություն>\n```",
        "loopWhileDoDescription":"Քանի դեռ նշված պայմանը ճիշտ է գործողությունը կկրկնվի։ Օրինակ՝",
        "loopWhileDoDescriptionValue":"```linguacode\na = 1\nմինչ a < 5 ապա\n    տպել(a)\n    a = a + 1\n```",
        "loopDoWhileName":"Հետպայմանային կրկնողություն",
        "loopDoWhileNameValue":"```linguacode\nկատարել\n    <գործողություն>\nմինչ <պայման>\n```",
        "loopDoWhileDescription":"Գործողությունը կրկվում է այնքան ժամանակ մինչեւ որ նշված պայմանը սխալ չլինի։ Օրինակ՝",
        "loopDoWhileDescriptionValue":"```linguacode\na = 1\nկատարել \n    տպել(a)\n    a = a + 1\nմինչ a < 5\n```",
        "piName":"pi մաթեմատիկական հաստատուն",
        "piNameValue":"```linguacode\nտպել(pi)\n```",
        "piDescription":"Արտածում է <b>pi</b> մաթեմատիկական հաստատուն թիվը: Օրինակ՝",
        "piDescriptionValue":"```linguacode\nտպել(pi)                       # 3.141592653589793\n```",
        "eNumberName":"e մաթեմատիկական հաստատուն",
        "eNumberNameValue":"```linguacode\nտպել(e)\n```",
        "eNumberDescription":"Արտածում է <b>e</b> մաթեմատիկական հաստատուն թիվը: Օրինակ՝",
        "eNumberDescriptionValue":"```linguacode\nտպել(e)                        # 2.718281828459045\n```",
        "sqrName":"Թվի քառակուսի",
        "sqrNameValue":"```linguacode\nքառակուսի(X)\n```",
        "sqrDescription":"Վերադարձնում է օգտատիրոջ կողմից ներմուծված <b>X</b> թվի քառակուսին: Օրինակ՝",
        "sqrDescriptionValue":"```linguacode\nX = 5 \nY = քառակուսի(X) \nտպել(Y)                        # 25\n```",
        "powName":"Թվի աստիճան",
        "powNameValue":"```linguacode\nաստիճան(X,Y)\n```",
        "powDescription":"Վերադարձնում է օգտատիրոջ կողմից ներմուծված <b>X</b> թվի <b>Y</b> աստիճանը: Օրինակ՝",
        "powDescriptionValue":"```linguacode\nX = 2 \nY = 5 \nZ = աստիճան(X, Y) \nտպել(Z)                        # 32\n```",
        "sqrtName":"Թվի արմատ",
        "sqrtNameValue":"```linguacode\nարմատ(X)\n```",
        "sqrtDescription":"Վերադարձնում է օգտատիրոջ կողմից ներմուծված <b>X</b> թվի արմատը: Օրինակ՝",
        "sqrtDescriptionValue":"```linguacode\nX = 9 \nY = արմատ(X) \nտպել(Y)                        # 3\n```",
        "absName":"Թվի մոդուլ",
        "absNameValue":"```linguacode\nմոդուլ(X)\n```",
        "absDescription":"Վերադարձնում է օգտատիրոջ կողմից ներմուծված <b>X</b> թվի մոդուլը: Օրինակ՝",
        "absDescriptionValue":"```linguacode\nX = -5 \nY = մոդուլ(X) \nտպել(Y)                        # 5\n```",
        "roundName":"Թվի կլորացում",
        "roundNameValue":"```linguacode\nկլորացում(X)\n```",
        "roundDescription":"Վերադարձնում է տրված <b>X</b> թվին ամենամոտ ամբողջ թվի արժեքը: Օրինակ՝",
        "roundDescriptionValue":"```linguacode\nX = 2.3 \na = կլորացում(X) \nտպել(a)                        # 2\n```",
        "floorName":"Թվի ամբողջացում՝ ներքեւ",
        "floorNameValue":"```linguacode\nամբողջացում_ներքեւ(X)\n```",
        "floorDescription":"Վերադարձնում է տրված <b>X</b> թվից փոքր՝ ամենամոտ ամբողջ թվի արժեքը: Օրինակ՝",
        "floorDescriptionValue":"```linguacode\nX = 2.6 \na = ամբողջացում_ներքեւ(X) \nտպել(a)                        # 2\n```",
        "ceilName":"Թվի ամբողջացում՝ վերեւ",
        "ceilNameValue":"```linguacode\nամբողջացում_վերեւ(X)\n```",
        "ceilDescription":"Վերադարձնում է տրված <b>X</b> թվից մեծ՝ ամենամոտ ամբողջ թվի արժեքը: Օրինակ՝",
        "ceilDescriptionValue":"```linguacode\nX = 2.2 \na = ամբողջացում_վերեւ(X) \nտպել(a)                        # 3\n```",
        "sinName":"Սինուս",
        "sinNameValue":"```linguacode\nsin(X)\n```",
        "sinDescription":"Վերադարձնում է <b>սինուսի</b> արժեքը օգտատիրոջ կողմից ներմուծված <b>X</b> կետում: Օրինակ՝",
        "sinDescriptionValue":"```linguacode\nX = sin(pi) \nտպել(X)                        # 0\n```",
        "cosName":"Կոսինուս",
        "cosNameValue":"```linguacode\ncos(X)\n```",
        "cosDescription":"Վերադարձնում է <b>կոսինուսի</b> արժեքը օգտատիրոջ կողմից ներմուծված <b>X</b> կետում: Օրինակ՝",
        "cosDescriptionValue":"```linguacode\nX = cos(pi) \nտպել(X)                        # -1\n```",
        "tanName":"Տանգենս",
        "tanNameValue":"```linguacode\ntan(X)\n```",
        "tanDescription":"Վերադարձնում է <b>տանգենսի</b> արժեքը օգտատիրոջ կողմից ներմուծված <b>X</b> կետում: Օրինակ՝",
        "tanDescriptionValue":"```linguacode\nX = tan(pi) \nտպել(X)                        # 0\n```",
        "ctgName":"Կոտանգենս",
        "ctgNameValue":"```linguacode\nctg(X)\n```",
        "ctgDescription":"Վերադարձնում է <b>կոտանգենսի</b> արժեքը օգտատիրոջ կողմից ներմուծված <b>X</b> կետում: Օրինակ՝",
        "ctgDescriptionValue":"```linguacode\nX = ctg(pi/4) \nտպել(X)                        # 1\n```",
        "arcSinName":"Արկսինուս",
        "arcSinNameValue":"```linguacode\narcsin(X)\n```",
        "arcSinDescription":"Վերադարձնում է այն արժեքը, որում <b>սինուսն</b> ընդունում է <b>X</b> արժեք: Օրինակ՝",
        "arcSinDescriptionValue":"```linguacode\na = arcsin(1) \nտպել(a)                        # pi/2 \n```",
        "arcCosName":"Արկկոսինուս",
        "arcCosNameValue":"```linguacode\narccos(X)\n```",
        "arcCosDescription":"Վերադարձնում է այն արժեքը, որում <b>կոսինուսն</b> ընդունում է <b>X</b> արժեք: Օրինակ՝",
        "arcCosDescriptionValue":"```linguacode\na = arccos(1) \nտպել(a)                        # 0\n```",
        "arcTanName":"Արկտանգենս",
        "arcTanNameValue":"```linguacode\narctan(X)\n```",
        "arcTanDescription":"Վերադարձնում է այն արժեքը, որում <b>տանգենսն</b> ընդունում է <b>X</b> արժեք: Օրինակ՝",
        "arcTanDescriptionValue":"```linguacode\na = arctan(0) \nտպել(a)                        # 0\n```",
        "arcCtgName":"Արկկոտանգենս",
        "arcCtgNameValue":"```linguacode\narcctg(X)\n```",
        "arcCtgDescription":"Վերադարձնում է այն արժեքը, որում <b>կոտանգենսն</b> ընդունում է <b>X</b> արժեք: Օրինակ՝",
        "arcCtgDescriptionValue":"```linguacode\na = arcctg(1) \nտպել(a)                        # pi/4\n```",
        "logName":"Լոգարիթմ",
        "logNameValue":"```linguacode\nlog(X,Y)\n```",
        "logDescription":"Վերադարձնում է լոգարիթմ <b>X</b> հիմքով <b>Y</b>-ի արժեքը: Օրինակ՝",
        "logDescriptionValue":"```linguacode\na = log(3,27) \nտպել(a)                        # 3\n```",
        "lgName":"Լոգարիթմ՝ 10 հիմքով",
        "lgNameValue":"```linguacode\nlg(Y)\n```",
        "lgDescription":"Վերադարձնում է լոգարիթմ <b>10</b> հիմքով <b>Y</b>-ի արժեքը: Օրինակ՝",
        "lgDescriptionValue":"```linguacode\na = lg(100) \nտպել(a)                        # 10\n```",
        "lnName":"Լոգարիթմ՝ e հիմքով",
        "lnNameValue":"```linguacode\nln(Y)\n```",
        "lnDescription":"Վերադարձնում է լոգարիթմ <b>e</b> հիմքով <b>Y</b>-ի արժեքը: Օրինակ՝",
        "lnDescriptionValue":"```linguacode\na = ln(e) \nտպել(a)                        # 1\n```",
        "randomName":"Պատահական թվերի գեներացում",
        "randomNameValue":"```linguacode\nպատահականություն(X,[Y])\n```",
        "randomDescription":"Եթե <b>Y</b> արժեքը նշված է, ապա պատահականության սկզբունքով գեներացվում եւ վերադարձվում է <b>[X; Y]</b> միջակայքին պատկանող ցանկացած ամբողջ թիվ։ Եթե <b>Y</b> արժեքը նշված չէ, ապա միջակայքը կլինի <b>[0; X]</b>: Օրինակ՝",
        "randomDescriptionValueFirst":"```linguacode\nX = 10 \na = պատահականություն(X)        # [0; 10]\nտպել(a)                        # 4 \n```",
        "randomDescriptionValueSecond":"```linguacode\nX = 5 \nY = 15 \na = պատահականություն(X,Y)      # [5; 15]\nտպել(a)                        # 12\n```"
      },
      "tutorials":{
        "intro":"Նախաբան",
        "output":"Արտածում",
        "variables":"Փոփոխականներ",
        "input":"Ներմուծում",
        "operations":"Գործողություններ",
        "conditions":"Պայմաններ",
        "boolean":"Տրամաբանական տիպ",
        "languageAboutLanguageTitle":"Լեզվի մասին",
        "languageAboutLanguageContent":"LinguaCode-ը նախատեսված է բոլոր նրանց համար, ովքեր ուզում են արագ յուրացնել ծրագրավորման բազային գիտելիքները։  \nLinguaCode-ի միջոցով ծրագրավորում սովորելու համար պարտադիր չէ օտար լեզուների իմացությունը կամ տեխնիկական գիտելիքներ ունենալը, բավական է միայն ունենալ սովորելու ցանկություն և աշխատասիրություն։  \n\n#### Հնարավորությունները․\n - **Բազմալեզու**\n - **Բազմապլատֆորմ**\n - **Պարզ ծրագրային կոդ**\n - **Անվճար**\n",
        "languageFeaturesTitle":"Լեզվի առանձնահատկությունները",
        "languageFeaturesContent":"LinguaCode-ում լեզվի ուղղագրությունը  կառուցվել է Python, Pascal, JavaScript լեզուների հիման վրա՝ հիմքը դնելով պարզության և հետագայում այլ լեզուների արագ անցման վրա։  \n\n**Ահա լեզվի հիմնական բազային հասկացությունները․**\n\n - **Յուրաքանչյուր հրաման գրվում է նոր տողից։**  \nԱյդ կերպ ծրագրային կոդը ստացվում է առավել պարզ և հասկանալի։\n - **Հրամանները կարող են գրվել ինչպես մեծատառ, այնպես էլ փոքրատառ։**  \nՍա հեշտացնում և արագացնում է ծրագրավորման պրոցեսը, սակայն ցանկալի է, որ հրամանները գրվեն փոքրատառ։\n - **Տեքստը կարելի է գրել ինչպես չակերտների, այնպես էլ մեկական և կրկնակ ապաթարցների միջև։**  \nՇատ երկրներում չեն օգտագործում չակերտներ, այնպես որ այստեղ չկա ոչ մի խտրականություն ընտրության հարցում։\n - **«\\#» սիմվոլից հետո գրված տեքստը համարվում է մեկնաբանություն և չի ազդում ծրագրի աշխատանքի վրա։**  \nՄեկնաբանությունները նախատեսված են ծրագրային կոդը նկարագրելու համար։",
        "outputCommandDefinitionTitle":"Հրամանի նշանակությունը",
        "outputCommandDefinitionContent":"Ցանկացած ծրագրից, որի նպատակն է որևիցե գործողություն կատարելը, անհրաժեշտ է այդ գործողության կատարման արդյունքի մասին տեղեկություն ստանալ։ Դրա համար բոլոր ծրագրավորման համակարգերը համալրված են տեքստի արտածման հնարավորությամբ, իսկ միջավայրը, որտեղ կարելի է տեսնել արդյունքը, կոչվում է **Տերմինալ**։  \n\nՏերմինալում տեքստի արտածման համար օգտագործվում է «*տպել*» հրամանը:  \n\n#### Օրինակ՝  \nծրագիրը՝```linguacode\nտպել(«ողջույն»)\n```արդյունքը՝```terminal\nողջույն\n```",
        "outputPossibleValuesTitle":"Հնարավոր արժեքները",
        "outputPossibleValuesContent":"Արտածման հրամանը կարող է արտածել ինչպես տեքստ, այնպես էլ թվեր, մաթեմատիկական գործողություններ և փոփոխական արժեքներ։  \n\n#### Օրինակ՝  \nծրագիրը՝  \n```linguacode\nտպել(100)\nտպել 5 * 25\n```արդյունքը՝```terminal\n100\n125\n```",
        "variablesDeclaresAndAssignsTitle":"Հայտարարում և վերագրում",
        "variablesDeclaresAndAssignsContent":"Հաճախ հարկ է լինում նույն տեքստը, թիվը կամ թվային գործողությունը պահպանել որևիցե վայրում՝ հետագայում այն օգտագործելու նպատակով։ Այն պահոցները, որոնցում հնարավոր է արժեք պահել, կոչվում են **փոփոխականներ**։  \nՓոփոխականում արժեք պահելու համար նախ անհրաժեշտ է նրան անվանակոչել՝ հետագայում այն իր անունով կանչելու համար։  \nԵրբ հայտարարում ենք փոփոխական, համակարգչի ժամանակավոր հիշողությունում ստեղծվում է տիրույթ, որում այն պահվում է, և երբ օգտագործում ենք այս կամ այն փոփոխականը, համակարգիչը վերադարձնում է տվյալ փոփոխականի անվանը համապատասխան հիշողության տիրույթում գտնվող արժեքը։\n#### Կարևոր է հիշել\nՓոփոխականի անվանումը․  \n**1.**Կարող է պարունակել ցանկացած տառ, սիմվոլ կամ թիվ։  \n**2.** Չի կարող սկսվել թվով։  \n**3.** Չի կարող պարունակել բացատ և մաթեմատիկական գործողությունների նշաններ։\n#### Օրինակ՝  \nԱյժմ **617** թիվն արտածելու համար հետևյալ\n```linguacode\nտպել(617)\n```\nարտահայտության փոխարեն ուղղակի կգրենք՝\n```linguacode\nX = 617\nտպել(X)\n```\n**Ելք՝**\n```terminal\n617\n```  \nԻսկ եթե ցանկանում ենք նույն արժեքը տպել երեք անգամ, ապա կգրենք՝\n```linguacode\nX = 617\nտպել(X)\nտպել(X)\nտպել(X)\n```  \n**Ելք՝**  \n```terminal\n617\n617\n617\n```",
        "variablesPracticalUseTitle":"Գործնական օգտագործում",
        "variablesPracticalUseContent":"Ինչպես տեսանք, մենք կարող ենք վերագրել փոփոխականին թվային և տեքստային արժեքներ։ Սակայն հաճախ անհրաժեշտ է լինում փոփոխականին վերագրել այնպիսի արժեք, որը մինչ այդ վերագրված էր մեկ այլ փոփոխականի։ Այդ դեպքում կարելի է ուղղակի նոր փոփոխականին վերագրել արդեն գոյություն ունեցող փոփոխականները։\n#### Օրինակ՝  \nծրագիրը՝\n```linguacode\na = 1\nb = 2\nc = a + b\nտպել(c)\n```  \nարդյունքը՝\n  ```terminal\n3\n```\n",
        "variablesMultipleUsesTitle":"Բազմակի օգտագործում",
        "variablesMultipleUsesContent":"Միշտ չէ, որ նոր արժեքի պահպանման համար անհրաժեշտ է նոր փոփոխական հայտարարել։ Հաճախ հարկ է լինում ինչպես հայտարարել նոր փոփոխական, այնպես էլ փոփոխել նրան վերագրած արժեքը, որը հնարավորություն կտա պարզեցնել ծավալուն ծրագրային կոդը և խուսափել ավելորդ փոփոխականների օգտագործումից։\n#### Օրինակ՝\nենթադրենք՝ ունենք **100** խնձոր և պահպանում ենք այդ արժեքը **խնձոր** փոփոխականի մեջ։ Համարենք, որ խնձորների քանակը ամեն օր պակասել է **5**-ով։  \nՄեզանից պահանջվում է արտածել ամենօրյա խնձորների քանակը։  \n\nծրագիրը՝\n```linguacode\nխնձոր = 100\nտպել(խնձոր)\n\nխնձոր = խնձոր - 5  # 95\nտպել(խնձոր)\n\nխնձոր = խնձոր - 5  # 90\nտպել(խնձոր)\n\nխնձոր = խնձոր - 5  # 85\nտպել(խնձոր)\n```  \nարդյունքը՝\n```terminal\n100\n95\n90\n85\n```",
        "inputCommandDefinitionTitle":"Հրամանի նշանակությունը",
        "inputCommandDefinitionContent":"Ծրագրեր ստեղծելիս ինչպես անհրաժեշտ է լինում արտածել արժեքներ, այնպես էլ շատ դեպքերում կարիք է լինում մուտքագրել տվյալներ։ Դա անհրաժեշտ է այն ժամանակ, երբ ծրագրի փոփոխականները կարող են ընդունել կամայական արժեք։ Իհարկե կարելի է ամեն անգամ ծրագրային կոդը փոփոխել՝ վերագրելով փոփոխականներին նոր արժեքներ, սակայն դա ժամանակատար է և ոչ նպատակահարմար։  \n\nՆմանատիպ խնդիրներից խուսափելու և ծրագիրը պարզեցնելու համար օգտագործվում է ներմուծման \"*գրել*\" հրամանը։  \n\nԱհա տվյալի ներմուծման պարզ օրինակ, որն արտածում է օգտատիրոջ կողմից ներմուծված թվի կրկնապատիկը՝ ```linguacode\nգրել(թիվ)\nտպել(թիվ * 2)\n```Այս ծրագրի մեկնարկումից հետո Տերմինալի արտածման տիրույթում կարելի է տեսնել \"**>**\" սիմվոլը, որը խորհրդանշում է, որ ծրագիրը մեկնարկված է և անհրաժեշտ է մուտքագրել տվյալ։ Այժմ մուտքագրելով կամայական թիվ և հաստատման համար սեղմելով ստեղնաշարի **Enter** ստեղնը՝ կարելի է տեսնել մուտքագրված թվի կրկնապատիկը՝```terminal\n>617\n1234\n```Շատ դեպքերում ուղղակի անհրաժեշտ կլինի գրել ծրագիր, որը կօգտագործեն այլ մարդիկ, ովքեր չգիտեն ծրագրավորում։",
        "inputWorkMechanismTitle":"Աշխատանքի մեխանիզմը",
        "inputWorkMechanismContent":"Այժմ հասկանանք, թե ինչպես է աշխատում ներմուծման հրամանը։  \n\nԵնթադրենք ունենք հետևյալ ծրագիրը՝ ```linguacode\nտպել(\"Խնդրում ենք մուտքագրել ձեր տվյալները՝\")\nտպել(\"Անունը՝\")\nգրել(անուն)\nտպել(\"Ազգանունը՝\")\nգրել(ազգանուն)\nտպել(\"Բարև Ձեզ, \" + անուն + \" \" + ազգանուն)\n```Ինչպես տեսնում ենք, մեր ծրագիրը կազմում է 6 տող։  \nՄեկնարկելով այն՝ մենք կտեսնենք, որ ծրագիրը կատարվել է մինչև 3-րդ տողը՝```terminal\nԽնդրում ենք մուտքագրել ձեր տվյալները՝\nԱնունը՝\n>\n```Ապա ներմուծելով և հաստատելով անհրաժեշտ տվյալը՝ կտեսնենք, որ հիմա կատարվել է ամբողջից 5-ը։```terminal\nԽնդրում ենք մուտքագրել ձեր տվյալները՝\nԱնունը՝\n>Մարինե\nԱզգանունը՝\n>\n```Վերջապես ներմուծելով վերջին սպասվելիք տվյալը՝ կտեսնենք, որ ծրագիրն ամբողջությամբ կատարվել է և ավարտվել։```terminal\nԽնդրում ենք մուտքագրել ձեր տվյալները՝\nԱնունը՝\n>Մարինե\nԱզգանունը՝\n>Չամչյան\nԲարև Ձեզ, Մարինե Չամչյան\n```Այսպիսով տեսանք, որ օգտագործելով ներմուծման հրամանը՝ ծրագրի աշխատանքը մասնատվում է և կատարվում մաս առ մաս։",
        "operationsArithmeticOperatorsTitle":"Թվաբանական գործողություններ",
        "operationsArithmeticOperatorsContent":"LinguaCode-ում հնարավոր է թվերի հետ կատարել մեզ հայտնի թվաբանական գործողություններ՝ **+**, **-**, **\\***, **/**։  \n\nՕրինակ այս ծրագիրը **1** և **2** թվերի նկատմամբ կկատարի բոլոր թվաբանական գործողությունները՝ ```linguacode\nտպել(1 + 2)  # 3\nտպել(1 - 2)  # -1\nտպել(1 * 2)  # 2\nտպել(1 / 2)  # 0.5\n``` #### Կարևոր է հիշել  \nԻնչպես գիտենք, մաթեմատիկայում ընդունված է, փոփոխականները փոփոխականներով կամ թվերով բազմապատկելիս, չգրել բազմապատկման նշանը` օրինակ *7 անգամ X* -ը գրվում է **7X**, կամ *X անգամ Y*-ը՝ **XY**։  \nԾրագրավորելիս արժեքները միմյանցով բազմապատկելիս հարկավոր է պարտադիր գրել բազմապատկման նշանը, օրինակ **7 \\* X**, կամ **X \\* Y**։",
        "operationsExecutingPriorityTitle":"Կատարման առաջնայնությունը",
        "operationsExecutingPriorityContent":"Ինչպես մաթեմատիկայում, այնպես էլ ծրագրավորման մեջ, եթե կիրառված է բազմապատկում կամ բաժանում, ապա առաջնայնությունը տրվում է նախ դրանց կատարմանը, ապա նոր գումարմանը և հանմանը։   \n\n#### Օրինակ՝ ```linguacode\nX = 10 + 2 * 4 - 2\n# X = 10 + 8 - 2\n# X = 18 - 2\n# X = 16\n``` Նմանատիպ դեպքերում գործողությունների կատարման առաջնայությունը հնարավոր փոխել՝ կիրառելով փակագծեր:  \n#### Օրինակ՝  ```linguacode\nX = (10 + 2) * (4 - 2)\n# X = 12 * (4 - 2)\n# X = 12 * 2\n# X = 24\n```Ծրագրավորելիս ևս կարելի է կիրառել փակագծեր, նույնիսկ եթե վստահ չեք առաջնայնության հարցում, կամ նույն գործողության վրա կիրառել եք ավելորդ բազմակի փակագծեր։  \nԴա սխալ չի համարվի, սակայն ցանկալի է, որ ձեր գրած ծրագիրը լինի հնարավորինս պարզ և ընթեռնելի ինչպես ձեր, այնպես էլ ուրիշների համար, ովքեր կծանոթանան ծրագրին։",
        "operationsNumbersTitle":"Թվեր",
        "operationsNumbersContent":"Ինչպես գիտենք <a href=\"https://hy.wikipedia.org/wiki/Թիվ\" target=\"_blank\">թվերը</a> քանակային բնութագրիչներ են, որոնք օգտագործվում են համեմատման և առարկաների համարակալման համար։  \nԳոյություն ունեն թվերի 5 տեսակներ, որոնցից մենք կառնչվենք բոլորի հետ, բացառությամբ կոմպլեքս թվերի՝  \n- **բնական**՝ **1**, **2**, ...```linguacode\nտպել(7 + 4)  # 13\n```  \n - **ամբողջ**՝ ..., **-1**, **0**, **1**, ...```linguacode\nտպել(-6 * 5 + -3)  # -33\n```  \n - **ռացիոնալ**՝ **1/2**, **2/3**, **0.125**, ...```linguacode\nտպել(0.617 * 2 * 1000)  # 1234\n``` \n - **իրական**՝ **√2**, **1.62**, ...```linguacode\nտպել(2/3 + 1/2)  # 1\n```",
        "operationsSumOfStringAndNumberTitle":"Տողերի և թվերի գումար",
        "operationsSumOfStringAndNumberContent":"Ինչպես տեսանք, կարող ենք միմյանց գումարել ինչպես թվերը, այնպես էլ տեքստերը, որի արդյունքում տողերն ուղղակի միավորվում են։ Սակայն հաճախ հարկ է լինում ստանալ տող, որտեղ կօգտագործվի թվային արժեք։ Այդ դեպքում հնարավոր է տեքստը գումարել թվին, որի արդյունքում առկա թիվը կձևափոխվի տեքստի և կմիավորվի մյուսի հետ։```linguacode\nտեքստ = «տարին ունի » + 365 + « օր»\n# տեքստ = «տարին ունի » + «365» + « օր»\n# տեքստ = «տարին ունի 365» + « օր»\n# տեքստ = «տարին ունի 365 օր»\n```  #### Կարևոր է հիշել  \nՏողի հետ հնարավոր է կատարել միայն գումարման գործողություն. մնացած գործողությունների դեպքերում կգրանցվի սխալ։",
        "conditionsCommandsIfTitle":"Հրաման «եթե»",
        "conditionsCommandsIfContent":"Երբեմն ծրագրավորման մեջ անհրաժեշտ է լինում պայմանից կախված կատարել այս կամ մեկ այլ գործողություն։  \nԴրա համար գոյություն ունեն «եթե», «եթե-այլապես» և «այլապես-եթե» պայմանների ստուգման հրամանները։  \n\n«**եթե**» հրամանի գրելաձևը՝ ```linguacode\nեթե <պայման> ապա\n    <գործողություն>\n``` Այստեղ «եթե» և «ապա» հրամանների միջև գրվում է կամայական պայման, այնուհետև հաջորդ տողից և **4 բացատ** խորքից գրվում է գործողությունը (կամ գործողությունները), որը պետք է կատարվի պայմանի *ճիշտ* լինելու դեպքում։  \n\n#### Օրինակ՝ ```linguacode\na = 5\nb = 2\nեթե a > b ապա\n    տպել(«a > b»)\n```",
        "conditionsCommandsIfElseTitle":"Հրաման «եթե-այլապես»",
        "conditionsCommandsIfElseContent":"Այսպիսով մենք գիտենք, թե ինչպես գրել պայմանին համապատասխան ծրագիր։ Այժմ մենք կքննարկենք այն դեպքը, երբ պայմանը սխալ է։ \n\n«**եթե-այլապես**» հրամանի գրելաձևը՝```linguacode\nեթե <պայման> ապա\n    <գործողություն N1>\nայլապես\n    <գործողություն N2>\n``` Այստեղ առկա «եթե» հրամանին կցվում է ևս մեկ այլ տող, որում գրված է «այլապես» հրամանը, իսկ նրա հաջորդ տողից և 4 բացատ խորքից գրվում է այն գործողությունը, որ կկատարվի, երբ ստուգման պայմանը լինի սխալ։  \n\n#### Օրինակ՝ ```linguacode\na = 5\nb = 10\nեթե a > b\n    տպել(«a > b»)\nայլապես\n    տպել(«b < a»)\n```",
        "conditionsCommandsElseIfTitle":"Հրաման «այլապես-եթե»",
        "conditionsCommandsElseIfContent":"Մենք արդեն քննարկեցին պայմանի ճիշտ  և ոչ ճիշտ լինելու հնարավոր տարբերակներից բխող գործողությունների կատարումների տարբերակները։ Սակայն հաճախ անհրաժեշտ է լինում միաժամանակյա ստուգել 1-ից ավել պայմաններ։  \n\n«**եթե-այլապես-եթե**» հրամանի գրելաձևը՝```linguacode\nեթե <պայման N1> ապա\n    <գործողություն N1>\nայլապես եթե <պայման N2> ապա\n    <գործողություն N2>\nայլապես\n    <գործողություն N3>\n``` Ի տարբերություն նախորդ հրամանների, այստեղ կիրառված են 1 և ավելի պայմանների ստուգումներ։ «Այլապես-եթե» հրամանի դեպքում «եթե» և «այլապես» հրամանների միջև կարող են ավելանալ 1 և ավելի «այլապես-եթե» հրամաններ։  \n\n#### Օրինակ՝ ```linguacode\na = 5\nb = 5\nեթե a > b ապա\n    տպել(«a > b»)\nայլապես եթե a < b ապա\n    տպել(«a < b»)\nայլապես\n    տպել(«b == a»)\n```",
        "booleanTypesBooleanTitle":"Նկարագրություն",
        "booleanTypesBooleanContent":"Մենք արդեն ծանոթ ենք, թե ինչպես կատարել պայմանների ստուգումներ, և գիտենք, որ ցանկացած պայման կարող է լինել *ճիշտ* (22 > 18) կամ *սխալ* (16 > 18)։  \n\nԵրբեմն պայմանի ստուգման տողի երկարության ընդլայնման պատճառով ծրագրային կոդը դառնում է ոչ այդքան ընթեռնելի։ Այստեղ օգնության են հասնում Տրամաբանական տիպի արժեքները․  \n\n - **ճիշտ** ```linguacode\nպայման = ճիշտ\nտպել(պայման)  #ճիշտ\n```  \n\n - **սխալ**```linguacode\nպայման = սխալ\nտպել(պայման)  #սխալ\n``` Մեզ արդեն հայտնի ցանկացած տրամաբանական համեմատություն վերադրաձնում է այս արժեքներից մեկը։  \n\n*Ճիշտ* համեմատության օրինակ՝ ```linguacode\nպայման = 1 < 5\nտպել(պայման)  # ճիշտ\n``` *Սխալ* համեմատության օրինակ՝ ```linguacode\nպայման = 10 < 5\nտպել(պայման)  # սխալ\n``` Այսպիսով պայմանների ստուգման հրամաններում ստուգվող պայմանները մենք կարող ենք փոխարինել փոփոխականներով, որոնց արժեքը կարող է լինել տրամաբանական տիպի։  \n\n#### Օրինակ՝ ```linguacode\nտպել(«Գրեք a թիվը՝»)\nգրել(a)\n\nտպել(«Գրեք b թիվը՝»)\nգրել(b)\n\nպայման1 = a > b\nպայման2 = a < b\n\nեթե պայման1 ապա\n    արդյունք = «a > b»\nայլապես եթե պայման2 ապա\n    արդյունք = «a < b»\nայլապես\n    արդյունք = «a == b»։\nտպել(«Արդյունքը՝ » + արդյունք)\n```",
        "booleanOperatorsComparisonTitle":"Համեմատման օպերատորներ",
        "booleanOperatorsComparisonContent":"Պայմանի ստուգման հրամաններում մենք արդեն կիրառել ենք մեծի՝ > և փոքրի՝ < համեմատման օպերատորները։ Սակայն այստեղ կարելի է օգտագործել թվաբանության մեզ արդեն հայտնի առկա և հավելյալ այլ օպերատորներ․  \n\n - **>** համեմատում է թվային արժեքներ, որտեղ 1-ինը *#մեծ է* 2-րդից։ Օրինակ՝ ```linguacode\nտպել(5 > 1)  # ճիշտ\nտպել(1 > 5)  # սխալ\n```  \n\n - **>=** համեմատում է թվային արժեքներ, որտեղ 1-ինը *#մեծ է կամ հավասար* 2-րդին։ Օրինակ՝ ```linguacode\nտպել(5 >= 5)  # ճիշտ\nտպել(1 >= 5)  # սխալ\n```  \n\n - **<** համեմատում է թվային արժեքներ, որտեղ 1-ինը *#փոքր է* 2-րդից։ Օրինակ՝ ```linguacode\nտպել(1 < 5)  # ճիշտ\nտպել(5 < 1)  # սխալ\n```  \n\n - **<=** համեմատում է թվային արժեքներ, որտեղ 1-ինը *#փոքր է կամ հավասար* 2-րդին։ Օրինակ՝ ```linguacode\nտպել(1 <= 5)  # ճիշտ\nտպել(5 <= 1)  # սխալ\n```  \n\n - **==** համեմատում է թվային կամ տողային արժեքներ, որտեղ 1-ինը *#հավասար է* 2-րդին։ Օրինակ՝ ```linguacode\nտպել(5 == 5)  # ճիշտ\nտպել(5 == 1)  # սխալ\nտպել(«զինվոր» == «զինվոր»)  # ճիշտ\nտպել(«կարգին» == «կարկին»)  # սխալ\n```  \n\n - **!=** համեմատում է թվային կամ տողային արժեքներ, որտեղ 1-ինը *#հավասար չէ* 2-րդին։ Օրինակ՝ ```linguacode\nտպել(5 != 1)  # ճիշտ\nտպել(5 != 5)  # սխալ\nտպել(«կարգին» != «կարկին») # ճիշտ\nտպել(«զինվոր» != «զինվոր»)  # սխալ\n```  \n\n - **ոչ()** հակադարձում է ցանկացած թվային կամ տողային համեմատման արդյունք։ Օրինակ՝ ```linguacode\nտպել(ոչ(1 > 5))  # ճիշտ\nտպել(ոչ(5 == 5))  # սխալ\nտպել(ոչ(սխալ))  # ճիշտ\nտպել(ոչ(ճիշտ))  # սխալ\n```",
        "booleanOperatorsLogicalTitle":"Տրամաբանական օպերատորներ",
        "booleanOperatorsLogicalContent":"Այժմ մենք գիտենք, թե ինչպես գրել կամայական պայման, սակայն հաճախ անհրաժեշտ է լինում միավորել մի քանի պայման մեկում, և կախված դրանից կատարել կամայական գործողություն։ Պայմանների միավորումը տեղի է ունենում տրամաբանական օպերատորների միջոցով․  \n\n - «**և**» հրամանը միավորում է երկու պայման մեկում, որը համարվում է **ճիշտ**, եթե երկու պայմաններն էլ միաժամանակյա *ճիշտ* են, այլապես եթե նրանցից գոնե մեկը *սխալ* է, ապա այն կլինի **սխալ**։ Օրինակ՝ ```linguacode\nտպել(5 > 1 և 10 < 100)  # ճիշտ\nտպել(20 < 100 և 1 > 5)  # սխալ\n```  \n\n - «**կամ**» հրամանը միավորում է երկու պայման մեկում, որը համարվում է **ճիշտ**, եթե նրանցից գոնե մեկը *ճիշտ* է, այլապես եթե երկու պայմաններն էլ միաժամանակյա *սխալ* են, ապա այն կլինի **սխալ**։ Օրինակ՝ ```linguacode\nտպել(5 > 1 կամ 100 < 10)  # ճիշտ\nտպել(20 > 100 կամ 1 > 5)  # սխալ\n```",
        "booleanOperatorsExecutingPriorityTitle":"Կատարման առաջնայնությունը",
        "booleanOperatorsExecutingPriorityContent":"Մենք սովորեցինք, թե ինչպես միավորել 2 պայման, սակայն ծրագրի բովանդակությունից կախված՝ պայմանների քանակը կարող է լինել 2 և ավելի։ Այդ դեպքում պայմանները *ձախից աջ* կմիավորվեն իրենց հարևան պայմանների հետ այնքան ժամանակ, մինչև որ վերջում կազմեն 1 պայման։  \n\n#### Օրինակ՝ ```linguacode\nտպել(5 < 1 և 1 < 7 կամ 1 >= 3 կամ 9 == 9)\n``` այս արտահայտություն համապատասխանում է սրան՝ ```linguacode\nտպել(սխալ և ճիշտ կամ սխալ կամ ճիշտ)\n``` միավորենք **1-ին** և **2-րդ** պայմանները՝ «**սխալ և ճիշտ**»՝ մեկում․  ```linguacode\nտպել(սխալ կամ սխալ կամ ճիշտ)\n``` միավորենք **1+2** պայմանը **3-րդի** հետ՝ «**սխալ կամ սխալ**»․ ```linguacode\nտպել(սխալ կամ ճիշտ)\n``` և վերջապես **1+2+3** պայմանը **4-րդի** հետ՝ «**սխալ կամ ճիշտ**»․ ```linguacode\nտպել(ճիշտ)\n``` Այսպիսով մենք կարողացանք միավորել 4 պայման մեկում։ Այդ կերպ կարող ենք միավորել ցանկացած քանակի պայմաններ։  \n\nԵրբեմն անհրաժեշտություն է լինում փոփոխել ձախից աջ պայմանների միավորման կատարման առաջնայնությունը կամ միավորել պայմանները։ Դա կատարվում է փակագծերի միջոցով։  \n\n#### Օրինակ՝ ```linguacode\nտպել(5 < 1 և (1 < 7 կամ (1 >= 3 կամ 9 == 9)))\n```  \n\nայս արտահայտություն համապատասխանում է սրան՝ ```linguacode\nտպել(սխալ և (ճիշտ կամ (սխալ կամ ճիշտ)))\n``` միավորենք **3-րդ** և **4-րդ** պայմանները՝ «**սխալ կամ ճիշտ**»՝ մեկում․  ```linguacode\nտպել(սխալ կամ (սխալ կամ ճիշտ))\n``` միավորենք **2-րդ** պայմանը **3+4-ի** հետ՝ «**սխալ կամ ճիշտ**»․ ```linguacode\nտպել(սխալ և ճիշտ)\n``` և վերջապես **1-ին** պայմանը **2+(3+4)-ի** հետ՝ «**սխալ և ճիշտ**»․ ```linguacode\nտպել(սխալ)\n``` Այսպիսով տեսանք, որ փոխելով առաջնայնությունը՝ փոխվեց վերջնական արժեքը։"
      },
      "syntaxInfo":{
        "modalTitle":"Հրամանների ձեռնարկ",
        "cheatSheetTitle":"Հուշաթերթիկ",
        "lesson":"Դասընթաց"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b> Արագ կանչման ստեղներ</b>",
      "undo":"Չեղարկել",
      "redo":"Վերականգնել",
      "selectAll":"Նշել ամբողջը",
      "run":"Մեկնարկել",
      "terminal":"Տերմինալ"
    },
    "program":{
      "program":"Ծրագիր",
      "sourceCode":"Կոդ",
      "functionArgumentSyntaxError":"Ֆունկցիայի արգումենտի սխալ ${line} տողում։",
      "undefinedVariable":"«${variable}» փոփոխականը հայտարարված չէ ${line} տողում։",
      "indentError":"Բացատի սխալ ${line} տողում։",
      "hackAttempt":"Հաքերային հարձակման հայտնաբերում։ Ձեր «${ip}» ip հասցեն պահպանված է հետագա հետաքննության համար։",
      "syntaxError":"Կոդի ուղղագրական սխալ",
      "timeout":"Ծրագրի գերբեռնում։ Համոզվեք, որ ծրագիրը չի պարունակում անվերջ կրկնողություն։",
      "true":"ճիշտ",
      "false":"սխալ",
      "NaN":"անորոշ",
      "null":"անհայտ",
      "Infinity":"Անվերջություն",
      "undefined":"չհայտաարարված"
    },
    "programListGroup":{
      "programs":"Ծրագրեր"
    },
    "terminal":{
      "hotkeys":"<b> Արագ կանչման ստեղներ</b>",
      "undo":"Չեղարկել",
      "redo":"Վերականգնել",
      "selectAll":"Նշել ամբողջը",
      "terminal":"Տերմինալ"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"Մուտք"
    },
    "menuButton":{
      "settings":"Կարգավորումներ",
      "logOut":"Դուրս գալ"
    }
  },
  "panels":{
    "header":{
      "title":"Գլխավոր էջ"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"Օգտատերը դեռ չունի ստեղծած ծրագրեր:"
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"Դուք դեռ չունեք ստեղծած ծրագրեր",
      "programNotFoundClickPartFirst":"Սեղմեք",
      "programNotFoundClickPartSecond":"այստեղ",
      "programNotFoundClickPartThird":"նորը ստեղծելու համար"
    },
    "loading":{
      "loading":"Բեռնում"
    }
  }
}