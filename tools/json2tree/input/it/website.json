{
  "blocks":{
    "controlPanelBlock":{
      "edit":"Modifica",
      "delete":"Elimina"
    },
    "lovePanelBlock":{
      "like":"Come",
      "liked":"Piaciuto",
      "star":"Stella",
      "starred":"Protagonista"
    },
    "moreFromUserBlock":{
      "viewAll":"Guarda tutto",
      "moreFromFirst":"Più da",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"Ordina per",
      "recent":"Recente",
      "views":"Visualizzazioni",
      "stars":"Stelle",
      "likes":"Piace",
      "random":"Casuale"
    },
    "shareBlock":{
      "link":"Link",
      "share":"Condividi",
      "tweet":"Tweet",
      "textTwitter":"Programma \"${programTitle}\" da ${userName} su #LinguaCode ${userPageLink}",
      "descriptionVK":"LinguaCode è un social piattaforma di codifica ed è stato progettato appositamente per i bambini, dove possono imparare a programmare e condividere i loro codici con la loro lingua madre e senza la necessità di conoscere l'inglese."
    },
    "userPrimaryInfoBlock":{
      "editProfile":"Modifica profilo"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"Unito"
    }
  },
  "pages":{
    "errorPage":{
      "title":"Errore",
      "explanation":"Scusate, un errore critico su questa pagina."
    },
    "landingPage":{
      "title":"LinguaCode l'Apprendimento di Codifica",
      "learningByCoding":"Apprendimento <span className=\"masthead--lora-italic\">by Coding</span>",
      "explanation":"Facciamo imparare la programmazione e la codifica così pieno di gioia e di vita, ridere ad alta voce.",
      "facebookSignIn":"Accedi con Facebook",
      "or":"o",
      "seeTheListOfPrograms":"Vedere l'elenco di esistere programmi",
      "descriptionHead":"Il miglior nuovo modo di imparare la programmazione.",
      "descriptionBody":"LinguaCode è un social piattaforma di codifica ed è stato progettato appositamente per i bambini, dove possono imparare a programmare e condividere i loro codici con la loro lingua madre e senza la necessità di conoscere l'inglese.",
      "advantagesHeadline":"LinguaCode aiuta a <span className=\"u-emphasized\">learn meglio </span>",
      "advantageTopFirstHeadline":"Multilingue",
      "advantageTopFirstDescription":"La scrittura di applicazioni native lingue, e non solo.",
      "advantageTopSecondHeadline":"è gratuito!",
      "advantageTopSecondDescription":"Tutto è gratis.",
      "advantageTopThirdHeadline":"Avvio rapido",
      "advantageTopThirdDescription":"Iniziare è molto più facile di quanto si pensi!",
      "advantageBottomFirstHeadline":"Fantasia",
      "advantageBottomFirstDescription":"Imparare, provare, Creare!",
      "advantageBottomSecondHeadline":"Istruzione",
      "advantageBottomSecondDescription":"Conoscenza di linguaggi di programmazione, nonché di altri soggetti.",
      "advantageBottomThirdHeadline":"Comunità",
      "advantageBottomThirdDescription":"Condividi i tuoi programmi con gli amici e trovare nuovi amici.",
      "joinText":"Unisciti a <span className=\"u-emphasized\">the community</span> di studenti",
      "facebookRegister":"Registrati ora, è gratis!"
    },
    "notFoundPage":{
      "title":"Pagina non trovata",
      "explanation":"Mi dispiace, ma la pagina che stai cercando di raggiungere non esiste.",
      "descriptionPartFirst":"Provare a denominazione di",
      "descriptionPartSecond":"pagina principale",
      "descriptionPartThird":"invece."
    },
    "programChangePage":{
      "titleOfEditPage":"Modificare il programma ${userName}/${title}",
      "editProgramHeadline":"Modifica di un programma",
      "editProgramButton":"Modifica Del Programma",
      "titleOfCreatePage":"Creare un nuovo programma",
      "newProgramHeadline":"Creare un nuovo programma",
      "submitProgramButton":"Presentare Il Programma",
      "programContent":"Un programma che contiene tutte le informazioni per il tuo codice.",
      "name":"Nome",
      "programNameForm":"Grandi i nomi dei programmi sono brevi e memorabili, come <b>hello-world</b>.",
      "titleOfProgram":"Titolo",
      "description":"Descrizione",
      "validationError":"Errore di convalida",
      "errorTextForNameLength":"Lunghezza del <b>name</b> dovrebbe più di 0 e minore di 32, dovrebbe consistere in latino simboli e trattini.",
      "errorTextForName":"Questo nome di origine è già utilizzato da voi.",
      "errorTextForTitle":"Lunghezza del <b>title</b> dovrebbe più di 0 e meno di 128.",
      "errorTextForDescription":"Lunghezza del <b>description</b> dovrebbe più di 0 e meno di 5120.",
      "errorTextForSource":"Lunghezza del <b>source</b> dovrebbe più di 0 e minore quindi 10240."
    },
    "programs":{
      "title":"Programmi"
    },
    "settingsPage":{
      "title":"Impostazioni",
      "publicProfile":"Profilo pubblico",
      "validationError":"Errore di convalida",
      "username":"Nome utente",
      "yourUsername":"Il tuo nome utente",
      "usernameWasAlreadyUsed":"Nome utente è già stato utilizzato",
      "usernameWasReserved":"Nome utente era riservato",
      "usernameValidation":"Lunghezza del <b>username</b> deve essere inferiore a 24 e contengono le lettere più piccole, di latino e di numeri.",
      "name":"Nome",
      "yourFirstNameAndLastName":"Il vostro nome e cognome",
      "nameValidation":"Lunghezza del <b>name</b> deve essere maggiore di 0 e meno di 24",
      "bio":"Bio",
      "tellALittleAboutYourself":"Raccontare un po ' su di te",
      "bioValidation":"Lunghezza del <b>bio</b> deve essere inferiore a 128.",
      "country":"Nazione",
      "select":"seleziona",
      "countryValidation":"Selezionare uno qualsiasi dei paesi",
      "updateProfile":"Aggiorna il profilo"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"Accedi",
      "signInDescription":"L'operazione è possibile solo quando si è effettuato l'accesso."
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"Sei sicuro di voler cancellare il programma ?",
      "answerYes":"sì",
      "answerNo":"no"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"Uscita",
        "outputNameValue":"``linguacode\nuscita(X)\n``",
        "outputDescription":"Stampa qualsiasi valore di X: i numeri, le operazioni, il testo e i valori della variabile. Per esempio",
        "outputDescriptionValue":"``linguacode\ndi uscita(4) # 4\noutput(«Howdy») # Howdy\nuscita(1+2) # 3\n``",
        "inputName":"Ingresso",
        "inputNameValue":"``linguacode\ndi ingresso(X)\n``",
        "inputDescription":"Qualsiasi variabile X il valore di dichiarazione da parte dell'utente. Per esempio",
        "inputDescriptionValue":"``linguacode\ndi ingresso(a)\n``",
        "ifElseStatementName":"Verifica della dichiarazione",
        "ifElseStatementNameValue":"``linguacode\nse poi <condition N1>\n<operation N1>\naltrimenti se <condition N2> poi\n<operation N2>\naltro\n<operation N3>\n``",
        "ifElseStatementDescription":"Le operazioni saranno eseguite in base a determinate condizioni. Per esempio",
        "ifElseStatementDescriptionValue":"``linguacode\na = 5\nb = 5\nse a > b allora\noutput(«a > b»)\naltra cosa se a < b allora\noutput («<b»)\naltro\noutput(«b == a») # b == a\n``",
        "loopForName":"Limitata ripetere",
        "loopForNameValue":"``linguacode\nripetere <N> volte\n<operation>\n``",
        "loopForDescription":"Esegue un blocco di codice per un numero di volte. Per esempio",
        "loopForDescriptionValue":"``linguacode\nripetere 10 volte\noutput(«Howdy»)\n``",
        "loopWhileDoName":"Ciclo \"While Do\"",
        "loopWhileDoNameValue":"``linguacode\nmentre <condition> poi\n<operation>\n``",
        "loopWhileDoDescription":"\"Mentre Fare\" ciclo viene eseguito attraverso un blocco di codice come lungo come la condizione specificata è vera. Per esempio",
        "loopWhileDoDescriptionValue":"``linguacode\na = 1\nmentre un < 5\ndi uscita(a)\na = a + 1\n``",
        "loopDoWhileName":"Ciclo \"Do While\"",
        "loopDoWhileNameValue":"``linguacode\nfare\n<operation>\nmentre <condition>\n``",
        "loopDoWhileDescription":"Ciclo \"Do While\" per ripetere il ciclo fino a quando la condizione è vera. Per esempio",
        "loopDoWhileDescriptionValue":"``linguacode\na = 1\nfare \ndi uscita(a)\na = a + 1\nmentre un < 5\n``",
        "piName":"pi costante matematica",
        "piNameValue":"``linguacode\nuscita(pi)\n``",
        "piDescription":"Stampe costante matematica <b>pi</b>. Per esempio",
        "piDescriptionValue":"``linguacode\nuscita(pi) # a 3,141592653589793\n``",
        "eNumberName":"e costante matematica",
        "eNumberNameValue":"``linguacode\nuscita(e)\n``",
        "eNumberDescription":"Stampe costante matematica <b>e</b>. Per esempio",
        "eNumberDescriptionValue":"``linguacode\nuscita(e) # 2.718281828459045\n``",
        "sqrName":"Piazza del numero",
        "sqrNameValue":"``linguacode\nsqr(X)\n``",
        "sqrDescription":"Restituisce piazza di <b>X</b> numero inserito dall'utente. Per esempio",
        "sqrDescriptionValue":"``linguacode\nX = 5 \nY = sqr(X) \noutput(Y) # 25\n``",
        "powName":"Il potere del numero",
        "powNameValue":"``linguacode\npow(X,Y)\n``",
        "powDescription":"Restituisce il valore di <b>X</b> il potere di <b>Y</b>. Per esempio",
        "powDescriptionValue":"``linguacode\nX = 2 \nY = 5 \nZ = pow(X, Y) \nuscita(Z) # 32\n``",
        "sqrtName":"La radice quadrata di un numero",
        "sqrtNameValue":"``linguacode\nsqrt(X)\n``",
        "sqrtDescription":"Restituisce la radice quadrata di <b>X</b> numero inserito dall'utente. Per esempio",
        "sqrtDescriptionValue":"``linguacode\nX = 9 \nY = sqrt(X) \noutput(Y) # 3\n``",
        "absName":"Valore assoluto di un numero",
        "absNameValue":"``linguacode\nabs(X)\n``",
        "absDescription":"Restituisce il valore assoluto di <b>X</b> numero inserito dall'utente. Per esempio՝",
        "absDescriptionValue":"``linguacode\nX = -5 \nY = abs(X) \noutput(Y) # 5\n``",
        "roundName":"Numero di arrotondamento",
        "roundNameValue":"``linguacode\nround(X)\n``",
        "roundDescription":"Giri un <b>X</b> numero all'intero più vicino e restituisce il valore. Per esempio",
        "roundDescriptionValue":"``linguacode\nX = 2.3 \na = round(X) \ndi uscita(a) # 2\n``",
        "floorName":"Numero di piano",
        "floorNameValue":"``linguacode\nfloor(X)\n``",
        "floorDescription":"Giri un <b>X</b> numero <b>downwards</b> al numero intero più vicino e restituisce il valore. Per esempio",
        "floorDescriptionValue":"``linguacode\nX = 2.6 \na = floor(X) \ndi uscita(a) # 2\n``",
        "ceilName":"Numero ceil",
        "ceilNameValue":"``linguacode\nceil(X)\n``",
        "ceilDescription":"Giro un <b>X</b> numero <b>upwards</b> al suo più vicino numero intero e restituisce il valore",
        "ceilDescriptionValue":"``linguacode\nX = 2.2 \na = ceil(X) \ndi uscita(a) # 3\n``",
        "sinName":"Sine",
        "sinNameValue":"``linguacode\nsin(X)\n``",
        "sinDescription":"Restituisce il valore della <b>sine</b> di un <b>X</b> numero. Per esempio",
        "sinDescriptionValue":"``linguacode\nX = sin(pi) \nuscita(X) # 0\n``",
        "cosName":"Coseno",
        "cosNameValue":"``linguacode\ncos(X)\n``",
        "cosDescription":"Restituisce il valore della <b>cosine</b> di un <b>X</b> numero. Per esempio",
        "cosDescriptionValue":"``linguacode\nX = cos(pi) \nuscita(X) # -1\n``",
        "tanName":"Tangente",
        "tanNameValue":"``linguacode\ntan(X)\n``",
        "tanDescription":"Restituisce il valore della <b>tangent</b> di un <b>X</b> numero. Per esempio՝",
        "tanDescriptionValue":"``linguacode\nX = tan(pi) \nuscita(X) # 0\n``",
        "ctgName":"Cotangente",
        "ctgNameValue":"``linguacode\nctg(X)\n``",
        "ctgDescription":"Restituisce il valore della <b>cotangent</b> di un <b>X</b> numero. Per esempio՝",
        "ctgDescriptionValue":"``linguacode\nX = ctg(pi/4) \nuscita(X) # 1\n``",
        "arcSinName":"Arcoseno",
        "arcSinNameValue":"``linguacode\narcsin(X)\n``",
        "arcSinDescription":"Restituisce il valore in cui il seno si ottiene lo stesso valore <b>X</b>. Per esempio",
        "arcSinDescriptionValue":"``linguacode\na = arcsin(1) \ndi uscita(a) # pi/2 \n``",
        "arcCosName":"Arcocoseno",
        "arcCosNameValue":"``linguacode\narccos(X)\n``",
        "arcCosDescription":"Restituisce il valore in cui il coseno ottiene lo stesso valore <b>X</b>. Per esempio",
        "arcCosDescriptionValue":"``linguacode\na = arccos(1) \ndi uscita(a) # 0\n``",
        "arcTanName":"Arcotangente",
        "arcTanNameValue":"``linguacode\narctan(X)\n``",
        "arcTanDescription":"Restituisce il valore in cui la tangente si ottiene lo stesso valore <b>X</b>. Per esempio",
        "arcTanDescriptionValue":"``linguacode\na = arctan(0) \ndi uscita(a) # 0\n``",
        "arcCtgName":"Arccotangent",
        "arcCtgNameValue":"``linguacode\narcctg(X)\n``",
        "arcCtgDescription":"Restituisce il valore in cui la cotangente ottiene lo stesso valore <b>X</b>. Per esempio",
        "arcCtgDescriptionValue":"``linguacode\na = arcctg(1) \ndi uscita(a) # pi/4\n``",
        "logName":"Logaritmo",
        "logNameValue":"``linguacode\nlog(X,Y)\n``",
        "logDescription":"Restituisce il valore del logaritmo del <b>X</b> alla base <b>Y</b>. Per esempio",
        "logDescriptionValue":"``linguacode\na = log(3,27) \ndi uscita(a) # 3\n``",
        "lgName":"Logaritmo comune",
        "lgNameValue":"``linguacode\nlg(Y)\n``",
        "lgDescription":"Restituisce il valore del logaritmo del <b>X</b> alla base <b>10</b>. Per esempio",
        "lgDescriptionValue":"``linguacode\na = lg(100) \ndi uscita(a) # 10\n``",
        "lnName":"Logaritmo naturale",
        "lnNameValue":"``linguacode\nln(Y)\n``",
        "lnDescription":"Restituisce il valore del logaritmo del <b>X</b> alla base <b>e</b>. Per esempio",
        "lnDescriptionValue":"``linguacode\na = ln(e) \ndi uscita(a) # 1\n``",
        "randomName":"Generazione di numeri casuali",
        "randomNameValue":"``linguacode\ncasuale(X,[Y])\n``",
        "randomDescription":"Se il parametro <b>Y</b> è dato, il programma genera in modo casuale e tornare numero intero casuale da range<b>[X; Y]</b>. Ma senza <b>Y</b> parametro la gamma sarà <b>[0, X]</b>. Per esempio",
        "randomDescriptionValueFirst":"``linguacode\nX = 10 \na = random(X) # [0; 10]\ndi uscita(a) # 4 \n``",
        "randomDescriptionValueSecond":"``linguacode\nX = 5 \nY = 15 \na = random(X,Y) # [5; 15]\ndi uscita(a) # 12\n``"
      },
      "tutorials":{
        "intro":"Introduzione",
        "output":"Uscita",
        "variables":"Variabili",
        "input":"Ingresso",
        "operations":"Le operazioni di",
        "conditions":"Condizioni",
        "boolean":"Boolean",
        "languageAboutLanguageTitle":"Sulla Lingua",
        "languageAboutLanguageContent":"LinguaCode è stato creato per tutti coloro che vogliono imparare a programmare nozioni di base in modo più comodo. \nPer imparare con LinguaCode non è indispensabile la conoscenza di lingue straniere o competenze tecniche. Tutti avete bisogno è il desiderio di imparare e di diligenza. \n\n#### Caratteristiche:\n- **Multilingue**\n- **Multipiattaforma**\n- **Semplice codice Sorgente**\n- **Gratis**\n",
        "languageFeaturesTitle":"Caratteristiche Del Linguaggio",
        "languageFeaturesContent":"LinguaCode è basato su Python, Pascal e JavaScript, il che rende facile da capire con un semplice codice sorgente e quindi imparare un altro linguaggio di programmazione più rapidamente. \n\n**Ecco tutti i concetti di base della lingua:**\n\n- **Ogni comando inizia dalla nuova linea.** \nIl codice sorgente sarà più semplice e chiaro per quella strada.\n- **I comandi possono essere scritti sia in maiuscolo e in minuscolo.** \nSi accelera il processo di programmazione, ma è preferibile scrivere con lettere minuscole.\n- *Il testo può essere scritto tra virgolette e apostrofi.** \nIn molti paesi ci sono le virgolette non è in uso, quindi qui si può scegliere conveniente la versione per voi.\n- *Il testo scritto dopo il simbolo «\\#» è considerato come il commento e non ha alcun effetto sull'opera di codice sorgente.** \nI commenti sono disponibili per gli appunti.",
        "outputCommandDefinitionTitle":"Definizione di comando",
        "outputCommandDefinitionContent":"Ogni programma che esegue alcune operazioni, dovrebbe mostrarci le informazioni circa il risultato. Ecco perché tutti i sistemi di programmazione hanno un output di testo possibilità e il luogo in cui si può vedere il risultato, che si chiama **Terminale**. \n\nComando «*uscita*» è utilizzato per l'output di testo. \n\n#### Per esempio \nCodice sorgente``linguacode\noutput(«Howdy»)\n`Un risultato``terminale\nHowdy\n``",
        "outputPossibleValuesTitle":"I valori possibili",
        "outputPossibleValuesContent":"L'output del comando in grado di stampare testo, numeri, operazioni matematiche e di valori della variabile.\n\n#### Per esempio \nIl codice sorgente \n``linguacode\nuscita(100)\ndi uscita(5 * 25)\n`Un risultato``terminale\n100\n125\n``",
        "variablesDeclaresAndAssignsTitle":"Dichiarazione e assegnazione",
        "variablesDeclaresAndAssignsContent":"Spesso abbiamo bisogno di salvare il testo, il numero numerici e le operazioni da qualche parte con lo scopo di utilizzarlo di nuovo. I contenitori, dove si può risparmiare valori diversi sono chiamati **variabili**. In primo luogo dobbiamo dare un nome alla variabile e quindi assegnare un valore ad esso. Dopo di essa si può fare riferimento al valore semplicemente chiamando la variabile con il suo nome. \nLe variabili vengono memorizzate nella memoria ad accesso Casuale (RAM) del computer e quando si usa la variabile, computer restituisce il valore corrispondente al nome della variabile dalla RAM.\n#### Importante ricordare\nI nomi delle variabili \n**1.** Può contenere lettere, simboli o cifre \n**2.** Non possono iniziare con un numero \n**3.** Non possono contenere spazi e simboli di operazioni aritmetiche\n#### Per esempio \nPer la stampa di numero **617** invece di questo \n``linguacode\nuscita(617)\n``\nscriveremo\n``linguacode\nX = 617\nuscita(X)\n``\nRisultato\n``terminale\n617\n`` \nE se vogliamo uscita lo stesso valore tre volte, scriveremo \n``linguacode\nX = 617\nuscita(X)\nuscita(X)\nuscita(X)\n`` \nRisultato \n``terminale\n617\n617\n617\n``",
        "variablesPracticalUseTitle":"Utilizzo pratico",
        "variablesPracticalUseContent":"Come si vede, siamo in grado di assegnare sia numerici e di testo di valori alle variabili. Ma spesso abbiamo bisogno di assegnare alla variabile un valore, che era stata assegnata ad un altro. In questo caso siamo in grado di assegnare già esistenti variabile al nuovo.\n#### Per esempio \nIl codice sorgente\n``linguacode\na = 1\nb = 2\nc = a + b\ndi uscita(c)\n`` \nRisultato\n``terminale\n3\n``\n",
        "variablesMultipleUsesTitle":"Utilizzo multiplo",
        "variablesMultipleUsesContent":"Non è necessario creare una nuova variabile per un valore nuovo ogni volta. Possiamo anche modificare i valori assegnati alle variabili. Evitiamo inutili variabili e il codice sorgente sarà più semplice in questo modo.\n#### Per esempio\nSupponiamo che abbiamo **100** mele e salvare questo valore **apple** variabile. Il numero di mele è stata una diminuzione **5** ogni giorno. \nDobbiamo uscita conte di mele per ogni giorno. \n\nIl codice sorgente\n``linguacode\napple = 100\nuscita(apple)\n\napple = apple - 5 # 95\nuscita (apple)\n\napple = apple - 5 # 90\nuscita(apple)\n\napple = apple - 5 # 85\nuscita(apple)\n`` \nRisultato\n``terminale\n100\n95\n90\n85\n``",
        "inputCommandDefinitionTitle":"Definizione di comando",
        "inputCommandDefinitionContent":"Nella programmazione di cui abbiamo bisogno, sia per la produzione e, in molti casi, i dati di input. Abbiamo bisogno quando le variabili non possono ricevere alcun valore. Siamo anche in grado di modificare il codice sorgente di ogni tempo e di assegnare nuovi valori per la variabile, ma non è efficace e ha bisogno di troppo tempo. \n\nIn tal caso, utilizzare il comando \"*ingresso*\". \n\nE qui è un semplice esempio di programma che emette il doppio del numero inserito dall'utente. ``linguacode\ninput(numero)\noutput(numero * 2)\n` Dopo l'esecuzione di questo programma, vedere il simbolo \"**>**\" che significa che il programma è iniziato, ma abbiamo bisogno di input i dati mancanti. Dopo aver inserito il numero e premendo **Enter** vedremo doppio del numero immesso. ``terminale\n>617\n1234\n`E`soprattutto abbiamo bisogno di scrivere programmi, che può essere utilizzato da persone che non sanno nemmeno di programmazione.",
        "inputWorkMechanismTitle":"Lavoro meccanismo di",
        "inputWorkMechanismContent":"Ora vediamo come input del comando funziona. Per esempio, abbiamo questo programma ``linguacode\noutput(\"si Prega di Inserire le proprie credenziali:\")\noutput(\"Nome:\")\ninput(nome)\noutput(\"Cognome:\")\ningresso(cognome)\noutput(\"Ciao\" + nome + \"\" + cognome)\n`` Come possiamo vedere ci sono 6 linee nel nostro programma. \nDopo l'esecuzione di esso si può vedere che il programma ha funzionato fino a quando la linea 3.``terminale\nSi prega di inserire le proprie credenziali:\nNome:\n>\n`` Dopo aver inserito i dati mancanti, si vede che ora ha funzionato fino a quando la linea 5.``terminale\nSi prega di inserire le proprie credenziali:\nNome:\n>Nautica\nCognome:\n>\n`` E, infine, dopo aver inserito l'ultimo incasinato di dati di programma di lavoro e la fine.``terminale\nSi prega di inserire le proprie credenziali:\nNome:\n>Nautica\nCognome:\n>Chamchyan\nCiao, Marino Chamchyan\n` Così abbiamo visto che con questo comando il programma di opere da parte che richiede l'input dei dati persi.",
        "operationsArithmeticOperatorsTitle":"Operazioni aritmetiche",
        "operationsArithmeticOperatorsContent":"In LinguaCode è possibile implementare semplici operazioni aritmetiche come **+**, **-**, **\\***, **/**. \n\nPer esempio, questo programma farà tutti gli operatori aritmetici con **1** e **2** numeri. ``linguacode\nuscita(1 + 2) # 3\nuscita(1 - 2) # -1\nuscita(1 * 2) # 2\nuscita(1 / 2) # 0.5\n` ` #### Importante ricordare \nCome sappiamo in Matematica moltiplicazione di variabile con un'altra variabile o il numero può essere scritto senza il simbolo della moltiplicazione. Per esempio: *7 volte X* scritto **7X** o *i tempi di X Y* **XY**. \nMa la programmazione è importante scrivere il simbolo della moltiplicazione. Per esempio: **7 \\* X** o **X \\* Y**.",
        "operationsExecutingPriorityTitle":"Le operazioni di esecuzione priorità",
        "operationsExecutingPriorityContent":"Sia in Matematica e in programmazione se c'è una divisione o moltiplicazione, abbiamo in primo luogo fare e solo dopo che abbiamo fatto l'addizione e la sottrazione. \n\n#### Per esempio ``linguacode\nX = 10 + 2 * 4 - 2\n# X = 10 + 8 - 2\n# X = 18 - 2\n# X = 16\n` Si`, ma non è possibile modificare l'esecuzione di priorità utilizzando le parentesi. \n#### Per esempio ``linguacode\nX = (10 + 2) * (4 - 2)\n# X = 12 * (4 - 2)\n# X = 12 * 2\n# X = 24\n`E`In programmazione si possono utilizzare le parentesi, anche se sono inutili. \nNon sarà sbagliato, ma è preferibile scrivere in maniera semplice e chiara il codice sorgente, che sarà di facile comprensione per gli altri.",
        "operationsNumbersTitle":"Numeri",
        "operationsNumbersContent":"Come sappiamo <a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">numbers</a> sono oggetti matematici utilizzati per contare, misurare e l'etichetta. \nCi sono 5 tipi di numeri. Faremo i conti con tutti, tranne che per il complesso numbes \n- ** i numeri naturali** **1**, **2**, ...``linguacode\nuscita(7 + 4) # 13\n`` \n- **numeri interi** ..., **-1**, **0**, **1**, ...``linguacode\noutput(-6 * 5 + -3) # -33\n`` \n- **i numeri razionali** **1/2**, **2/3**, **0.125**, ...``linguacode\noutput(0.617 * 2 * 1000) # 1234\n`` \n- **i numeri reali** **√2**, **1.62**, ...``linguacode\nuscita(2/3 + 1/2) # 1\n``",
        "operationsSumOfStringAndNumberTitle":"Somma di numeri e stringhe",
        "operationsSumOfStringAndNumberContent":"Come si vede, è possibile aggiungere numeri e testi di ogni altro, in cui la linea risultati sono combinati in una sola riga. Ma spesso abbiamo bisogno di una linea, in cui ci sarà utilizzato il valore numerico. In quel caso è possibile aggiungere testo, in cui è risultato il numero verrà modificato e combinato con il testo come testo.``linguacode\ntext = «non ci sono » + 365 + « giorni in un anno»\n# text = «non ci sono » + «365» + « giorni in un anno»\n# text = «non ci sono 365» + « giorni in un anno»\n# text = «non ci sono 365 giorni in un anno»\n` ` #### Importante ricordare \nCon le linee si possono fare solo l'aggiunta di funzionamento. Mentre si eseguono altre operazioni saranno il risultato di un errore.",
        "conditionsCommandsIfTitle":"Comando \"If\"",
        "conditionsCommandsIfContent":"A volte nella programmazione di cui abbiamo bisogno per eseguire alcune operazioni di base condizione. Per farlo ci sono stato controllo di comandi come \"Se\", \"If-else\" e \"Altra cosa-Se\". \n\nLa scrittura di modulo di comando «**Se**» ``linguacode\nse poi <condition>\n<operation>\n` E` qui tra i comandi «Se» e «poi» c'è una qualsiasi condizione, e dopo che da nuova linea e dopo **4 posti** è scritto di funzionamento (o di gestione), che sarà effettuato se l'affermazione è vera. \n\n#### Per esempio ``linguacode\na = 5\nb = 2\nse a > b allora\noutput(«a > b»)\n``",
        "conditionsCommandsIfElseTitle":"Comando \"If-Else\"",
        "conditionsCommandsIfElseContent":"In modo da sapere come utilizzare l'istruzione condizionale in programmi. Ora si discuterà il caso quando la condizione è falsa.\n\nForma scritta «**If-Else**» dichiarazione ``linguacode\nse poi <condition>\n<operation N1>\naltro\n<operation N2>\n` E` qui dopo il comando \"Se\" c'è un nuovo comando \"Altro\". E dalla nuova linea, dopo 4 spazi è scritto l'operazione, che sarà fatto, se la condizione è falsa.\n\n#### Per esempio ``linguacode\na = 5\nb = 10\nse a > b\noutput(«a > b»)\naltro\ndi uscita (b<»)\n``",
        "conditionsCommandsElseIfTitle":"Comando \"Altra Cosa-Se\"",
        "conditionsCommandsElseIfContent":"Abbiamo già discusso il comando che verrà eseguito in base a condizione di essere true o false. Ma a volte abbiamo bisogno di controllare più di una condizione nella stesso tempo. \n\nForma scritta \"**If-Else-If**\" dichiarazione``linguacode\nse poi <condition N1>\n<operation N1>\naltrimenti se <condition N2> poi\n<operation N2>\naltro\n<operation N3>\n` Qui dobbiamo controllare più di una condizione. In caso di \"Altro\" tipo di scrittura non ci può essere 1 o più \"Else-If\" tra i comandi \"Se\" e \"Altro\". \n\n#### Per esempio ``linguacode\na = 5\nb = 5\nse a > b allora\noutput(«a > b»)\naltra cosa se a < b allora\noutput («<b»)\naltro\noutput(«b == a»)\n``",
        "booleanTypesBooleanTitle":"Descrizione",
        "booleanTypesBooleanContent":"Sappiamo già come controllare le dichiarazioni e alcuni di essi possono essere *vero* (22 > 18) o false ** (16 > 18). A volte a causa della lunghezza della condizione di controllo di linea, diventa difficile leggere il codice sorgente. Qui viene in aiuto i valori booleani \n\n- ****vera e propria ``linguacode\ncondizione = true\nuscita(condizione) #vero\n`` \n\n- *false ***``linguacode\ncondizione = false\nuscita(condizione) #false\n` \"Qualsiasi confronto booleano noto che ci restituisce uno dei valori \n\nEsempio di *vero* confronto ``linguacode\ncondizione = 1 < 5\nuscita(condizione) # vero\n`` Esempio di false ** confronto ``linguacode\ncondizione = 10 < 5\nuscita(condizione) # false\n` E` così in condizione di comandi di controllo siamo in grado di utilizzare le variabili con i valori booleani. \n\n#### Per esempio ``linguacode\nuscita(«Scrivi un numero \"a\":»)\ndi ingresso(a)\n\nuscita(«Scrivi un numero \"b\":»)\ndi ingresso(b)\n\ncondizione1 = a > b\ncondition2 = a < b\n\nse la condizione1 poi\nrisultato = «a > b»\naltrimenti se condition2 poi\nrisultato = « < b»\naltro\nrisultato = «a == b»։\noutput(«Risultato: » + risultato)\n``",
        "booleanOperatorsComparisonTitle":"Gli operatori di confronto",
        "booleanOperatorsComparisonContent":"In condizione di comandi di controllo abbiamo già utilizzato i simboli del \"maggiore\" > e \"\" < gli operatori di confronto. Ma ora, qui, si possono utilizzare altri operatori a noi noti. \n\n- **>** il confronto dei valori numerici, in cui il primo è *#maggiore* rispetto alla seconda. Per esempio ``linguacode\ndi uscita(5 > 1) # vero\nuscita(1 > 5) # false\n`` \n\n- **>=** il confronto dei valori numerici, in cui il primo è *#maggiore o uguale a* il secondo. Per esempio ``linguacode\ndi uscita(5 >= 5) # vero\nuscita(1 >= 5) # false\n`` \n\n- **<** il confronto dei valori numerici, in cui il primo è *#* rispetto alla seconda. Per esempio ``linguacode\nuscita(1 < 5) # vero\ndi uscita(5 < 1) # false\n`` \n\n- **<=** il confronto dei valori numerici, in cui il primo è *#minore o uguale a* il secondo. Per esempio ``linguacode\nuscita(1 <= 5) # vero\ndi uscita(5 <= 1) # false\n`` \n\n- **==** il confronto numerico o di valori di testo, in cui il primo è *#è uguale a* il secondo. Per esempio ``linguacode\ndi uscita(5 == 5) # vero\ndi uscita(5 == 1) # false\noutput(«soldato» == «soldato») # vero\noutput(«Ciao» == «Helo») # false\n`` \n\n- **!=** confronta numerici o di testo i valori, in cui il primo è *#non è uguale a* il secondo. Per esempio ``linguacode\ndi uscita(5 != 1) # vero\ndi uscita(5 != 5) # false\noutput(«Ciao» != «Helo») # vero\noutput(«soldato» != «soldato») # false\n`` \n\n- **()** restituisce invertito il risultato di qualsiasi numerici o di testo di confronto. Per esempio ``linguacode\nuscita(non(1 > 5)) # vero\nuscita(non(5 == 5)) # false\nuscita(no(false)) # vero\nuscita(non(true)) # false\n``",
        "booleanOperatorsLogicalTitle":"Gli operatori booleani",
        "booleanOperatorsLogicalContent":"In modo da sapere come scrivere l'istruzione condizionale, ma spesso abbiamo bisogno di combinare una serie di condizioni, e basato su di esso eseguire alcune operazioni. La combinazione delle condizioni avviene mediante gli operatori booleani. \n\n- Il comando «**e**» unisce due condizioni in uno, che si chiama **** vera e propria, quando entrambe le condizioni sono ** e *vero*falso** quando almeno una delle condizioni è *falso*. Per esempio ``linguacode\ndi uscita(5 > 1 և 10 < 100) # vero\nin uscita(20 < 100 և 1 > 5) # false\n`` \n\n- Il comando «**o**» unisce due condizioni in uno, che si chiama **** vera e propria, quando almeno una delle condizioni è ** e *vero*falso** quando le due condizioni sono false**. Per esempio ``linguacode\ndi uscita(5 > 1 o 100 < 10) # vero\nin uscita(20 > 100 o 1 > 5) # false\n``",
        "booleanOperatorsExecutingPriorityTitle":"L'esecuzione di priorità",
        "booleanOperatorsExecutingPriorityContent":"Abbiamo imparato a combinare 2 condizioni, ma possono essere più di 2, basato sul contenuto del programma. In questo caso, le condizioni saranno combinati tra loro da *da sinistra a destra*, fino a formare una condizione.\n\n#### Per esempio ``linguacode\ndi uscita(5 < 1 և 1 < 7 o 1 >= 3 o 9 == 9)\n` questo è lo stesso come ``linguacode\nuscita(false և true o false o true)\n` facciamo un combinano **1** e **2** \"**falsi e veri**\" le condizioni in una․ ``linguacode\nuscita(falso o falso o vero)\n`allora **1+2** condizione con **3 ° * \"**falso o falso**\" ``linguacode\nuscita(false o true)\n`` e, infine,**1+2+3** condizione con **4 ° * \"**false o true**\"․ ``linguacode\nuscita(vero)\n`` E così combiniamo 4 condizioni. Siamo in grado di combinare ulteriori condizioni che modo. \n\nA volte abbiamo bisogno di cambiare sinistra a destra combinazione di priorità utilizzando le parentesi. \n\n#### Per esempio ``linguacode\ndi uscita(5 < 1 և (1 < 7 o (1 >= 3 o 9 == 9)))\n`` \n\nquesto è lo stesso come ``linguacode\nuscita(false և (true) o meno (false o true)))\n` facciamo un combinano **3 ° ** e **4 ° ** \"**false o true**\" le condizioni in uno ``linguacode\nuscita(false o (false o true))\n` ` **2** condizione con **3+4** condizione di essere \"**false o true**\" ``linguacode\nuscita(false և vero)\n`` e, infine, unire **1** condizione con **2+(3+4)**. Sarà \"**falsi e veri**\" ``linguacode\nuscita(false)\n` E così, abbiamo visto che il risultato è cambiato con la modifica combinazione di priorità."
      },
      "syntaxInfo":{
        "modalTitle":"Guida comando",
        "cheatSheetTitle":"Cheat sheet",
        "lesson":"Tutorial"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b> Hotkeys</b>",
      "undo":"Annulla azione",
      "redo":"Rifai",
      "selectAll":"Seleziona Tutto",
      "run":"Eseguire",
      "terminal":"Terminale"
    },
    "program":{
      "program":"Programma",
      "sourceCode":"Il codice sorgente",
      "functionArgumentSyntaxError":"Argomento della funzione errore di sintassi nella ${line} linea.",
      "undefinedVariable":"\"${variable}\" variabile non definita in ${line} linea.",
      "indentError":"Errore di spazio in ${line} linea.",
      "hackAttempt":"Hack tentativo. Il \"${ip}\" indirizzo ip è stato salvato nel nostro database.",
      "syntaxError":"Errore di sintassi",
      "timeout":"Compilare il timeout. Assicurarsi che il codice non ha loop infinito.",
      "true":"vero",
      "false":"falso",
      "NaN":"sconosciuto",
      "null":"sconosciuto",
      "Infinity":"infinity",
      "undefined":"undefined"
    },
    "programListGroup":{
      "programs":"Programmi"
    },
    "terminal":{
      "hotkeys":"<b> Hotkeys</b>",
      "undo":"Annulla azione",
      "redo":"Rifai",
      "selectAll":"Seleziona tutto",
      "terminal":"Terminale"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"Accedi"
    },
    "menuButton":{
      "settings":"Impostazioni",
      "logOut":"Sign out"
    }
  },
  "panels":{
    "header":{
      "title":"Casa"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"Utente non hanno tutti i programmi di sicurezza."
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"Non hai tutti i programmi di sicurezza.",
      "programNotFoundClickPartFirst":"Fare clic su",
      "programNotFoundClickPartSecond":"qui",
      "programNotFoundClickPartThird":"per creare un nuovo programma."
    },
    "loading":{
      "loading":"Il caricamento"
    }
  }
}