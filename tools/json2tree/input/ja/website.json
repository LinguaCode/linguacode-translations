{
  "blocks":{
    "controlPanelBlock":{
      "edit":"編集",
      "delete":"削除する"
    },
    "lovePanelBlock":{
      "like":"お気に入り",
      "liked":"好きだった",
      "star":"星",
      "starred":"スター付き"
    },
    "moreFromUserBlock":{
      "viewAll":"すべてを表示",
      "moreFromFirst":"より多く",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"並び替え",
      "recent":"最近の",
      "views":"表示:",
      "stars":"星",
      "likes":"いいね",
      "random":"おまかせ表示"
    },
    "shareBlock":{
      "link":"リンク:",
      "share":"シェア",
      "tweet":"つぶやく",
      "textTwitter":"プログラム\"${programTitle}\"${userName}のネットワークに接続しているLinguaCode${userPageLink}",
      "descriptionVK":"LinguaCodeはソーシャルコーディングプラットフォームに特別に設計された子どもが学習プログラミングと共にコードが母語の必要性を知ることの英語です。"
    },
    "userPrimaryInfoBlock":{
      "editProfile":"プロファイルの編集"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"加"
    }
  },
  "pages":{
    "errorPage":{
      "title":"エラー",
      "explanation":"申し訳は、重要なエラーが発生したこのページです。"
    },
    "landingPage":{
      "title":"LinguaCode:学習コーディング",
      "learningByCoding":"学習<span className=\"masthead--lora-italic\">by Coding</span>",
      "explanation":"した学習プログラミング符号化本的な省エネルギー-エネルギーの喜びとの生命、大声で笑ます。",
      "facebookSignIn":"サFacebook",
      "or":"または",
      "seeTheListOfPrograms":"リクエストの存在プログラム",
      "descriptionHead":"最新しい学習プログラミングします。",
      "descriptionBody":"LinguaCodeはソーシャルコーディングプラットフォームに特別に設計された子どもが学習プログラミングと共にコードが母語の必要性を知ることの英語です。",
      "advantagesHeadline":"LinguaCodeす<span className=\"u-emphasized\">learnよ</span>",
      "advantageTopFirstHeadline":"多言語",
      "advantageTopFirstDescription":"書プログラムを母語だけではありません。",
      "advantageTopSecondHeadline":"なんと無料です！",
      "advantageTopSecondDescription":"すべては無料です。",
      "advantageTopThirdHeadline":"クイックスタート",
      "advantageTopThirdDescription":"はじめに、多くのお考えの方に！",
      "advantageBottomFirstHeadline":"想像力",
      "advantageBottomFirstDescription":"う\"を作成す！",
      "advantageBottomSecondHeadline":"教育",
      "advantageBottomSecondDescription":"学習プログラミングなどの専門分野をリードしています。",
      "advantageBottomThirdHeadline":"地域",
      "advantageBottomThirdDescription":"共有プログラムの友人を見つ新しい友達ができました。",
      "joinText":"参加<span className=\"u-emphasized\">the community</span>の学習者",
      "facebookRegister":"今すぐ登録してくださいでは無料！"
    },
    "notFoundPage":{
      "title":"ページが見つかりませんで",
      "explanation":"申し訳ございません、あなたのページのようにビューが存在しません。",
      "descriptionPartFirst":"試乗",
      "descriptionPartSecond":"メインページ",
      "descriptionPartThird":"代わりにします。"
    },
    "programChangePage":{
      "titleOfEditPage":"編集の${userName}/${title}プログラム",
      "editProgramHeadline":"編集プログラム",
      "editProgramButton":"編集プログラム",
      "titleOfCreatePage":"新しいプログラム",
      "newProgramHeadline":"新しいプログラム",
      "submitProgramButton":"提出プログラム",
      "programContent":"プログラムを含むに関するあらゆる情報をコードします。",
      "name":"名称",
      "programNameForm":"も素晴らしいプログラム名を短く、印象に残るような<b>hello-world</b>ます。",
      "titleOfProgram":"タイトル",
      "description":"説明",
      "validationError":"バリデーションエラー",
      "errorTextForNameLength":"長さの<b>name</b>は0以上として32ではラテンのシンボルとダッシュします。",
      "errorTextForName":"この名前は、ソースが用意されております。",
      "errorTextForTitle":"長さの<b>title</b>は0以上と、それは128です。",
      "errorTextForDescription":"長さの<b>description</b>は0以上として5120ます。",
      "errorTextForSource":"長さの<b>source</b>は0以上として10240ます。"
    },
    "programs":{
      "title":"プログラム"
    },
    "settingsPage":{
      "title":"設定",
      "publicProfile":"公開プロフィール",
      "validationError":"バリデーションエラー",
      "username":"ユーザー名",
      "yourUsername":"ユーザー名",
      "usernameWasAlreadyUsed":"ユーザー名で利用",
      "usernameWasReserved":"ユーザー名した貸切",
      "usernameValidation":"長さの<b>username</b>することができそして24日には、小さいラテン文字の数です。",
      "name":"名称",
      "yourFirstNameAndLastName":"ご氏名",
      "nameValidation":"長さの<b>name</b>は0以上として24",
      "bio":"バイオ",
      "tellALittleAboutYourself":"えについて少しだ",
      "bioValidation":"長さの<b>bio</b>き、それは128です。",
      "country":"国",
      "select":"選択",
      "countryValidation":"のいずれかをご選択く国",
      "updateProfile":"更新概要"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"サインイン",
      "signInDescription":"の操作が可能になんです。"
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"いしたい削除はどうすればいいですか？",
      "answerYes":"あり",
      "answerNo":"no"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"出力",
        "outputNameValue":"``linguacode\n出力(X)\n``",
        "outputDescription":"印刷載のXの値の数字は、事業、テキストと変数に値します。 例えば、",
        "outputDescriptionValue":"``linguacode\n出力(4)#4\n出力(\"欠陥品なんでしょうか\")#欠陥品なんでしょうか\n出力(1+2)#3\n``",
        "inputName":"入力",
        "inputNameValue":"``linguacode\n入力(X)\n``",
        "inputDescription":"他の変数Xの値の宣言によるユーザーです。 例えば、",
        "inputDescriptionValue":"``linguacode\n入力(a)\n``",
        "ifElseStatementName":"確認書",
        "ifElseStatementNameValue":"``linguacode\nま<condition N1>し\n<operation N1>\nelse if<condition N2>し\n<operation N2>\nelse\n<operation N3>\n``",
        "ifElseStatementDescription":"業務に基づき実行された指定状態がtrueです。 例えば、",
        "ifElseStatementDescriptionValue":"``linguacode\na=5\nb=5\n場合、およびロータリエンコーダを\n出力(\"a>b\")\nelse if a<b\n出力(\"a<b\")\nelse\n出力(\"b==a\")#b==\n``",
        "loopForName":"限定繰り返し",
        "loopForNameValue":"``linguacode\n繰り返し回<N>\n<operation>\n``",
        "loopForDescription":"実行中のブロックをコードす。 例えば、",
        "loopForDescriptionValue":"``linguacode\n繰り返し10倍\n出力(\"欠陥品なんでしょうか\")\n``",
        "loopWhileDoName":"ループ\"ない\"",
        "loopWhileDoNameValue":"``linguacode\nが<condition>し\n<operation>\n``",
        "loopWhileDoDescription":"の\"Do\"ループの実行をブロックのコードと指定された条件がtrueになる。 例えば、",
        "loopWhileDoDescriptionValue":"``linguacode\na=1\n中<5その\n出力(a)\na=a+1\n``",
        "loopDoWhileName":"ループ\"\"",
        "loopDoWhileNameValue":"``linguacode\nい\n<operation>\nが<condition>\n``",
        "loopDoWhileDescription":"ループ\"はい\"を繰り返すことになりますのループとしての状態はtrueになります。 例えば、",
        "loopDoWhileDescriptionValue":"``linguacode\na=1\nい \n出力(a)\na=a+1\n中<5\n``",
        "piName":"pi数学定数",
        "piNameValue":"``linguacode\n出力（pi）\n``",
        "piDescription":"版画の数学的定数<b>pi</b>ます。 例えば、",
        "piDescriptionValue":"``linguacode\n出力（pi）#3.141592653589793\n``",
        "eNumberName":"e数学定数",
        "eNumberNameValue":"``linguacode\n出力(e)\n``",
        "eNumberDescription":"版画の数学的定数<b>e</b>ます。 例えば、",
        "eNumberDescriptionValue":"``linguacode\n出力(e)#2.718281828459045\n``",
        "sqrName":"スクエアの数",
        "sqrNameValue":"``linguacode\nsqr(X)\n``",
        "sqrDescription":"返スクエアの<b>X</b>番号を入力するユーザーです。 例えば、",
        "sqrDescriptionValue":"``linguacode\nX=5 \nY=sqr(X) \n出力(Y)#25\n``",
        "powName":"電源の数",
        "powNameValue":"``linguacode\npow(X,Y)\n``",
        "powDescription":"の値を返します<b>X</b>の<b>Y</b>ます。 例えば、",
        "powDescriptionValue":"``linguacode\nX=2 \nY=5 \nZ=pow(X,Y) \n出力(Z)#32\n``",
        "sqrtName":"平方根の番号",
        "sqrtNameValue":"``linguacode\nsqrt(X)\n``",
        "sqrtDescription":"を返します平方根の<b>X</b>番号を入力するユーザーです。 例えば、",
        "sqrtDescriptionValue":"``linguacode\nX=9 \nY=sqrt(X) \n出力(Y)#3\n``",
        "absName":"絶対値の数",
        "absNameValue":"``linguacode\nabs(X)\n``",
        "absDescription":"の絶対値を返しま<b>X</b>番号を入力するユーザーです。 例えば՝",
        "absDescriptionValue":"``linguacode\nX=-5 \nY=abs(X) \n出力(Y)#5\n``",
        "roundName":"丸め数",
        "roundNameValue":"``linguacode\nround(X)\n``",
        "roundDescription":"回る<b>X</b>数の整数値を返します。 例えば、",
        "roundDescriptionValue":"``linguacode\nX=2.3 \na=round(X) \n出力(a)#2\n``",
        "floorName":"階数",
        "floorNameValue":"``linguacode\n階(X)\n``",
        "floorDescription":"回る<b>X</b>数<b>downwards</b>最寄りの整数値を返します。 例えば、",
        "floorDescriptionValue":"``linguacode\nX=2.6 \na=floor(X) \n出力(a)#2\n``",
        "ceilName":"数ceil",
        "ceilNameValue":"``linguacode\nceil(X)\n``",
        "ceilDescription":"丸、<b>X</b>数<b>upwards</b>にもっとも近い整数値を返します",
        "ceilDescriptionValue":"``linguacode\nX=2.2 \na=ceil(X) \n出力(a)#3\n``",
        "sinName":"正弦",
        "sinNameValue":"``linguacode\nsin(X)\n``",
        "sinDescription":"の値を返しま<b>sine</b>の<b>X</b>ます。 例えば、",
        "sinDescriptionValue":"``linguacode\nX=sin(pi) \n出力(X)#0\n``",
        "cosName":"コサイン",
        "cosNameValue":"``linguacode\ncos(X)\n``",
        "cosDescription":"の値を返しま<b>cosine</b>の<b>X</b>ます。 例えば、",
        "cosDescriptionValue":"``linguacode\nX=cos(pi) \n出力(X)#-1\n``",
        "tanName":"接",
        "tanNameValue":"``linguacode\ntan(X)\n``",
        "tanDescription":"の値を返しま<b>tangent</b>の<b>X</b>ます。 例えば՝",
        "tanDescriptionValue":"``linguacode\nX=tan(pi) \n出力(X)#0\n``",
        "ctgName":"Cotangent",
        "ctgNameValue":"``linguacode\nctg(X)\n``",
        "ctgDescription":"の値を返しま<b>cotangent</b>の<b>X</b>ます。 例えば՝",
        "ctgDescriptionValue":"``linguacode\nX=ctg(pi/4) \n出力(X)#1\n``",
        "arcSinName":"Arcsine",
        "arcSinNameValue":"``linguacode\narcsin(X)\n``",
        "arcSinDescription":"値を返しますが、正弦を取得しますことを目的として実施し<b>X</b>ます。 例えば、",
        "arcSinDescriptionValue":"``linguacode\na=arcsin(1) \n出力(a)#pi/2 \n``",
        "arcCosName":"Arccosine",
        "arcCosNameValue":"``linguacode\narccos(X)\n``",
        "arcCosDescription":"値を返しますが、コサインを取得しますことを目的として実施し<b>X</b>ます。 例えば、",
        "arcCosDescriptionValue":"``linguacode\na=arccos(1) \n出力(a)#0\n``",
        "arcTanName":"Arctangent",
        "arcTanNameValue":"``linguacode\narctan(X)\n``",
        "arcTanDescription":"値を返しますが、接取得することを目的として実施し<b>X</b>ます。 例えば、",
        "arcTanDescriptionValue":"``linguacode\na=arctan(0) \n出力(a)#0\n``",
        "arcCtgName":"Arccotangent",
        "arcCtgNameValue":"``linguacode\narcctg(X)\n``",
        "arcCtgDescription":"値を返しますが、cotangentを取得しますことを目的として実施し<b>X</b>ます。 例えば、",
        "arcCtgDescriptionValue":"``linguacode\na=arcctg(1) \n出力(a)#pi/4\n``",
        "logName":"対数",
        "logNameValue":"``linguacode\nlog(X,Y)\n``",
        "logDescription":"の値を返します対数の<b>X</b>の拠点に<b>Y</b>ます。 例えば、",
        "logDescriptionValue":"``linguacode\na=log(3,27) \n出力(a)#3\n``",
        "lgName":"共通の対数値",
        "lgNameValue":"``linguacode\nlg(Y)\n``",
        "lgDescription":"の値を返します対数の<b>X</b>の拠点に<b>10</b>ます。 例えば、",
        "lgDescriptionValue":"``linguacode\na=lg(100) \n出力(a)#10\n``",
        "lnName":"自然対数",
        "lnNameValue":"``linguacode\nln(Y)\n``",
        "lnDescription":"の値を返します対数の<b>X</b>の拠点に<b>e</b>ます。 例えば、",
        "lnDescriptionValue":"``linguacode\na=ln(e) \n出力(a)#1\n``",
        "randomName":"乱数生成",
        "randomNameValue":"``linguacode\nランダム(X,[Y])\n``",
        "randomDescription":"パラメータ<b>Y</b>は、プログラムはランダムに生成し返却ランダムな整数からrange<b>[X;Y]</b>ます。 な<b>Y</b>パラメータの範囲が<b>[0;X]</b>ます。 例えば、",
        "randomDescriptionValueFirst":"``linguacode\nX=10 \na=ランダム(X)#[0;10]\n出力(a)#4 \n``",
        "randomDescriptionValueSecond":"``linguacode\nX=5 \nY=15 \na=ランダム(X,Y)#[5;15]\n出力(a)#12\n``"
      },
      "tutorials":{
        "intro":"導入",
        "output":"出力",
        "variables":"変数",
        "input":"入力",
        "operations":"業務",
        "conditions":"条件",
        "boolean":"Boolean",
        "languageAboutLanguageTitle":"言語",
        "languageAboutLanguageContent":"LinguaCodeが作成されたすべての方、忙しい女性のための習の基礎をより快適にします。 \nのことを学んでLinguaCodeでは欠かせない、知識の外国語や技術力を有している。 すべての必要なものは身に付け、デューディリジェンス。 \n\n#### 特徴:\n-*-多言語**\n-**マルチプラットフォーム**\n-**簡易なソースコード**\n-****\n",
        "languageFeaturesTitle":"言語機能",
        "languageFeaturesContent":"LinguaCodeはPython,PascalやJavaScript、理解しやすい簡単なソースコードの後についてのプログラミング言語になります。 \n\n**こちらも全ての基本的な概念を言語：**\n\n-**それぞれのコマンドラインから始まります。** \nソースコードよりシンプルで明らかにすることができてうれしいです。\n-**コマンドを使用することができ書きの両方の大文字と小文字を使用します。** \nで加速過程のプログラミングで優先に書くと小文字を使用します。\n-**テキスト書き込み可能とな引用符、アポストロフィです。** \n多くの国ではない引用符を使用から選択できる便利なバージョンです。\n-**テキストを書後のシンボル\"\\#\"とコメントを否定する人はほとんどいませんのソースコードです。** \nコメントを提供していたノートを取っているのを見ています。",
        "outputCommandDefinitionTitle":"コマンドで定義",
        "outputCommandDefinitionContent":"各プログラムは一部の業務に必要であることをお知らせください。います。 このような理由から、すべてのプログラミングシステムからテキスト出力を可能としますが、結果と呼ばれる**端子**です。 \n\nコマンド\"*出力*\"を使用したテキスト出力に出力します。 \n\n#### 例えば、 \nソースコード``linguacode\n出力(\"欠陥品なんでしょうか\")\n````末端\n欠陥品なんでしょうか\n``",
        "outputPossibleValuesTitle":"可能な値",
        "outputPossibleValuesContent":"コマンドを出力できる印刷テキスト、数字、数理業務および変数の値です。\n\n#### 例えば、 \nソースコード \n``linguacode\n出力(100)\n出力(5*25)\n````末端\n100\n125\n``",
        "variablesDeclaresAndAssignsTitle":"宣言と代入",
        "variablesDeclaresAndAssignsContent":"く必要がありま保存し、テキストの数と数値事業のどこかる目的での利用を設定することができます。 の容器まで保存できるので異なる値を\"変動することができた。 最初にしなければなファイル名をつけたいときの変数を割り当てる値を代入しています。 後でまとっても参考になろう値で呼び出しによる変数の名前です。 \n変数が保存されるランダム-アクセスメモリー（RAM）のコンピュータを使用した場合、変数は、コンピュータ値を返しますに対応する変数名からなる。\n#### た忘れてはならない重要なこと\n変数名 \n**1.** を含むことができ文字桁数 \n**2.** で始まる番号 \n**3.** できない含有スペース、記号演算\n#### 例えば、 \n印刷数**617** の代わりにこの \n``linguacode\n出力(617)\n``\nを書いてみまし\n``linguacode\nX=617\n出力(X)\n``\n結果\n`端末\n617\n`` \nやしていくために、どのような出力が同じ値で、書いてみまし \n``linguacode\nX=617\n出力(X)\n出力(X)\n出力(X)\n`` \n結果 \n`端末\n617\n617\n617\n``",
        "variablesPracticalUseTitle":"実用",
        "variablesPracticalUseContent":"としていま与の両方の数値、テキスト変数に値をセットします。 もらうために割り当ての変数値として割り当てることがありますか。 その場合すでに割り当て、既存の変数の一つです。\n#### 例えば、 \nソースコード\n``linguacode\na=1\nb=2\nc=a+b\n出力(c)\n`` \n結果\n`端末\n3\n``\n",
        "variablesMultipleUsesTitle":"複数の使用",
        "variablesMultipleUsesContent":"のあいだに変数をひとつ新規作成し、新たな価値です。 また、変更に割り当てられた値を変数です。 しながら不要な変数のソースコードがより簡単にすることができてうれしいです。\n#### 例えば、\nそし**100** リンゴの保存この価値**apple**可変となります。 のりりんごの減少による**5** 毎日です。 \nしなければな出力カウントのリンゴのそれぞれの日です。 \n\nソースコード\n``linguacode\napple=100\n出力(apple)\n\napple=apple-5#95\n出力(apple)\n\napple=apple-5#90\n出力(apple)\n\napple=apple-5#85\n出力(apple)\n`` \n結果\n`端末\n100\n95\n90\n85\n``",
        "inputCommandDefinitionTitle":"コマンドで定義",
        "inputCommandDefinitionContent":"プログラミングしても出力は、多くの場合入力データです。 る必要がありますが変数で任意の値です。 またも変更できるソースコード毎に割り当てる新しい価値の変動、その効果はないとのニーズもます。 \n\nその場合に使用しコマンド\"*入力*\"をつけています。 \n\nとここでは、簡単な例として、プログラムの出力のダブルの番号を入力するユーザーです。 ``linguacode\n入力（番号）\n出力（番号*2)\n``の実行後、このプログラムまでのシンボル\"**>**\"というプログラム開始していますの入力は不足データです。 入力後、他の番号を押す****しダブルの番号を入力します。 `端末\n>617\n1234\n`の主る必要がありますプログラミングができるように人々早くなんとかしないプログラミング",
        "inputWorkMechanismTitle":"作業機構",
        "inputWorkMechanismContent":"それでは、どのコマンドを入力します。 例えば、お客様から選ばれているプログラム``linguacode\n出力\"を入力してくださいcredentials:\")\n出力(\"Name:\")\n入力(名)\n出力（\"名:\")\n入力(姓)\n出力(\"Hi\"+名+\"\"+姓)\n``として出展参加しましたが6ラインプログラムです。 \n後に走行できるプログラムで働までライン3.``端子\nご入力ください資格:\n名前:\n>\n``を入力後、見逃したデータ、そして今、これまでライン5.``端子\nご入力ください資格:\n名前:\n>海洋\n姓:\n>\n``および最後の最後すぐにデータプログラムは作業終了です。``端子\nご入力ください資格:\n名前:\n>海洋\n姓:\n>Chamchyan\nHi、海Chamchyan\n``で見たこのコマンドのプログラムがその必要な入力データです。",
        "operationsArithmeticOperatorsTitle":"算術演算",
        "operationsArithmeticOperatorsContent":"にLinguaCodeで実現可能で単純な算術演算のような**+**, **-**, **\\***, **/**. \n\n例えばこのプログラムのすべての算術演算子と**1** -**2** 数字です。 ``linguacode\n出力(1+2)#3\n出力(1-2)#-1\n出力(1*2)#2\n出力(1/2)#0.5\n``#### た忘れてはならない重要なこと \nご存知のように数倍の変数を別の変数または番号を書き込み可能なシンボルの乗算を用意しています。 例えば、*7回X*書き込まれる**～7倍***X倍Y***XY**です。 \nがプログラミングで重要な書シンボルの乗算を用意しています。 例えば**7\\*X****X\\*Y**です。",
        "operationsExecutingPriorityTitle":"業務の実行優先度",
        "operationsExecutingPriorityContent":"両方の数学およびプログラミングがある場合本部又は増殖してまずいてしまい、追加または減算します。 \n\n#### 例えば``linguacode\nX=10 + 2 * 4 - 2\n#X=10 + 8 - 2\n#X=18-2\n#X=16\n`\"でも変更できま実行優先度を利用ブラケットです。 \n#### 例えば``linguacode\nX= (10 + 2) * (4 - 2)\n#X=12*(4-2)\n#X=12*2\n#X=24\n``プログラミングに利用できまブラケットであっても不要です。 \nでも間違いではなかな優先に書からはソースコードは、容易に理解することができる。",
        "operationsNumbersTitle":"番号",
        "operationsNumbersContent":"をしていただきます<a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">numbers</a>は数学的で使用されるオブジェクトをカウント、測定、ラベルです。 \nが5種類の数字です。 また対応をしているが、それらを除き複雑なnumbes \n-**自然数** **1**, **2**, ...``linguacode\n出力(7+4)#13\n`` \n-**整数値** ..., **-1**, **0**, **1**, ...``linguacode\n出力-6 * 5 + -3プロトタイプを作成し、-33\n`` \n-**有理数** **1/2**, **2/3**, **0.125**, ...``linguacode\n出力0.617 * 2 * 1000)#1234\n`` \n-**実数** **√2**, **1.62**, ...``linguacode\n出力(2/3+1/2)#1\n``",
        "operationsSumOfStringAndNumberTitle":"和の文字列と数字",
        "operationsSumOfStringAndNumberContent":"として出展参加しましたので追加ともにテキストを結線を組み合わせて一行します。 く必要がありまを線のありのまま使用する数値となります。 その場合でテキストの追加数には、結果の修正、テキストテキストとしてます。``linguacode\ntext=\"\"+365+\"日年\"\n#テキスト=\"が\"+\"365\"+\"日年\"\n#テキスト=\"365\"+\"日年\"\n#テキスト=\"365日年\"\n``#### た忘れてはならない重要なこと \n線までを追加するだけで動作します。 その他の業務の結果エラーになります。",
        "conditionsCommandsIfTitle":"コマンド\"の場合\"",
        "conditionsCommandsIfContent":"時にはプログラムを実行する必要は一部の業務に基づく条件です。 である条件の確認コマンドのような\"場\"では、\"If-else\"\"その場\"です。 \n\n書面のコマンド\"****\"``linguacode\nま<condition>し\n<operation>\n``ここにはコマンド\"の場合\"と\"その後\"であり、後で新しいライン以降**4空間**書(または業務）を行う場合には事実であります。 \n\n#### 例えば``linguacode\na=5\nb=2\n場合、およびロータリエンコーダを\n出力(\"a>b\")\n``",
        "conditionsCommandsIfElseTitle":"コマンド\"If-Else\"",
        "conditionsCommandsIfElseContent":"そのノウハウの利用条件文を生成プログラムです。 現を議論する場合の状態がfalseになります。\n\n執筆形態\"**If-Else**\"``linguacode\nま<condition>し\n<operation N1>\nelse\n<operation N2>\n`この後にコマンド\"の場合\"があり、新しいコマンド\"Else\"です。 からのいたるとき4の空間は、運転を行う場合、上記条件はfalseです。\n\n#### 例えば``linguacode\na=5\nb=10\n場合、およびロータリエンコーダ\n出力(\"a>b\")\nelse\n出力(\"b\")\n``",
        "conditionsCommandsElseIfTitle":"コマンドの\"その場\"",
        "conditionsCommandsElseIfContent":"いて議論するコマンドが実行されに基づく状態がtrueまたはfalseです。 も確認する必要がありま以上の条件も同時に行います。 \n\n執筆形態\"**If-Else-If**\"``linguacode\nま<condition N1>し\n<operation N1>\nelse if<condition N2>し\n<operation N2>\nelse\n<operation N3>\n``ことになります。 の場合は\"その場合は\"書きができる1以上の\"その場\"という記述とのコマンド\"If\"や\"Else\"です。 \n\n#### 例えば``linguacode\na=5\nb=5\n場合、およびロータリエンコーダを\n出力(\"a>b\")\nelse if a<b\n出力(\"a<b\")\nelse\n出力(\"b==a\")\n``",
        "booleanTypesBooleanTitle":"説明",
        "booleanTypesBooleanContent":"していましたかをチェック諸表したとのことです*true*(22>18)*false*(16>18ます。 時のための条件を確認で読みづらくなりますのソースコードです。 こちらがboolean型の値 \n\n-**true**``linguacode\n条件=true\n出力（条件なし）#true\n`` \n\n-**false**``linguacode\n条件=false\n出力（条件なし）#false\n``すboolean型の比較しか行われて返します一つの指定された値 \n\nExemple-true*比較``linguacode\n条件=1<5\n出力（条件なし）#true\n``Exemple-falseの場合*``linguacode\n条件=10<5\n出力（条件なし）#false\n`いただけるよう、状態の確認コマンドを使用できる変数をboolean値です。 \n\n#### 例えば``linguacode\n出力\"を書き番号は\"a\":\")\n入力(a)\n\n出力（\"書番号\"b\":\")\n入力(b)\n\n条件1=a>b\ncondition2=a<b\n\nif条件1を\nresult=\"a>b\"\nelse if condition2し\nresult=\"a<b\"\nelse\nresult=\"a==b\"։\n出力結果:\"+結)\n``",
        "booleanOperatorsComparisonTitle":"比較演算子",
        "booleanOperatorsComparisonContent":"条件の確認コマンドを使用しのシンボル\"以上\">\"以下\"<比較演算子です。 今まで使用その他の事業者に知られています。 \n\n-**>**比較の数値は、最初の一つは、*#より-第一つです。 例えば``linguacode\n出力(5>1)#true\n出力(1>5)#false\n`` \n\n-**>=**比較の数値は、最初の一つは、*#以上*の一つです。 例えば``linguacode\n出力(5>=5)#true\n出力(1>=5)#false\n`` \n\n-**<**比較の数値は、最初の一つは、*#を満*の一つです。 例えば``linguacode\n出力(1<5)#true\n出力(5<1)#false\n`` \n\n-**<=**比較の数値は、最初の一つは、*#以下*の一つです。 例えば``linguacode\n出力(1<=5)#true\n出力(5<=1)#false\n`` \n\n-**==**比較の数値またはテキスト値、最初の一つは、*#等*の一つです。 例えば``linguacode\n出力(5==5)#true\n出力(5==1)#false\n出力(\"兵士\"==\"兵士\")#true\n出力(\"Hello\"==\"Helo\")#false\n`` \n\n-**!=** 比較の数値またはテキスト値、最初の一つは、*#と等しくないのです。 例えば``linguacode\n出力(5!= 1)#true\n出力(5!= 5)#false\n出力(\"HelLo\"!= \"Helo\")#true\n出力(\"兵士\"!= \"兵士\")#false\n`` \n\n-**（**を返します逆に含まれる数値又は文章を比較します。 例えば``linguacode\n出力は(1>5))#true\n出力しない(5==5))#false\n出力((false))#true\n出力しない(true))#false\n``",
        "booleanOperatorsLogicalTitle":"論理演算子",
        "booleanOperatorsLogicalContent":"しか記載の条件式がしばしば必要がありまを組み合わせ条件、およびそれに基づく実行してます。 の組み合わせ条件によって論理演算子です。 \n\nコマンド\"****\"を組み合わせた条件の一つと呼ばれる**trueになるとの両方の条件-true***falseになると少なくとも一つの条件*false*ます。 例えば``linguacode\n出力(5>1և10<100)#true\n出力(20<100և1>5)#false\n`` \n\nコマンド\"****\"を組み合わせた条件の一つと呼ばれる**trueになると少なくとも一つの条件-true***falseになるとの条件をものと誤*ます。 例えば``linguacode\n出力(5>1または100<10)#true\n出力(20>100 1>5)#false\n``",
        "booleanOperatorsExecutingPriorityTitle":"実行優先度",
        "booleanOperatorsExecutingPriorityContent":"ま習を組み合わせる方法2条件が、より多くなる場合がありますの2に基づき、プログラムコンテンツです。 その場合、条件に合わせることでお互いから左*まな条件をつけます。\n\n#### 例えば``linguacode\n出力(5<1և1<7または1>=3または9==9)\n``ここでは``linguacode\n出力(false և trueまたはfalseまたはtrue)\n`\"let`s結合**1****2**\"**false true**\"条件․ ``linguacode\n出力(falseの場合はfalseまたはtrue)\n`のその後**1+2** 条件**3**\"**falseの場合はfalse**\"``linguacode\n出力(falseまたはtrue)\n``および最後に**1+2+3** 条件**4**\"**falseまたはtrue**\"․ ``linguacode\n出力(true)\n`されたのではないでしょうかそしてこの4つの条件の一つです。 できる組み合わせ条件にすることができてうれしいです。 \n\n時には変わらなければならない左右に組み合わせる事で優先度を利用ブラケットです。 \n\n#### 例えば``linguacode\n出力(5<1և(1<7(1>=3または9==9)))\n`` \n\nこのと同じ``linguacode\n出力(false և(trueまたはfalseまたはtrue)))\n`\"let`s結合**3****4**\"**falseまたはtrue**\"条件``linguacode\n出力は、偽(falseまたはtrue))\n`後で**2**条件**3+4** 状態が\"**falseまたはtrue**\"``linguacode\n出力(false և true)\n``および最後にしましょう合**1**条件**2+(3+4)**. ます\"**false true**\"``linguacode\n出力(false)\n`されたのではないでしょうかを目の当たりにしたこの結果は、あくまでも変更と変化する組み合わせます。"
      },
      "syntaxInfo":{
        "modalTitle":"コマンドガイド",
        "cheatSheetTitle":"チートシート",
        "lesson":"チュートリアル"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b>Hotkeys</b>",
      "undo":"元に戻す",
      "redo":"Redo",
      "selectAll":"すべて選択",
      "run":"走",
      "terminal":"端子"
    },
    "program":{
      "program":"プログラム",
      "sourceCode":"ソースコード",
      "functionArgumentSyntaxError":"関数の引数の構文エラー${line}ます。",
      "undefinedVariable":"\"${variable}\"変な定義され${line}ます。",
      "indentError":"スペースにエラー${line}ます。",
      "hackAttempt":"ハッキングすることができる。 \"${ip}\"ipアドレスに保存されたデータベースです。",
      "syntaxError":"文法エラー",
      "timeout":"コンパイルのタイムアウトします。 うコードな無限ループです。",
      "true":"true",
      "false":"false",
      "NaN":"不明",
      "null":"不明",
      "Infinity":"infinity",
      "undefined":"未定義"
    },
    "programListGroup":{
      "programs":"プログラム"
    },
    "terminal":{
      "hotkeys":"<b>Hotkeys</b>",
      "undo":"元に戻す",
      "redo":"Redo",
      "selectAll":"すべて選択",
      "terminal":"端子"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"サインイン"
    },
    "menuButton":{
      "settings":"設定",
      "logOut":"書き換わってしまう可能性もあり"
    }
  },
  "panels":{
    "header":{
      "title":"ホーム"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"ユーザーを持たないプログラムなのです。"
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"さんがいないプログラムなのです。",
      "programNotFoundClickPartFirst":"クリック",
      "programNotFoundClickPartSecond":"こちらの",
      "programNotFoundClickPartThird":"新しいプログラムです。"
    },
    "loading":{
      "loading":"荷重"
    }
  }
}