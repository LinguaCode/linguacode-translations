{
  "blocks":{
    "controlPanelBlock":{
      "edit":"편집",
      "delete":"삭제"
    },
    "lovePanelBlock":{
      "like":"아",
      "liked":"아",
      "star":"성급 호텔",
      "starred":"에 출연"
    },
    "moreFromUserBlock":{
      "viewAll":"모두 보기",
      "moreFromFirst":"에서 더",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"으로 정렬",
      "recent":"최근의",
      "views":"보",
      "stars":"Stars",
      "likes":"아",
      "random":"Random"
    },
    "shareBlock":{
      "link":"링크",
      "share":"공유",
      "tweet":"Tweet",
      "textTwitter":"\"프로그램 ${programTitle}\"${userName}#LinguaCode${userPageLink}",
      "descriptionVK":"LinguaCode 사회적 코딩 플랫폼은 아이들을 위해 특별히 설계,할 수 있는 프로그래밍을 배우고 자신을 공유하는 코드와 그들의 언어와의 필요성 없는니다."
    },
    "userPrimaryInfoBlock":{
      "editProfile":"프로필 편집"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"가"
    }
  },
  "pages":{
    "errorPage":{
      "title":"류",
      "explanation":"죄송하는 중대한 오류가 발생한에 이 페이지로 이동합니다."
    },
    "landingPage":{
      "title":"LinguaCode:학습하여 코딩",
      "learningByCoding":"학습 <span className=\"masthead--lora-italic\">by Coding</span>",
      "explanation":"우리는 우리들에게 학습 프로그래밍 및 부호 그래서 기쁨으로 가득 및 생활에,당신은 크게 웃음입니다.",
      "facebookSignIn":"Sign in with Facebook",
      "or":"나",
      "seeTheListOfPrograms":"의 목록을 참조하십시오 존재하는 프로그램",
      "descriptionHead":"최고 새로운 방법을 배우는 프로그램입니다.",
      "descriptionBody":"LinguaCode 사회적 코딩 플랫폼은 아이들을 위해 특별히 설계,할 수 있는 프로그래밍을 배우고 자신을 공유하는 코드와 그들의 언어와의 필요성 없는니다.",
      "advantagesHeadline":"LinguaCode 도움 당신은 <span className=\"u-emphasized\">learn 더 나은 </span>",
      "advantageTopFirstHeadline":"다국어 구사 가능",
      "advantageTopFirstDescription":"프로그램을 작성의 기본 언어,그리고 아닙니다.",
      "advantageTopSecondHeadline":"그것은 무료입니다!",
      "advantageTopSecondDescription":"모두 무료입니다.",
      "advantageTopThirdHeadline":"빠른 시작",
      "advantageTopThirdDescription":"시작은 당신이 생각하는 것보다 훨씬 쉽다!",
      "advantageBottomFirstHeadline":"상",
      "advantageBottomFirstDescription":"배우려고,만들 수 있습니다!",
      "advantageBottomSecondHeadline":"교육",
      "advantageBottomSecondDescription":"프로그래밍을 배울뿐만 아니라,다른 과목이다.",
      "advantageBottomThirdHeadline":"커뮤니티",
      "advantageBottomThirdDescription":"공유하는 친구와 함께 프로그램과 새로운 친구를 찾을 수 있습니다.",
      "joinText":"가입 <span className=\"u-emphasized\">the community</span> 의 학습자",
      "facebookRegister":"지금 등록하고,그것은 무료입니다!"
    },
    "notFoundPage":{
      "title":"페이지를 찾을 수 없습니다",
      "explanation":"죄송하지만 페이지를 보려고가 존재하지 않습니다.",
      "descriptionPartFirst":"도 제목",
      "descriptionPartSecond":"메인 페이지",
      "descriptionPartThird":"대신합니다."
    },
    "programChangePage":{
      "titleOfEditPage":"편집 ${userName}/${title} 프로그램",
      "editProgramHeadline":"편집 프로그램",
      "editProgramButton":"편집 프로그램",
      "titleOfCreatePage":"새로 생성 프로그램",
      "newProgramHeadline":"새로 생성 프로그램",
      "submitProgramButton":"제출 프로그램",
      "programContent":"프로그램에 대한 모든 정보가 포함되어 있습니다.",
      "name":"이름",
      "programNameForm":"좋은 프로그램의 이름은 짧고 기억하고,다음과 같 <b>hello-world</b> 니다.",
      "titleOfProgram":"제목",
      "description":"설명",
      "validationError":"유효성 검사 오류",
      "errorTextForNameLength":"의 길이 <b>name</b> 해 더 많은 0 보다 적은 다음 32,그것으로 구성되어야의 라틴어 기호 및 대시니다.",
      "errorTextForName":"이 이름의 원본은 이미 당신이 사용합니다.",
      "errorTextForTitle":"의 길이 <b>title</b> 해 더 많은 0 보다 적은 다음 128 니다.",
      "errorTextForDescription":"의 길이 <b>description</b> 해 더 많은 0 보다 적은 다음 5120 니다.",
      "errorTextForSource":"의 길이 <b>source</b> 해 더 많은 0 보다 적은 다음 10240 니다."
    },
    "programs":{
      "title":"프로그램"
    },
    "settingsPage":{
      "title":"설정",
      "publicProfile":"공개 프로필",
      "validationError":"유효성 검사 오류",
      "username":"사용자 이름",
      "yourUsername":"사용자 이름",
      "usernameWasAlreadyUsed":"사용자 이름은 이미 사용",
      "usernameWasReserved":"사용자 이름 예약",
      "usernameValidation":"의 길이 <b>username</b> 미만이어야 그런 다음 24 포함하는 작은 글자의 라고 번호.",
      "name":"이름",
      "yourFirstNameAndLastName":"귀하의 첫 번째 이름이며 마지막 이름",
      "nameValidation":"의 길이 <b>name</b> 해야 더 많은 0 보다 적은 후 24",
      "bio":"Bio",
      "tellALittleAboutYourself":"말 조금 자신에 대해",
      "bioValidation":"의 길이 <b>bio</b> 미만이어야 그런 다음 128 니다.",
      "country":"국가",
      "select":"선택",
      "countryValidation":"선택하의 국가",
      "updateProfile":"업데이트 프로파일"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"로그인",
      "signInDescription":"이 작업은 가능한 경우에만에 로그인합니다."
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"확신하고 싶은 프로그램을 삭제합니까?",
      "answerYes":"네",
      "answerNo":"no"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"출력",
        "outputNameValue":"``linguacode\n출력(X)\n``",
        "outputDescription":"모든 인쇄 X 값:숫자로,운영,텍스트와 변수의 값입니다. 예를 들어",
        "outputDescriptionValue":"``linguacode\n출력(4)#4\n출력(\"안녕하세요\")#안녕하세요\n출력(1+2)#3\n``",
        "inputName":"입력",
        "inputNameValue":"``linguacode\n입력(X)\n``",
        "inputDescription":"어떤 X 변수 값을 선언하여 사용자니다. 예를 들어",
        "inputDescriptionValue":"``linguacode\n입력(a)\n``",
        "ifElseStatementName":"문 검사",
        "ifElseStatementNameValue":"``linguacode\n는 경우 <condition N1> 다음\n<operation N1>\n다른 경우 <condition N2> 다음\n<operation N2>\n다른 사람\n<operation N3>\n``",
        "ifElseStatementDescription":"작업 실행됩니다에 따라 지정된 조건이 사실이다. 예를 들어",
        "ifElseStatementDescriptionValue":"``linguacode\na=5\nb=5\n는 경우는 a>b 다음\n출력(\">b\")\n다른 경우에는<b 다음\n출력(\"<b\")\n다른 사람\n출력(\"b==\")#b==\n``",
        "loopForName":"제한 반복",
        "loopForNameValue":"``linguacode\n반복 시간 <N>\n<operation>\n``",
        "loopForDescription":"실행하는 블록의 코드 번니다. 예를 들어",
        "loopForDescriptionValue":"``linguacode\n반복 10 회\n출력(\"안녕하세요\")\n``",
        "loopWhileDoName":"루프\"\"",
        "loopWhileDoNameValue":"``linguacode\n동 <condition> 다음\n<operation>\n``",
        "loopWhileDoDescription":"\"하지 않는 동안\"루프를 통해 실행되는 코드 블록으로 지정된 조건은 사실이다. 예를 들어",
        "loopWhileDoDescriptionValue":"``linguacode\na=1\n동<5 다음\n출력(a)\na=+1\n``",
        "loopDoWhileName":"루프\"\"",
        "loopDoWhileNameValue":"``linguacode\n마\n<operation>\n동 <condition>\n``",
        "loopDoWhileDescription":"반복\"하면서\"반복할 것이라는 조건은 사실이다. 예를 들어",
        "loopDoWhileDescriptionValue":"``linguacode\na=1\n마 \n출력(a)\na=+1\n동<5\n``",
        "piName":"파이 일정한 수학",
        "piNameValue":"``linguacode\n출력(pi)\n``",
        "piDescription":"인쇄 일정한 수학적 <b>pi</b> 니다. 예를 들어",
        "piDescriptionValue":"``linguacode\n출력(pi)#3.141592653589793\n``",
        "eNumberName":"전자 수정",
        "eNumberNameValue":"``linguacode\n출력(e)\n``",
        "eNumberDescription":"인쇄 일정한 수학적 <b>e</b> 니다. 예를 들어",
        "eNumberDescriptionValue":"``linguacode\n출력(e)#2.718281828459045\n``",
        "sqrName":"사각형의 수",
        "sqrNameValue":"``linguacode\n제곱(X)\n``",
        "sqrDescription":"반 스퀘어의 <b>X</b> 번호를 입력하여 사용자니다. 예를 들어",
        "sqrDescriptionValue":"``linguacode\nX=5 \nY=제곱(X) \n출력(Y)#25\n``",
        "powName":"전력의 수",
        "powNameValue":"``linguacode\npow(X,Y)\n``",
        "powDescription":"의 값을 반환합니다 <b>X</b> 의 힘 <b>Y</b> 니다. 예를 들어",
        "powDescriptionValue":"``linguacode\nX=2 \nY=5 \nZ=pow(X,Y) \n출력(Z)#32\n``",
        "sqrtName":"숫자의 제곱근을 구한",
        "sqrtNameValue":"``linguacode\nsqrt(X)\n``",
        "sqrtDescription":"익의 제곱근 <b>X</b> 번호를 입력하여 사용자니다. 예를 들어",
        "sqrtDescriptionValue":"``linguacode\nX=9 \nY=sqrt(X) \n출력(Y)#3\n``",
        "absName":"절대값의 번호",
        "absNameValue":"``linguacode\nabs(X)\n``",
        "absDescription":"절대값을 반환합니 <b>X</b> 번호를 입력하여 사용자니다. 예를 들어՝",
        "absDescriptionValue":"``linguacode\nX=-5 \nY=abs(X) \n출력(Y)#5\n``",
        "roundName":"수 반올림",
        "roundNameValue":"``linguacode\n라운드(X)\n``",
        "roundDescription":"라운드는 <b>X</b> 번호를 가장 가까운 정수 값을 반환합니다. 예를 들어",
        "roundDescriptionValue":"``linguacode\nX=2.3 \na=(X) \n출력(a)#2\n``",
        "floorName":"수 층",
        "floorNameValue":"``linguacode\n층(X)\n``",
        "floorDescription":"라운드는 <b>X</b> 수 <b>downwards</b> 가장 가까운 정수 값을 반환합니다. 예를 들어",
        "floorDescriptionValue":"``linguacode\nX=2.6 \na=(X) \n출력(a)#2\n``",
        "ceilName":"수 ceil",
        "ceilNameValue":"``linguacode\nceil(X)\n``",
        "ceilDescription":"라운드는 <b>X</b> 수 <b>upwards</b> 가장 가까운 곳에 정수 값을 반환합니다",
        "ceilDescriptionValue":"``linguacode\nX=2.2 \na=ceil(X) \n출력(a)#3\n``",
        "sinName":"인",
        "sinNameValue":"``linguacode\n죄(X)\n``",
        "sinDescription":"의 값을 반환합니다 <b>sine</b> 의 <b>X</b> 수니다. 예를 들어",
        "sinDescriptionValue":"``linguacode\nX=sin(pi) \n출력(X)#0\n``",
        "cosName":"코사인",
        "cosNameValue":"``linguacode\ncos(X)\n``",
        "cosDescription":"의 값을 반환합니다 <b>cosine</b> 의 <b>X</b> 수니다. 예를 들어",
        "cosDescriptionValue":"``linguacode\nX=cos(pi) \n출력(X)#-1\n``",
        "tanName":"Tangent",
        "tanNameValue":"``linguacode\n탄(X)\n``",
        "tanDescription":"의 값을 반환합니다 <b>tangent</b> 의 <b>X</b> 수니다. 예를 들어՝",
        "tanDescriptionValue":"``linguacode\nX=tan(pi) \n출력(X)#0\n``",
        "ctgName":"여접",
        "ctgNameValue":"``linguacode\nctg(X)\n``",
        "ctgDescription":"의 값을 반환합니다 <b>cotangent</b> 의 <b>X</b> 수니다. 예를 들어՝",
        "ctgDescriptionValue":"``linguacode\nX=ctg(pi/4) \n출력(X)#1\n``",
        "arcSinName":"아크사",
        "arcSinNameValue":"``linguacode\n벗어났습니다(X)\n``",
        "arcSinDescription":"값을 반환합니다 어디에 사인을 얻은 동일한 값으로 <b>X</b> 니다. 예를 들어",
        "arcSinDescriptionValue":"``linguacode\na=벗어났습니다(1) \n출력(a)#pi/2 \n``",
        "arcCosName":"아크코사인",
        "arcCosNameValue":"``linguacode\n운동 중에 몸에 착(X)\n``",
        "arcCosDescription":"값을 반환합니다 어디에 코사인과 동일한 값으로 <b>X</b> 니다. 예를 들어",
        "arcCosDescriptionValue":"``linguacode\na=운동 중에 몸에 착(1) \n출력(a)#0\n``",
        "arcTanName":"아크 탄젠트",
        "arcTanNameValue":"``linguacode\n에 작성한 리뷰(X)\n``",
        "arcTanDescription":"값을 반환하는 접점과 동일한 값으로 <b>X</b> 니다. 예를 들어",
        "arcTanDescriptionValue":"``linguacode\na=작성한 리뷰(0) \n출력(a)#0\n``",
        "arcCtgName":"Arccotangent",
        "arcCtgNameValue":"``linguacode\narcctg(X)\n``",
        "arcCtgDescription":"값을 반환하는 여접 가져와 동일한 값으로 <b>X</b> 니다. 예를 들어",
        "arcCtgDescriptionValue":"``linguacode\na=arcctg(1) \n출력(a)#pi/4\n``",
        "logName":"로그",
        "logNameValue":"``linguacode\n로그(X,Y)\n``",
        "logDescription":"의 값을 반환합니다 로그 <b>X</b> 기본 <b>Y</b> 니다. 예를 들어",
        "logDescriptionValue":"``linguacode\na=log(3,27) \n출력(a)#3\n``",
        "lgName":"일반적인 로그",
        "lgNameValue":"``linguacode\nlg 전자(Y)\n``",
        "lgDescription":"의 값을 반환합니다 로그 <b>X</b> 기본 <b>10</b> 니다. 예를 들어",
        "lgDescriptionValue":"``linguacode\na=lg 전자(100) \n출력(a)#10\n``",
        "lnName":"자연 로그",
        "lnNameValue":"``linguacode\nln(Y)\n``",
        "lnDescription":"의 값을 반환합니다 로그 <b>X</b> 기본 <b>e</b> 니다. 예를 들어",
        "lnDescriptionValue":"``linguacode\na=ln(e) \n출력(a)#1\n``",
        "randomName":"임의의 번호 생성",
        "randomNameValue":"``linguacode\n임의(X,[Y])\n``",
        "randomDescription":"는 경우에는 매개 변수 <b>Y</b> 는 주어진 프로그램을 임의로 생성 및 반환 임의의 정수 번호 range<b>[X;Y]</b> 니다. 그러나지 않고 <b>Y</b> 매개 변수가 될 것입니다 범위 <b>[0;X]</b> 니다. 예를 들어",
        "randomDescriptionValueFirst":"``linguacode\nX=10 \na=(X)#[0;10]\n출력(a)#4 \n``",
        "randomDescriptionValueSecond":"``linguacode\nX=5 \nY=15 \na=임의(X,Y)#[5;15]\n출력(a)#12\n``"
      },
      "tutorials":{
        "intro":"소개",
        "output":"출력",
        "variables":"변수",
        "input":"입력",
        "operations":"Operations",
        "conditions":"상 조건",
        "boolean":"Boolean",
        "languageAboutLanguageTitle":"에 대한 언어",
        "languageAboutLanguageContent":"LinguaCode 가 만든 모든 사람들을 위해,사람을 배우고 싶어 프로그래밍 기초에서 더 편안한 방법입니다. \n배우와 함께 LinguaCode 그것은 필수적인 지식의 외국어 또는 기술이다. 해 필요한 모든 것을 배우려고 성실한 자세를 견지한다. \n\n#### 기능:\n-**다국어 구사 가능**\n-**다중**\n-**간단 소스 코드**\n-****\n",
        "languageFeaturesTitle":"언어 기능",
        "languageFeaturesContent":"LinguaCode 기반으로 Python,파스칼 및 자바스크립트,그것을 이해하기 쉽고 간단 소스 코드를 다른 프로그래밍 언어가 더 빨라집니다. \n\n**여기에는 모두의 기본 개념 언어:**\n\n-**각 명령어에서 시작하는 새로운 라인합니다.** \n의 소스 코드를 더 간단 명료하는 방법입니다.\n-**명령을 쓸 수 있는 대문자와 소문자를 모두입니다.** \n그것을 가속화 과정을 프로그래밍이지만,그것은 기본적으로 쓰는 소문자입니다.\n-**텍스트 작성할 수 있습이 모두 따옴표,아포스트로피니다.** \n많은 국가에서 없에 따옴표를 사용,그래서 여기에 당신이 선택할 수 있습니다 편리한 버전에 대한 당신.\n-**텍스트 작성한 후\"\\#\"으로 간주됩 의견과는 아무런 영향을 미치지 않기에 작업의 소스 코드입니다.** \n의견을 제공해드립니다.",
        "outputCommandDefinitionTitle":"명령을 정의",
        "outputCommandDefinitionContent":"각 프로그램은 일부 작업해야 우리에게 보여 정보에 대한 결과입니다. 그는 왜 이 모든 프로그래밍 시스템은 텍스트 출력의 가능성과 장소에 우리가 볼 수있는 결과라고****니다. \n\n\"명령*출력*\"를 사용한 텍스트를 출력합니다. \n\n#### 예를 들어 \n소스 코드``linguacode\n출력(\"안녕하세요\")\n``결과``터미널\n안녕하세요\n``",
        "outputPossibleValuesTitle":"가능한 값",
        "outputPossibleValuesContent":"명령 출력을 인쇄할 수 있는 텍스트,숫자,수학 작업 및 변수 값입니다.\n\n#### 예를 들어 \n소스 코드 \n``linguacode\n출력(100)\n출력(5*25)\n``결과``터미널\n100\n125\n``",
        "variablesDeclaresAndAssignsTitle":"을 선언하고 할당",
        "variablesDeclaresAndAssignsContent":"종종 우리가 필요한 텍스트를 저장하고,숫자 및 숫자 작업이 어딘가에 목적으로 다시 사용하십시오. 컨테이너,어디서 절약할 수 있습니다 우리가 서로 다른 값을 호출*변수****니다. 처음에는 우리에게 이름을 지정한 다음 변수 값을 할당합니다. 그 후에 우리를 참조할 수 있습 값은 단순히 호출하여 변수의 이름입니다. \n변수를 저장하에서의 랜덤 액세스 메모리(RAM)의 컴퓨터를 사용하면 변수,컴퓨터 값을 반환합니다 해당하는 변수 이름에서 RAM.\n#### 중요한 기억하기\n변수 이름 \n**1.** 포함할 수 있는 문자나 기호,숫자 \n**2.** 시작할 수 없습니다 숫자 \n**3.** 을 포함할 수 없습 공간과 기호의 연산\n#### 예를 들어 \n인쇄를 위한 번호**617** 대신 이 \n``linguacode\n출력(617)\n``\n우리는 쓸 것입니다\n``linguacode\nX=617\n출력(X)\n``\n결과\n``터미널\n617\n`` \n그리고 우리는 출력하려면 같은 값을 세 시대,우리는 쓸 것입니다 \n``linguacode\nX=617\n출력(X)\n출력(X)\n출력(X)\n`` \n결과 \n``터미널\n617\n617\n617\n``",
        "variablesPracticalUseTitle":"실용적인 사용법",
        "variablesPracticalUseContent":"우리는 우리가 지정할 수 있습니다 모두 숫자와 텍스트 값을 변수입니다. 하지만 종종 우리가 해야 할당하는 변수에 어떤 가치되었다 할당된 다른 중 하나입니다. 이 경우 우리는 할당할 수 있는 기존의 변수를 새로운 중 하나입니다.\n#### 예를 들어 \n소스 코드\n``linguacode\na=1\nb=2\nc=a+b\n출력(c)\n`` \n결과\n``터미널\n3\n``\n",
        "variablesMultipleUsesTitle":"여러 사용",
        "variablesMultipleUsesContent":"없어 새로운 변수를 만들에 대한 새로운 가치마니다. 우리는 또한 값을 변경 할당된 변수다. 우리는 것입을 피하에서 불필요한 변수하고 소스 코드는 것이 더 간단하는 방법입니다.\n#### 예를 들어\n가정하자는 우리가**100** 사과와 이 값**apple**변수입니다. 사과의 수소에 의해**5** 매일습니다. \n우리는 출력의 수에 대한 사과 매일습니다. \n\n소스 코드\n``linguacode\napple=100\n출력(애플)\n\napple=apple-5#95\n출력(애플)\n\napple=apple-5#90\n출력(애플)\n\napple=apple-5#85\n출력(애플)\n`` \n결과\n``터미널\n100\n95\n90\n85\n``",
        "inputCommandDefinitionTitle":"명령을 정의",
        "inputCommandDefinitionContent":"프로그램에서 우리가 모두 필요합을 출력하고 많은 경우에 데이터를 입력합니다. 우리가 그것을 필요로 할 때 변수를 받을 수 있는 어떤 가치입니다. 우리는 또한을 변경할 수 있는 소스 코드 모든 시간을 할당하는 새로운 값을 변수이지만,그것은 효과적이고 필요 너무 오랜 시간이다. \n\n이 경우에는 우리가 사용하는\"명령*입력*\". \n\n그리고 여기에 간단한 예제 프로그램의 출력의 이중 숫자 입력의 사용자니다. ``linguacode\n입력(숫자)\n출력(*2)\n``후 실행하는 이 프로그램 우리는 기호를 참조하십시오\"**>**\"의미하는 프로그램은 시작되고 우리는 입력 할 필요가 없는 데이터입니다. 후에 입력하는 숫자를 누른*****우리는 볼 것이 이중의 입력된 번호입니다. ``터미널\n>617\n1234\n``로 작성해야 하는 프로그램을 사용할 수 있는 사람이 알지도 못하는 프로그래밍입니다.",
        "inputWorkMechanismTitle":"작동 메커니즘",
        "inputWorkMechanismContent":"이제 우리가 어떻게 명령을 입력 작동합니다. 예를 들어 우리는 이 프로그램``linguacode\n출력(\"기 자격 증명을 입력하십시오:\")\n출력(\"Name:\")\n입력(이름)\n출력(\"성:\")\n입력(성)\n출력(\"안녕\"+name+\"\"+성)\n``으로 우리는 볼 수 있는 6 개선에서 우리의 프로그램입니다. \n실행 한 후 그것을 우리가 볼 수 있는 프로그램 일까지 line3 니다.``터미\n입력해 주세요격:\n이름:\n>\n``을 입력한 후 누락된 데이터를,우리는 지금까지 선 5.``터미\n입력해 주세요격:\n이름:\n>해양\n성:\n>\n`마지막으로 입력한 후에 마지막 엉망 데이터가 프로그램을 작동하고 종료한다.``터미\n입력해 주세요격:\n이름:\n>해양\n성:\n>Chamchyan\n안녕하세요,해양 Chamchyan\n`그래서 우리가 보는 이 명령과 함께 프로그램이 작동하는 부분이 필요한 부분을 누락된 데이터를 입력합니다.",
        "operationsArithmeticOperatorsTitle":"연산",
        "operationsArithmeticOperatorsContent":"에 LinguaCode 그것을 구현할 수 있는 간단한 연산과 같은 작업**+**, **-**, **\\***, **/**. \n\n예를 들어,이 프로그램 하에 모든 연산자와**1** 고**2** 숫자입니다. ``linguacode\n출력(1+2)#3\n출력(1-2)#-1\n출력(1*2)#2\n출력(1/2)#0.5\n``#### 중요한 기억하기 \n으로 우리가 알고 있는 수학의 곱셈 변수와 다른 변수는 수없이 작성의 상징이 있습니다. 예를 들어*7 번 X*에 기록됩**7X***간 X Y*****XY**니다. \n하지만 프로그래밍에 그것을 쓰는 것이 중요하의 상징이 있습니다. 예를 들어**7\\*X**,**X\\*Y**니다.",
        "operationsExecutingPriorityTitle":"작업 실행하는 우선권",
        "operationsExecutingPriorityContent":"모두에서 수학과에서 프로그래밍이 있는 경우에는 부서 또는 곱,우리는 첫번째로 그들과 후에 우리는 더하기 및 빼기합니다. \n\n#### 예를 들어``linguacode\nX=10 + 2 * 4 - 2\n#X=10 + 8 - 2\n#X=18-2\n#X=16\n``그러나 우리는 변화할 수 있는 실행하는 우선 순위를 사용하여 브래킷이다. \n#### 예를 들어``linguacode\nX= (10 + 2) * (4 - 2)\n#X=12*(4-2)\n#X=12*2\n#X=24\n``프로그램에서 우리가 사용할 수 있습니다 괄호는 경우에도 그들이 불필요합니다. \n그것이 잘못되지 않습니다 그러나 그것의 기본을 쓰는 간단하고 명확한 소스 코드는 것이 쉽게 이해할 수 있습니다.",
        "operationsNumbersTitle":"번호",
        "operationsNumbersContent":"으로 우리가 알고 있 <a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">numbers</a> 는 수학적인 개체를 계산하는 데 사용되는,측정 및 라벨습니다. \n에 있는 5 종류의 숫자가 있습니다. 우리가 다룰 것이다 그들 모두는 제외한 복잡한 numbes \n-**천연 번호** **1**, **2**, ...``linguacode\n출력(7+4)#13\n`` \n-**정수 번호** ..., **-1**, **0**, **1**, ...``linguacode\n출력(-6 * 5 + -3 다)#-33\n`` \n-**합리적인 번호** **1/2**, **2/3**, **0.125**, ...``linguacode\n출력(0.617 * 2 * 1000 다)#1234\n`` \n-**부 번호** **√2**, **1.62**, ...``linguacode\n출력(2/3+1/2)#1\n``",
        "operationsSumOfStringAndNumberTitle":"합의 문자열과 숫자",
        "operationsSumOfStringAndNumberContent":"으로 우리가 보는 것이 가능하고 추가 숫자와 텍스트,서로에서의 결과 라인이 결합니다. 하지만 종종 우리가 필요한 라인을 얻을 수있는,사용됩니다 숫자 값입니다. 이 경우에는 그것이 가능한 텍스트를 추가할 수있는 결과를 수정 및 결합된 텍스트와 텍스트로입니다.``linguacode\ntext=\"\"+365+\"일년\"\n#text=\"\"+\"365\"+\"일년\"\n#text=\"365\"+\"일년\"\n#text=\"365 일년\"\n``#### 중요한 기억하기 \n라인 할 수 있는 우리에만 추가하는 작업입니다. 을 하는 동안 다른 작업이 결과에 오류가 있습니다.",
        "conditionsCommandsIfTitle":"명령은\"만약\"",
        "conditionsCommandsIfContent":"때로는 프로그램에서 우리가 필요한 일부를 실행하는 작업에 기반한 상태입니다. 그것이 있는 상태를 확인하는 명령과 같은 경우\"\",\"는 경우-다른 사람이\"그리고\"다른 경우\"니다. \n\n작성 양식의 명령\"는 경우******\"``linguacode\n는 경우 <condition> 다음\n<operation>\n`여기`명령 사이에\"만약\"그리고\"다음\"거기에 어떤 조건,그리고 그 후에서 새로운 라인과 이후**4 실**이 쓴 작업(또는 작업)을 수행됩니다면 문이 사실이다. \n\n#### 예를 들어``linguacode\na=5\nb=2\n는 경우는 a>b 다음\n출력(\">b\")\n``",
        "conditionsCommandsIfElseTitle":"\"명령하는 경우-다른 사람\"",
        "conditionsCommandsIfElseContent":"그래서 우리가 사용하는 방법을 알아 조건문에 프로그램입니다. 이제 우리는 우리가 논의하는 경우의 조건이 거짓입니다.\n\n쓰의 양식\"**는 경우-다른**\"문``linguacode\n는 경우 <condition> 다음\n<operation N1>\n다른 사람\n<operation N2>\n``여기 후 명령은\"만약\"이은 새로운 명령입니다\"다른\"니다. 에서 새로운 라인,후에는 4 개의 공간은 작업이 수행됩니다,만약 언급한 조건이 거짓입니다.\n\n#### 예를 들어``linguacode\na=5\nb=10\n는 경우는 a>b\n출력(\">b\")\n다른 사람\n출력(\"b<\")\n``",
        "conditionsCommandsElseIfTitle":"명령은\"다른 사람-면\"",
        "conditionsCommandsElseIfContent":"우리는 이미 논의하는 명령이 될 것입니다에 따라 실행되는 조건이 true 이거나 false 입니다. 그러나 때때로 우리는 확인해야 하나 이상의 상태에서 동일한 시간입니다. \n\n쓰의 양식\"**는 경우-다른 사람-는 경우**\"문``linguacode\n는 경우 <condition N1> 다음\n<operation N1>\n다른 경우 <condition N2> 다음\n<operation N2>\n다른 사람\n<operation N3>\n`여기서 우리는 확인해야 하나 이상의 조건입니다. 의 경우에는\"다른 사람-면\"쓰기 형태가 될 수 있다 1 또는 그 이상의\"다른 경우에\"사이의 문을 명령은\"만약\"그리고\"다른\"니다. \n\n#### 예를 들어``linguacode\na=5\nb=5\n는 경우는 a>b 다음\n출력(\">b\")\n다른 경우에는<b 다음\n출력(\"<b\")\n다른 사람\n출력(\"b==\")\n``",
        "booleanTypesBooleanTitle":"설명",
        "booleanTypesBooleanContent":"우리는 이미 알고있는 방법을 확인하는 문과 그들 중 일부는 할 수 있습니다.*(22>18)*false*(16>18). 기 때문에 때로는 길이의 조건의 확인 라인은,그것을 어렵게 된 소스 코드를 읽습니다. 여기에 오는 도움말 부울 값 \n\n-****``linguacode\n상태=true\n출력을(상태)#true\n`` \n\n-**false**``linguacode\n상태=false\n출력을(상태)#false\n``어떤 부울의 비교 우리에게 알려진 중 하나를 반환합니다 주어진 값 \n\nExemple 의**비교``linguacode\n상태=1<5\n출력을(상태)#true\n``Exemple*false*비교``linguacode\n상태=10<5\n출력을(상태)#false\n`그럼에서의 상태를 확인하는 명령을 우리가 사용할 수 있는 변수로는 부울 값입니다. \n\n#### 예를 들어``linguacode\n출력(\"쓸수\"a\":\")\n입력(a)\n\n출력(\"쓸 수\"b\":\")\n입력(b)\n\n조건 1=>b\n조건 2=a<b\n\n는 경우 다음 조건 1\n결과=\"a>b\"\n다른 경우 다음 조건 2\n결과=\"<b\"\n다른 사람\n결과=\"==b\"։\n출력(\"결과:\"+결과)\n``",
        "booleanOperatorsComparisonTitle":"비교 연산자",
        "booleanOperatorsComparisonContent":"에 상태를 확인하는 명령을 우리는 이미 사용하는 기호의\"보다\">\"보다는\"<비교 연산자입니다. 그러나 지금 여기서 우리는 다른 사용할 수 있습니다 운영자는 우리에게 알려져 있습니다. \n\n-**>**비교 숫자 값에서는 첫 번째 중 하나입니다*#큰*보다는 두 번째 중 하나입니다. 예를 들어``linguacode\n출력(5>1)#true\n출력(1>5)#false\n`` \n\n-**>=**비교 숫자 값에서는 첫 번째 중 하나입니다*#크거나 같음*두 번째 중 하나입니다. 예를 들어``linguacode\n출력(5>=5)#true\n출력(1>=5)#false\n`` \n\n-**<**비교 숫자 값에서는 첫 번째 중 하나입니다*#덜*보다는 두 번째 중 하나입니다. 예를 들어``linguacode\n출력(1<5)#true\n출력(5<1)#false\n`` \n\n-**<=**비교 숫자 값에서는 첫 번째 중 하나입니다*#작거나 같음*두 번째 중 하나입니다. 예를 들어``linguacode\n출력(1<=5)#true\n출력(5<=1)#false\n`` \n\n-**==**비교 숫자 또는 문자 값에서는 첫 번째 중 하나입니다*#동일*두 번째 중 하나입니다. 예를 들어``linguacode\n출력(5==5)#true\n출력(5==1)#false\n출력(\"군인\"==\"\"군인)#true\n출력(\"Hello\"==\"힐로\")#false\n`` \n\n-**!=** 비교 숫자 또는 문자 값에서는 첫 번째 중 하나입니다*#같지 않음*두 번째 중 하나입니다. 예를 들어``linguacode\n출력(5!= 1)#true\n출력(5!= 5)#false\n출력(\"HelLo\"!= \"힐로\")#true\n출력(\"군인\"!= \"군인\")#false\n`` \n\n-**()**반환 반전의 결과는 어떠한 숫자 또는 텍스트는 비교입니다. 예를 들어``linguacode\n출력((1>5))#true\n출력((5==5))#false\n출력((false))#true\n출력((true))#false\n``",
        "booleanOperatorsLogicalTitle":"Boolean 자",
        "booleanOperatorsLogicalContent":"그래서 우리가 알고 있을 쓰는 방법이 어떤 조건문,하지만 종종 우리가 결합해야 다수의 조건 중 하나에,그것을 기반으로 실행 작동하는 경우도 있습니다. 의 결합한 조건으로 boolean 연산자입니다. \n\n-명령\"****\"결합한 두 가지 조건에 하나라고 하는****때 두 가지 조건이 모두****false**때에는 적어도 하나의 조건*false*니다. 예를 들어``linguacode\n출력(5>1և10<100)#true\n출력(20<100և1>5)#false\n`` \n\n-명령\"****\"결합한 두 가지 조건에 하나라고 하는****때에는 적어도 하나의 조건****false**때 두 가지 조건*false*니다. 예를 들어``linguacode\n출력(5>1 또는 100<10)#true\n출력(20>100 1>5)#false\n``",
        "booleanOperatorsExecutingPriorityTitle":"실행하는 우선권",
        "booleanOperatorsExecutingPriorityContent":"우리가 배운 것을 결합하는 방법 2 조건은,그러나 그들은 더 이상 2,프로그램에 기초한 콘텐츠입니다. 이 경우에는 조건은 서로 결합부터*오른쪽에서 왼쪽으로*,그들이 형성 할 때까지 한 가지 조건이 있습니다.\n\n#### 예를 들어``linguacode\n출력(5<1և1<7 나 1>=3 9==9)\n`이것은 동일하다``linguacode\n출력(false և 사실 또는 허위 또는 사실)\n``의 결합**1th****2th**\"**거짓과 진실**\"조건에서는 한․ ``linguacode\n출력(허위로 기재하였거나 허위 또는 사실)\n``다음**1+2** 상태**3**될 것입니다\"**허위로 기재하였거나 허위**\"``linguacode\n출력(참 또는 거짓)\n`마지막으로**1+2+3** 상태**4**될 것입니다\"**참 또는 거짓**\"․ ``linguacode\n출력(true)\n`그래서 우리는 결 4 조건에 하나입니다. 우리는 결합할 수 있는 조건을 더하는 방법입니다. \n\n때때로 우리는 필요한 변경을 오른쪽 왼쪽 우선 순위를 결합을 사용하여 브래킷이다. \n\n#### 예를 들어``linguacode\n출력(5<1և(1<7(1>=3 9==9)))\n`` \n\n이와 같은``linguacode\n출력(false և(true 또는(참 또는 거짓)))\n``의 결합**3****4**\"**참 또는 거짓**\"조건`하나에`linguacode\n출력(또는 거짓(false true))\n``후 그것**2th**조건**3+4** 상태가 될 것\"**참 또는 거짓**\"``linguacode\n출력(false և true)\n`마지막으로 결합하겠**1th**조건**2+(3+4)**. 그것은 것입니다\"**거짓과 진실**\"``linguacode\n출력(false)\n`그래서,우리는 우리가 보았다는 결과는 변경되었으로 변하고 우선 순위를 결합니다."
      },
      "syntaxInfo":{
        "modalTitle":"명령 가이드",
        "cheatSheetTitle":"트",
        "lesson":"튜토리얼"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b>Hotkeys</b>",
      "undo":"취소",
      "redo":"다시 실행",
      "selectAll":"모두 선택",
      "run":"실행",
      "terminal":"터미"
    },
    "program":{
      "program":"프로그램",
      "sourceCode":"소스 코드",
      "functionArgumentSyntaxError":"함수에 구문 오류가 ${line} 라인입니다.",
      "undefinedVariable":"\"${variable}\"변하지 않았에서 정의 ${line} 라인입니다.",
      "indentError":"공간에서 오류 ${line} 라인입니다.",
      "hackAttempt":"해킹 시도합니다. \"${ip}\"ip 주소에 저장하고 우리의 데이터베이스입니다.",
      "syntaxError":"구문 오류",
      "timeout":"컴파일 시간 제한합니다. 는지 확인하는 코드가 있지 않는 무한 반복합니다.",
      "true":"true",
      "false":"false",
      "NaN":"알 수 없음",
      "null":"알 수 없음",
      "Infinity":"인피니티",
      "undefined":"undefined"
    },
    "programListGroup":{
      "programs":"프로그램"
    },
    "terminal":{
      "hotkeys":"<b>Hotkeys</b>",
      "undo":"취소",
      "redo":"다시 실행",
      "selectAll":"모두 선택",
      "terminal":"터미"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"로그인"
    },
    "menuButton":{
      "settings":"설정",
      "logOut":"로그아웃"
    }
  },
  "panels":{
    "header":{
      "title":"홈"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"이 없는 사용자의 모든 프로그램이 아니다."
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"당신 없 프로그램이 아니다.",
      "programNotFoundClickPartFirst":"클릭",
      "programNotFoundClickPartSecond":"기",
      "programNotFoundClickPartThird":"을 새로 생성 프로그램입니다."
    },
    "loading":{
      "loading":"로드"
    }
  }
}