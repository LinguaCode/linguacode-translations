{
  "blocks":{
    "controlPanelBlock":{
      "edit":"Redigere",
      "delete":"Slett"
    },
    "lovePanelBlock":{
      "like":"Liker",
      "liked":"Likte",
      "star":"Star",
      "starred":"Stjerne"
    },
    "moreFromUserBlock":{
      "viewAll":"Vis alle",
      "moreFromFirst":"Mer fra",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"Sorter etter",
      "recent":"Siste",
      "views":"Utsikt",
      "stars":"Stjerner",
      "likes":"Liker",
      "random":"Tilfeldig"
    },
    "shareBlock":{
      "link":"Lenke",
      "share":"Dele",
      "tweet":"Tweet",
      "textTwitter":"Programmet \"${programTitle}\" av ${userName} på #LinguaCode ${userPageLink}",
      "descriptionVK":"LinguaCode er en sosial koding plattform og er designet spesielt for barn, der de kan lære programmering og dele sine koder med deres eget språk og uten nødvendigheten av å vite engelsk."
    },
    "userPrimaryInfoBlock":{
      "editProfile":"Rediger profil"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"Sluttet på"
    }
  },
  "pages":{
    "errorPage":{
      "title":"Feil",
      "explanation":"Beklager, en kritisk feil har oppstått på denne siden."
    },
    "landingPage":{
      "title":"LinguaCode: Læring av Koding",
      "learningByCoding":"Læring <span className=\"masthead--lora-italic\">by Coding</span>",
      "explanation":"Vi gjør læring programmering og koding så full av glede og liv, du kommer til å le høyt.",
      "facebookSignIn":"Logg inn med Facebook",
      "or":"eller",
      "seeTheListOfPrograms":"Se listen av eksisterende programmer",
      "descriptionHead":"Den beste nye måten å lære programmering.",
      "descriptionBody":"LinguaCode er en sosial koding plattform og er designet spesielt for barn, der de kan lære programmering og dele sine koder med deres eget språk og uten nødvendigheten av å vite engelsk.",
      "advantagesHeadline":"LinguaCode hjelper deg <span className=\"u-emphasized\">learn bedre </span>",
      "advantageTopFirstHeadline":"Multilingual",
      "advantageTopFirstDescription":"Skrive programmer på ditt eget språk, og ikke bare.",
      "advantageTopSecondHeadline":"Det er gratis!",
      "advantageTopSecondDescription":"Alt er gratis.",
      "advantageTopThirdHeadline":"Rask start",
      "advantageTopThirdDescription":"Komme i gang er mye enklere enn du tror!",
      "advantageBottomFirstHeadline":"Fantasi",
      "advantageBottomFirstDescription":"Lærer, prøver, Lage!",
      "advantageBottomSecondHeadline":"Utdanning",
      "advantageBottomSecondDescription":"Lære programmering, samt andre fag.",
      "advantageBottomThirdHeadline":"Samfunnet",
      "advantageBottomThirdDescription":"Dele programmene dine med venner og finne nye venner.",
      "joinText":"Bli med å <span className=\"u-emphasized\">the community</span> av elever",
      "facebookRegister":"Registrer deg nå, det er GRATIS!"
    },
    "notFoundPage":{
      "title":"Side Ikke Funnet",
      "explanation":"Beklager, men siden du forsøkte å vise eksisterer ikke.",
      "descriptionPartFirst":"Prøv på vei til",
      "descriptionPartSecond":"hovedsiden",
      "descriptionPartThird":"i stedet."
    },
    "programChangePage":{
      "titleOfEditPage":"Redigere ${userName}/${title} program",
      "editProgramHeadline":"Redigere et program",
      "editProgramButton":"Rediger Program",
      "titleOfCreatePage":"Opprette et nytt program",
      "newProgramHeadline":"Opprette et nytt program",
      "submitProgramButton":"Send Program",
      "programContent":"Et program inneholder all informasjon om din kode.",
      "name":"Navn",
      "programNameForm":"Flott program navn er kort og minneverdig, som <b>hello-world</b>.",
      "titleOfProgram":"Tittel",
      "description":"Beskrivelse",
      "validationError":"Validering feil",
      "errorTextForNameLength":"Lengden på <b>name</b> bør mer enn 0 og mindre enn 32, den skal bestå av latin-symboler og bindestrek.",
      "errorTextForName":"Dette navnet på kilden er allerede brukt av deg.",
      "errorTextForTitle":"Lengden på <b>title</b> bør mer enn 0 og mindre enn 128.",
      "errorTextForDescription":"Lengden på <b>description</b> bør mer enn 0 og mindre enn 5120.",
      "errorTextForSource":"Lengden på <b>source</b> bør mer enn 0 og mindre enn 10240."
    },
    "programs":{
      "title":"Programmer"
    },
    "settingsPage":{
      "title":"Innstillinger",
      "publicProfile":"Offentlig profil",
      "validationError":"Validering feil",
      "username":"Brukernavn",
      "yourUsername":"Ditt brukernavn",
      "usernameWasAlreadyUsed":"Brukernavnet var allerede brukt",
      "usernameWasReserved":"Brukernavnet var reservert",
      "usernameValidation":"Lengden på <b>username</b> bør være mindre enn 24 og inneholder små bokstaver av latin og tall.",
      "name":"Navn",
      "yourFirstNameAndLastName":"Fornavn og etternavn",
      "nameValidation":"Lengden på <b>name</b> bør være mer enn 0 og mindre enn 24",
      "bio":"Bio",
      "tellALittleAboutYourself":"Fortell litt om deg selv",
      "bioValidation":"Lengden på <b>bio</b> bør være mindre enn 128.",
      "country":"Land",
      "select":"velg",
      "countryValidation":"Velg alle land",
      "updateProfile":"Oppdater profil"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"Logg på",
      "signInDescription":"Operasjonen er bare mulig når du er logget på."
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"Er du sikker på at du vil slette program ?",
      "answerYes":"ja",
      "answerNo":"ingen"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"Utgang",
        "outputNameValue":"``linguacode\nutgang(X)\n``",
        "outputDescription":"Skriver ut en X-verdi: tall, drift, tekst og variable verdier. For eksempel",
        "outputDescriptionValue":"``linguacode\nutgang(4) # 4\nutgang(\"Howdy\") # Howdy\nutgang(1+2) # 3\n``",
        "inputName":"Inngang",
        "inputNameValue":"``linguacode\ninngang(X)\n``",
        "inputDescription":"Noen X-variabel verdi erklære av brukeren. For eksempel",
        "inputDescriptionValue":"``linguacode\ninput(a)\n``",
        "ifElseStatementName":"Sjekke kontoutskrift",
        "ifElseStatementNameValue":"``linguacode\nhvis <condition N1> da\n<operation N1>\nannet hvis <condition N2> da\n<operation N2>\nannet\n<operation N3>\n``",
        "ifElseStatementDescription":"Operasjoner skal utføres basert på spesifiserte tilstanden å være sant. For eksempel",
        "ifElseStatementDescriptionValue":"``linguacode\na = 5\nb = 5\nhvis a > b så\nutgang (a > b\")\nelse if a < b så\nutgang (\"<b\")\nannet\nutgang(\"b ==\") # b == en\n``",
        "loopForName":"Begrenset gjenta",
        "loopForNameValue":"``linguacode\ngjenta <N> ganger\n<operation>\n``",
        "loopForDescription":"Utfører en blokk med kode en rekke ganger. For eksempel",
        "loopForDescriptionValue":"``linguacode\ngjenta 10 ganger\nutgang(\"Howdy\")\n``",
        "loopWhileDoName":"Loop \"Mens Du Gjør\"",
        "loopWhileDoNameValue":"``linguacode\nmens <condition> da\n<operation>\n``",
        "loopWhileDoDescription":"\"Når du Gjør en\" loop kjører gjennom en blokk med kode så lenge en bestemt betingelse er sann. For eksempel",
        "loopWhileDoDescriptionValue":"``linguacode\na = 1\nmens en < 5 da\nutgang(en)\na = a + 1\n``",
        "loopDoWhileName":"Loop \"Gjøre Mens\"",
        "loopDoWhileNameValue":"``linguacode\ngjøre\n<operation>\nmens <condition>\n``",
        "loopDoWhileDescription":"Loop \"Gjøre Selv\" vil gjenta løkken så lenge betingelsen er sann. For eksempel",
        "loopDoWhileDescriptionValue":"``linguacode\na = 1\ngjøre \nutgang(en)\na = a + 1\nmens en < 5\n``",
        "piName":"pi matematisk konstant",
        "piNameValue":"``linguacode\nutgang(pi)\n``",
        "piDescription":"Skriver ut matematisk konstant <b>pi</b>. For eksempel",
        "piDescriptionValue":"``linguacode\nutgang(pi) # 3.141592653589793\n``",
        "eNumberName":"e matematisk konstant",
        "eNumberNameValue":"``linguacode\nutgang(e)\n``",
        "eNumberDescription":"Skriver ut matematisk konstant <b>e</b>. For eksempel",
        "eNumberDescriptionValue":"``linguacode\nutgang(e) # 2.718281828459045\n``",
        "sqrName":"Kvadratet av antall",
        "sqrNameValue":"``linguacode\nsqr(X)\n``",
        "sqrDescription":"Returnerer kvadratet av <b>X</b> nummer som er angitt av brukeren. For eksempel",
        "sqrDescriptionValue":"``linguacode\nX = 5 \nY = sqr(X) \nutgang(Y) # 25\n``",
        "powName":"Effekt av antall",
        "powNameValue":"``linguacode\npow(X,Y)\n``",
        "powDescription":"Returnerer verdien av <b>X</b> kraft <b>Y</b>. For eksempel",
        "powDescriptionValue":"``linguacode\nX = 2 \nY = - 5 \nZ = pow(X, Y) \nutgang(Z) # 32\n``",
        "sqrtName":"Kvadratroten av antall",
        "sqrtNameValue":"``linguacode\nsqrt(X)\n``",
        "sqrtDescription":"Returnerer kvadratroten av <b>X</b> nummer som er angitt av brukeren. For eksempel",
        "sqrtDescriptionValue":"``linguacode\nX = 9 \nY = sqrt(X) \nutgang(Y) # 3\n``",
        "absName":"Absolutte verdien av antall",
        "absNameValue":"``linguacode\nabs(X)\n``",
        "absDescription":"Returnerer den absolutte verdien av <b>X</b> nummer som er angitt av brukeren. For eksempel՝",
        "absDescriptionValue":"``linguacode\nX = -5 \nY = abs(X) \nutgang(Y) # 5\n``",
        "roundName":"Antall runder",
        "roundNameValue":"``linguacode\nround(X)\n``",
        "roundDescription":"Runder en <b>X</b> tall til nærmeste heltall og returnerer verdien. For eksempel",
        "roundDescriptionValue":"``linguacode\nX = 2.3 \na = round(X) \nutgang(en) # 2\n``",
        "floorName":"Antall etasje",
        "floorNameValue":"``linguacode\ngulv(X)\n``",
        "floorDescription":"Runder en <b>X</b> antall <b>downwards</b> til nærmeste heltall og returnerer verdien. For eksempel",
        "floorDescriptionValue":"``linguacode\nX = 2.6 \na = floor(X) \nutgang(en) # 2\n``",
        "ceilName":"Antall ceil",
        "ceilNameValue":"``linguacode\nceil(X)\n``",
        "ceilDescription":"Runde en <b>X</b> antall <b>upwards</b> til sin nærmeste heltall og returnerer verdien",
        "ceilDescriptionValue":"``linguacode\nX = 2.2 \na = ceil(X) \nutgang(en) # 3\n``",
        "sinName":"Sinus",
        "sinNameValue":"``linguacode\nsin(X)\n``",
        "sinDescription":"Returnerer verdien av den <b>sine</b> av en <b>X</b> antall. For eksempel",
        "sinDescriptionValue":"``linguacode\nX = sin(pi) \nutgang(X) # 0\n``",
        "cosName":"Cosinus",
        "cosNameValue":"``linguacode\ncos(X)\n``",
        "cosDescription":"Returnerer verdien av den <b>cosine</b> av en <b>X</b> antall. For eksempel",
        "cosDescriptionValue":"``linguacode\nX = cos(pi) \nutgang(X) # -1\n``",
        "tanName":"Tangent",
        "tanNameValue":"``linguacode\ntan(X)\n``",
        "tanDescription":"Returnerer verdien av den <b>tangent</b> av en <b>X</b> antall. For eksempel՝",
        "tanDescriptionValue":"``linguacode\nX = tan(pi) \nutgang(X) # 0\n``",
        "ctgName":"Cotangent",
        "ctgNameValue":"``linguacode\nctg(X)\n``",
        "ctgDescription":"Returnerer verdien av den <b>cotangent</b> av en <b>X</b> antall. For eksempel՝",
        "ctgDescriptionValue":"``linguacode\nX = ctg(pi/4) \nutgang(X) # 1\n``",
        "arcSinName":"Arcsin",
        "arcSinNameValue":"``linguacode\narcsin(X)\n``",
        "arcSinDescription":"Returnerer den verdien der sinus får samme verdi som <b>X</b>. For eksempel",
        "arcSinDescriptionValue":"``linguacode\na = arcsin(1) \nutgang(en) # pi/2 \n``",
        "arcCosName":"Arccos",
        "arcCosNameValue":"``linguacode\narccos(X)\n``",
        "arcCosDescription":"Returnerer den verdien der cosinus får samme verdi som <b>X</b>. For eksempel",
        "arcCosDescriptionValue":"``linguacode\na = arccos(1) \nutgang(en) # 0\n``",
        "arcTanName":"Arctangens",
        "arcTanNameValue":"``linguacode\narctan(X)\n``",
        "arcTanDescription":"Returnerer den verdien der tangent får samme verdi som <b>X</b>. For eksempel",
        "arcTanDescriptionValue":"``linguacode\na = arctan(0) \nutgang(en) # 0\n``",
        "arcCtgName":"Arccotangent",
        "arcCtgNameValue":"``linguacode\narcctg(X)\n``",
        "arcCtgDescription":"Returnerer den verdien der cotangent får samme verdi som <b>X</b>. For eksempel",
        "arcCtgDescriptionValue":"``linguacode\na = arcctg(1) \nutgang(en) # pi/4\n``",
        "logName":"Logaritmen",
        "logNameValue":"``linguacode\nlog(X,Y)\n``",
        "logDescription":"Returnerer verdien av logaritmen av <b>X</b> til base <b>Y</b>. For eksempel",
        "logDescriptionValue":"``linguacode\na = log(3,27) \nutgang(en) # 3\n``",
        "lgName":"Vanlige logaritmen",
        "lgNameValue":"``linguacode\nlg(Y)\n``",
        "lgDescription":"Returnerer verdien av logaritmen av <b>X</b> til base <b>10</b>. For eksempel",
        "lgDescriptionValue":"``linguacode\na = lg(100) \nutgang(en) # 10\n``",
        "lnName":"Naturlige logaritmen",
        "lnNameValue":"``linguacode\nln(Y)\n``",
        "lnDescription":"Returnerer verdien av logaritmen av <b>X</b> til base <b>e</b>. For eksempel",
        "lnDescriptionValue":"``linguacode\na = ln(e) \nutgang(en) # 1\n``",
        "randomName":"Random number genererer",
        "randomNameValue":"``linguacode\ntilfeldig(X,[Y])\n``",
        "randomDescription":"Hvis parameteren <b>Y</b> er gitt, vil programmet tilfeldig generere og retur tilfeldig heltall antall fra range<b>[X, Y]</b>. Men uten <b>Y</b> parameter utvalget vil bli <b>[0, X]</b>. For eksempel",
        "randomDescriptionValueFirst":"``linguacode\nX = 10 \na = tilfeldig(X) # [0; 10]\nutgang(en) # 4 \n``",
        "randomDescriptionValueSecond":"``linguacode\nX = 5 \nY = - 15 \na = tilfeldig(X,Y) # [5; 15]\nutgang(en) # 12\n``"
      },
      "tutorials":{
        "intro":"Innledning",
        "output":"Utgang",
        "variables":"Variabler",
        "input":"Inngang",
        "operations":"Operasjoner",
        "conditions":"Betingelser",
        "boolean":"Boolske",
        "languageAboutLanguageTitle":"Om Språk",
        "languageAboutLanguageContent":"LinguaCode er laget for alle dem som ønsker å lære programmering grunnleggende i mer komfortabel måte. \nÅ lære med LinguaCode det er ikke avgjørende kunnskap om fremmedspråk eller tekniske ferdigheter. Alt du trenger er ønske om å lære og flid. \n\n#### Funksjoner:\n- **Flerspråklig**\n- **Multiplattform**\n- **Enkel Kildekode**\n- **Gratis**\n",
        "languageFeaturesTitle":"Språket Har",
        "languageFeaturesContent":"LinguaCode er basert på Python, Pascal og JavaScript, noe som gjør det lett å forstå med en enkelt kilde kode, og deretter lære et annet programmeringsspråk mer raskt. \n\n**Her er alle grunnleggende begreper i språket:**\n\n- **Hver kommando starter fra ny linje.** \nKildekoden vil bli mer enkle og klare ved den måten.\n- **- Kommandoer kan skrives både store og små bokstaver.** \nDet akselererer prosessen med programmering, men det er foretrukket å skrive med små bokstaver.\n- **Tekst kan skrives mellom både anførselstegn og apostrofer.** \nI mange land er det ingen anførselstegn i bruk, så her kan du velge praktisk versjonen for deg.\n- **Tekst skrevet etter symbolet \"\\#\" er regnet som kommentar, og har ingen innvirkning på arbeidet med kildekoden.** \nKommentarer er gitt for å ta notater.",
        "outputCommandDefinitionTitle":"Kommandoen definisjon",
        "outputCommandDefinitionContent":"Hvert program, som gjør enkelte virksomhet, skal vise oss beskjed om resultatet. Det er derfor all programmering systemer har tekst output muligheten og sted hvor vi kan se resultatet, som kalles **Terminal**. \n\nKommandoen \"*utgang*\" brukes for tekst-utgang. \n\n#### For eksempel \nKilde kode``linguacode\nutgang(\"Howdy\")\n``Resultat``terminal\nHowdy\n``",
        "outputPossibleValuesTitle":"Mulige verdier",
        "outputPossibleValuesContent":"Kommando-utgang kan skrive ut tekst, tall, matematiske operasjoner og variable verdier.\n\n#### For eksempel \nKilde kode \n``linguacode\nutgang(100)\nutgang(5 * 25)\n``Resultat``terminal\n100\n125\n``",
        "variablesDeclaresAndAssignsTitle":"Å erklære og oppdrag",
        "variablesDeclaresAndAssignsContent":"Ofte trenger vi å lagre tekst -, tall-og numeriske operasjoner et sted med hensikt å bruke det igjen. Containere, der vi kan lagre ulike verdier er kalt **variabler**. Ved første vi må gi et navn til variabel og deretter tilordne en verdi til det. Etter det vi kan referere til verdien som er rett og slett ved å ringe variabel med navnet sitt. \nVariabler som er lagret i Random-access memory (RAM) til datamaskinen, og når vi bruker variabelen, returnerer datamaskinen verdi tilsvarende det som variabelnavn fra RAM.\n#### Viktig å huske\nVariabelnavn \n**1.** Kan inneholde bokstaver, symboler eller tall \n**2.** Kan ikke starte med et tall \n**3.** Kan ikke inneholde mellomrom og symboler av aritmetiske operasjoner\n#### For eksempel \nFor å skrive ut antall **617** i stedet for dette \n``linguacode\nutgang(617)\n``\nvi vil skrive\n``linguacode\nX = 617\nutgang(X)\n``\nResultat\n``terminal\n617\n`` \nOg hvis vi ønsker å sende ut den samme verdien tre ganger, vil vi skrive \n``linguacode\nX = 617\nutgang(X)\nutgang(X)\nutgang(X)\n`` \nResultat \n``terminal\n617\n617\n617\n``",
        "variablesPracticalUseTitle":"Praktisk bruk",
        "variablesPracticalUseContent":"Som vi kan se, at vi kan gi både numerisk og tekst verdier til variabler. Men ofte må vi skal tilordnes variabelen noen verdi, som hadde blitt tildelt en annen en. I så fall kan vi tilordne allerede eksisterende variabel til den nye.\n#### For eksempel \nKilde kode\n``linguacode\na = 1\nb = 2\nc = a + b\nutgang(c)\n`` \nResultat\n``terminal\n3\n``\n",
        "variablesMultipleUsesTitle":"Flere bruk",
        "variablesMultipleUsesContent":"Du trenger ikke å opprette en ny variabel for en ny verdi hver gang. Vi kan også endre verdiene tilordnet variablene. Vi vil unngå fra unødvendige variabler og kildekoden vil være enklere på den måten.\n#### For eksempel\nLa oss anta at vi har **100** epler og lagre denne verdien i **apple** variabel. Antall epler var på vei ned av **5** hver dag. \nVi må utgang telle epler for hver dag. \n\nKilde kode\n``linguacode\napple = 100\nutgang(apple)\n\napple = apple - 5 # 95\nutgang (apple)\n\napple = apple - 5 # 90\nutgang(apple)\n\napple = apple - 5 # 85\nutgang(apple)\n`` \nResultat\n``terminal\n100\n95\n90\n85\n``",
        "inputCommandDefinitionTitle":"Kommandoen definisjon",
        "inputCommandDefinitionContent":"I programmering vi trenger både til produksjon og i mange tilfeller for å legge inn data. Vi trenger det når variablene kan motta noen verdi. Vi kan også endre kilde-koden hver gang og gi nye verdier til variable, men det er ikke effektiv og behov for lang tid. \n\nI dette tilfellet kan vi bruke kommandoen \"* - inngang*\". \n\nOg her er et enkelt eksempel på program som utganger dobbelte av antall lagt inn av brukeren. ``linguacode\ninngang(antall)\nutgang(antall * 2)\n` \"Når du kjører dette programmet vil vi se symbolet \"**>**\" noe som betyr at programmet har startet, og vi trenger å legge inn en manglende data. Etter å skrive inn noe nummer og trykke på **Inn** vi vil se dobbeltrom for angitt antall. ``terminal\n>617\n1234\n``Det meste vi trenger for å skrive programmer som kan brukes av folk som ikke engang vet programmering.",
        "inputWorkMechanismTitle":"Arbeid mekanisme",
        "inputWorkMechanismContent":"La oss nå se hvordan command inngang fungerer. For eksempel har vi dette programmet ``linguacode\nutgang(\"Vennligst skriv Inn ditt brukernavn / passord:\")\nutgang(\"Navn:\")\ninngang(navn)\nutgang(\"Etternavn:\")\ninngang(etternavn)\nutgang(\"Hi\" + navn + \"\" + etternavn)\n` Det er som vi ser er det 6 linjer i vårt program. \nEtter å ha kjørt det vi kan se at programmet arbeidet til linje 3.``terminal\nVennligst skriv inn din påloggingsinformasjon:\nNavn:\n>\n`` Etter å ha lagt inn det tapte data, vil vi se at nå er det arbeidet til linje 5.``terminal\nVennligst skriv inn din påloggingsinformasjon:\nNavn:\n>Marine\nEtternavn:\n>\n`` Og til slutt etter å ha skrevet inn den siste messed data programmet vil fungere, og enden.``terminal\nVennligst skriv inn din påloggingsinformasjon:\nNavn:\n>Marine\nEtternavn:\n>Chamchyan\nHei, Marine Chamchyan\n` Det er slik vi så at med denne kommandoen programmet fungerer del av del som krever inndata tapte data.",
        "operationsArithmeticOperatorsTitle":"Aritmetiske operasjoner",
        "operationsArithmeticOperatorsContent":"I LinguaCode det er mulig å gjennomføre enkle aritmetiske operasjoner som **+**, **-**, **\\***, **/**. \n\nFor eksempel er dette programmet vil gjøre alt aritmetiske operatorer med **1** og **2** tall. ``linguacode\nutgang(1 + 2) # 3\nutgang(1 - 2) # -1\nutgang(1 * 2) # 2\nutgang(1 / 2) # 0.5\n` ` #### Viktig å huske \nSom vi vet i Matematikk multiplikasjon av variabel med en annen variabel eller nummer kan bli skrevet uten symbol av multiplikasjon. For eksempel *7 ganger X* vil bli skrevet **7X** eller *X ganger Y* liker **XY**. \nMen i programmering er det viktig å skrive symbol på multiplikasjon. For eksempel **7 \\* X** **X \\* Y**.",
        "operationsExecutingPriorityTitle":"Operasjoner utføres prioritet",
        "operationsExecutingPriorityContent":"Både i Matematikk og i programmering hvis det er en avdeling eller en multiplikasjon, kan vi først gjøre dem, og bare når vi gjør addisjon og subtraksjon. \n\n#### For eksempel ``linguacode\nX = 10 + 2 * 4 - 2\n# X = 10 + 8 - 2\n# X = 18 - 2\n# X = 16\n`` Men vi kan bytte utfører prioritet ved hjelp av parenteser. \n#### For eksempel ``linguacode\nX = (10 + 2) * (4 - 2)\n# X = 12 * (4 - 2)\n# X = 12 * 2\n# X = 24\n``I programmering kan vi bruke parenteser selv hvis de er unødvendige. \nDet vil ikke være galt, men det er foretrukket å skrive enkelt og klart kildekode, noe som vil være lett å forstå for andre.",
        "operationsNumbersTitle":"Tall",
        "operationsNumbersContent":"Som vi vet <a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">numbers</a> er matematiske objekter som brukes til å telle, måle og merke. \nDet er 5 typer av tall. Vi vil håndtere alle av dem, med unntak for komplekse numbes \n- ** naturlige tall** **1**, **2**, ...``linguacode\nutgang(7 + 4) # 13\n`` \n- **heltall tall** ..., **-1**, **0**, **1**, ...``linguacode\nutgang(-6 * 5 + -3) # -33\n`` \n- **rasjonale tall** **1/2**, **2/3**, **0.125**, ...``linguacode\nutgang(0.617 * 2 * 1000) # 1234\n`` \n- **reelle tall** **√2**, **1.62**, ...``linguacode\nutgang(2/3 + 1/2) # 1\n``",
        "operationsSumOfStringAndNumberTitle":"Summen av strenger og tall",
        "operationsSumOfStringAndNumberContent":"Som vi ser, er det mulig å legge til både tall og tekster til hverandre, som følge linjene er kombinert i én linje. Men ofte må vi få en linje, der det vil bli brukt numerisk verdi. I så fall er det mulig å legge til tekst til tall, som følge nummeret vil bli endret, og kombinert med tekst som tekst.``linguacode\ntekst = \"det er\" + 365 + \"dager i året\"\n# tekst = \"det er\" + \"365\" + \"dager i året\"\n# tekst = \"det er 365\" + \"dager i året\"\n# tekst = \"det er 365 dager i året\"\n` ` #### Viktig å huske \nMed linjer vi kan ikke bare legge til operasjon. Mens du utfører andre operasjoner vil det resultere i en feil.",
        "conditionsCommandsIfTitle":"Kommandoen \"Hvis\"",
        "conditionsCommandsIfContent":"Noen ganger i programmering vi trenger for å utføre enkelte operasjoner basert på tilstand. For det det er tilstanden kontroll kommandoer som \"Hvis\", \"If-else\" og \"Annet-Hvis\". \n\nSkrive form av kommando \"**If**\" ``linguacode\nhvis <condition> da\n<operation>\n`` Her mellom kommandoer \"Hvis\" og \"så\" det er en tilstand, og etter det fra ny linje og etter **4 felt** er skrevet drift (eller funksjoner), som vil bli gjort hvis utsagnet er sant. \n\n#### For eksempel ``linguacode\na = 5\nb = 2\nhvis a > b så\nutgang (a > b\")\n``",
        "conditionsCommandsIfElseTitle":"Kommandoen \"If-Else\"",
        "conditionsCommandsIfElseContent":"Så vet vi hvordan vi skal bruke betinget utsagn i programmer. Nå vil vi diskutere saken når betingelsen er usann.\n\nSkriftlig form for \"**Hvis-Annet**\" statement ``linguacode\nhvis <condition> da\n<operation N1>\nannet\n<operation N2>\n`` Her etter kommando \"Hvis\" det er en ny kommando for \"Annet\". Og fra ny linje, etter 4 felt er skrevet drift, som vil bli gjort, hvis de nevnte vilkåret ikke er oppfylt.\n\n#### For eksempel ``linguacode\na = 5\nb = 10\nhvis a > b\nutgang (a > b\")\nannet\nutgang(\"b < a\")\n``",
        "conditionsCommandsElseIfTitle":"Kommandoen \"Annet-Hvis\"",
        "conditionsCommandsElseIfContent":"Vi har allerede diskutert hvilken kommando som skal utføres basert på tilstanden som blir sant eller usant. Men noen ganger trenger vi å sjekke mer enn én tilstand på samme tid. \n\nSkriftlig form for \"**If-Else-If**\" statement``linguacode\nhvis <condition N1> da\n<operation N1>\nannet hvis <condition N2> da\n<operation N2>\nannet\n<operation N3>\n` Det er her vi må se mer enn én tilstand. I tilfelle av \"Annet-Om den er\" skriftlig form det kan være 1 eller flere \"Annet-Hvis\" - utsagn mellom kommandoer \"Hvis\" og \"Annet\". \n\n#### For eksempel ``linguacode\na = 5\nb = 5\nhvis a > b så\nutgang (a > b\")\nelse if a < b så\nutgang (\"<b\")\nannet\nutgang(\"b == a\")\n``",
        "booleanTypesBooleanTitle":"Beskrivelse",
        "booleanTypesBooleanContent":"Vi vet allerede hvordan du kontrollerer uttalelser og noen av dem kan være *sant* (22 > 18) eller *usann* (16 > 18). Noen ganger på grunn av lengden av tilstanden kontrollere linje, blir det vanskelig å lese kildekoden. Her kommer til å hjelpe boolske verdier \n\n- **sann** ``linguacode\ntilstand = true\nutgang(tilstand) #sant\n`` \n\n- **usann**``linguacode\ntilstand = false\nutgang(tilstand) #false\n`` En boolsk sammenlikning kjent for oss returnerer en av de gitte verdier \n\nExemple av *sant* sammenligning ``linguacode\ntilstand = 1 < 5\nutgang(tilstand) # sant\n`` Exemple av *usann* sammenligning ``linguacode\ntilstand = 10 < 5\nutgang(tilstand) # false\n`` Så i stand kontroll kommandoer som vi kan bruke variabler med boolske verdier. \n\n#### For eksempel ``linguacode\nutgang(\"Skriv et tall \"a\":\")\ninput(a)\n\nutgang(\"Skriv et tall \"b\":\")\ninngang(b)\n\ncondition1 = a > b\ncondition2 = a < b\n\nhvis condition1 da\nresultat = \"a > b\"\nannet hvis condition2 da\nresultat = \"< b\"\nannet\nresultat = \"a == b\"։\nutgang(\"Resultat:\" + resultat)\n``",
        "booleanOperatorsComparisonTitle":"Sammenligningen operatører",
        "booleanOperatorsComparisonContent":"I stand å sjekke kommandoene vi har allerede brukt symboler for \"større enn\" > og \"mindre enn\" < sammenligningen operatører. Men det er her vi kan bruke andre operatører kjent for oss. \n\n- **>** sammenligner numeriske verdier, der den første er *#større* enn den andre. For eksempel ``linguacode\nutgang(5 > 1) # sant\nutgang(1 > 5) # false\n`` \n\n- **>=** sammenligner numeriske verdier, der den første er *#større eller lik* den andre. For eksempel ``linguacode\nutgang(5 >= 5) # sant\nutgang(1 >= 5) # false\n`` \n\n- **<** sammenligner numeriske verdier, der den første er *#mindre* enn den andre. For eksempel ``linguacode\nutgang(1 < 5) # sant\nutgang(5 < 1) # false\n`` \n\n- **<=** sammenligner numeriske verdier, der den første er *#mindre eller lik* den andre. For eksempel ``linguacode\nutgang(1 <= 5) # sant\nutgang(5 <= 1) # false\n`` \n\n- **==** sammenligner numeriske verdier eller tekst, der den første er *#lik* den andre. For eksempel ``linguacode\nutgang(5 == 5) # sant\nutgang(5 == 1) # false\nutgang(\"soldat\" == \"soldat\") # sant\nutgang(\"Hei\" == \"Helo\") # false\n`` \n\n- **!=** sammenligner numeriske verdier eller tekst, der den første er *#ikke lik* den andre. For eksempel ``linguacode\nutgang(5 != 1) # sant\nutgang(5 != 5) # false\nutgang(\"Hei\" != \"Helo\") # sant\nutgang(\"soldat\" != \"soldat\") # false\n`` \n\n- **ikke()** returnerer reversert som følge av numeriske eller tekst sammenligningen. For eksempel ``linguacode\nutgang(ikke(1 > 5)) # sant\nutgang(ikke(5 == 5)) # false\nutgang(ikke(false)) # sant\nutgang(ikke(true)) # false\n``",
        "booleanOperatorsLogicalTitle":"Boolske operatorer",
        "booleanOperatorsLogicalContent":"Så vi vet hvordan du skal skrive noen betinget utsagn, men ofte må vi kombinere en rekke forhold i ett, og basert på det å utføre enkelte operasjoner. Den kombinasjon av forholdene som foregår av boolske operatorer. \n\n- Kommandoen \"***\" kombinerer to forhold-i-ett, som kalles **sann** når begge forhold er: *sann* **usann** når minst en av betingelsene er *usann*. For eksempel ``linguacode\nutgang(5 > 1 և 10 < 100) # sant\nutgang(20 < 100 և 1 > 5) # false\n`` \n\n- Kommandoen \"**eller**\" kombinerer to forhold-i-ett, som kalles **sann** når minst en av betingelsene er *sant* og **usann** når det er to forhold som er *usann*. For eksempel ``linguacode\nutgang(5 > 1 eller 100 < 10) # sant\nutgang(20 > 100 eller 1 > 5) # false\n``",
        "booleanOperatorsExecutingPriorityTitle":"Utfører prioritet",
        "booleanOperatorsExecutingPriorityContent":"Vi lærte hvordan å kombinere 2 forhold, men de kan bli mer enn 2, basert på program-innhold. I så fall, vil forholdene kombineres med hverandre fra *venstre til høyre*, før de danner en tilstand.\n\n#### For eksempel ``linguacode\nutgang(5 < 1 և 1 < 7 eller 1 >= 3 eller 9 == 9)\n` \"dette er det samme som ``linguacode\nutgang(false և sann eller usann eller sann)\n` \"la oss kombinere **1** og **2th** \"**falsk og sann**\" forhold i en․ ``linguacode\nutgang(forfalskning eller usann eller sann)\n`**1+2** tilstand med **3th** \"**forfalskning eller usann**\" ``linguacode\nutgang(usann eller sann)\n`` og til slutt **1+2+3** tilstand med **4.** \"**usann eller sann**\"․ ``linguacode\nutgang(sann)\n`` Og så kombinerer vi 4 vilkår i ett. Vi kan kombinere flere forhold på den måten. \n\nNoen ganger trenger vi å endre venstre til høyre for å kombinere prioritet ved hjelp av parenteser. \n\n#### For eksempel ``linguacode\nutgang(5 < 1 և (1 < 7 eller (1 >= 3 eller 9 == 9)))\n`` \n\ndette er det samme som ``linguacode\nutgang(false և (sant eller (usann eller sann)))\n` \"la oss kombinere **3th** og **4.** \"**usann eller sann**\" forholdene i ett ``linguacode\nutgang(forfalskning eller (usann eller sann))\n`` etter at det **2th** tilstand med **3+4** tilstanden vil være \"**usann eller sann**\" ``linguacode\nutgang(false և sant)\n`` og til slutt la oss kombinere **1** tilstand med **2+(3+4)**. Det vil være \"**falsk og sann**\" ``linguacode\nutgang(false)\n`` Og så så vi at resultatet er endret med å endre kombinere prioritet."
      },
      "syntaxInfo":{
        "modalTitle":"Kommandoen guide",
        "cheatSheetTitle":"Jukse ark",
        "lesson":"Opplæringen"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b> Hotkeys</b>",
      "undo":"Angre",
      "redo":"Gjenta",
      "selectAll":"Velg alle",
      "run":"Kjøre",
      "terminal":"Terminal"
    },
    "program":{
      "program":"Programmet",
      "sourceCode":"Kilde kode",
      "functionArgumentSyntaxError":"Funksjonen argumentet om syntaks feil i ${line} linje.",
      "undefinedVariable":"\"${variable}\" variabel ikke definert i ${line} linje.",
      "indentError":"Plass feil i ${line} linje.",
      "hackAttempt":"Hack forsøk. \"${ip}\" ip-adresse ble lagret i vår database.",
      "syntaxError":"Syntaks-feil",
      "timeout":"Kompilere timeout. Kontroller at koden ikke har uendelig loop.",
      "true":"sanne",
      "false":"falske",
      "NaN":"ukjent",
      "null":"ukjent",
      "Infinity":"infinity",
      "undefined":"udefinerte"
    },
    "programListGroup":{
      "programs":"Programmer"
    },
    "terminal":{
      "hotkeys":"<b> Hotkeys</b>",
      "undo":"Angre",
      "redo":"Gjenta",
      "selectAll":"Velg alle",
      "terminal":"Terminal"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"Logg på"
    },
    "menuButton":{
      "settings":"Innstillinger",
      "logOut":"Logg ut"
    }
  },
  "panels":{
    "header":{
      "title":"Hjem"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"Bruker ikke har noen programmer ennå."
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"Du ikke har noen programmer ennå.",
      "programNotFoundClickPartFirst":"Klikk",
      "programNotFoundClickPartSecond":"her",
      "programNotFoundClickPartThird":"å lage et nytt program."
    },
    "loading":{
      "loading":"Lasting"
    }
  }
}