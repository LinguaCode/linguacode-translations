{
  "blocks":{
    "controlPanelBlock":{
      "edit":"Edit",
      "delete":"Șterge"
    },
    "lovePanelBlock":{
      "like":"Ca",
      "liked":"Placut",
      "star":"Steaua",
      "starred":"A jucat"
    },
    "moreFromUserBlock":{
      "viewAll":"Vezi toate",
      "moreFromFirst":"Mai mult de",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"Un fel de",
      "recent":"Recent",
      "views":"Opinii",
      "stars":"Stele",
      "likes":"Îi place",
      "random":"Aleatoare"
    },
    "shareBlock":{
      "link":"Link-ul",
      "share":"Cota",
      "tweet":"Tweet",
      "textTwitter":"Programul \"${programTitle}\" de ${userName} pe #Codat ${userPageLink}",
      "descriptionVK":"Codat este un social platforma de codificare și este conceput special pentru copii, unde aceștia pot învăța programare și partaja codurile lor și cu limba lor maternă și fără necesitatea de a cunoaște limba engleză."
    },
    "userPrimaryInfoBlock":{
      "editProfile":"Editare profil"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"S-au alăturat pe"
    }
  },
  "pages":{
    "errorPage":{
      "title":"Eroare",
      "explanation":"Îmi pare rău, o eroare critică a avut loc pe această pagină."
    },
    "landingPage":{
      "title":"Codat: Învățarea prin Codificare",
      "learningByCoding":"De învățare <span className=\"masthead--lora-italic\">by Coding</span>",
      "explanation":"Ne face procesul de învățare de programare și codificare a mărfurilor atât de plin de bucurie și de viață, vei rade cu voce tare.",
      "facebookSignIn":"Conectați-vă cu Facebook",
      "or":"sau",
      "seeTheListOfPrograms":"A se vedea lista de mai existe programe",
      "descriptionHead":"Cel mai nou mod de a învăța o programare.",
      "descriptionBody":"Codat este un social platforma de codificare și este conceput special pentru copii, unde aceștia pot învăța programare și partaja codurile lor și cu limba lor maternă și fără necesitatea de a cunoaște limba engleză.",
      "advantagesHeadline":"Codat vă ajută să vă <span className=\"u-emphasized\">learn mai bine </span>",
      "advantageTopFirstHeadline":"Dicționar",
      "advantageTopFirstDescription":"Scrie programe în limba maternă, și nu numai.",
      "advantageTopSecondHeadline":"E gratuit!",
      "advantageTopSecondDescription":"Totul este gratuit.",
      "advantageTopThirdHeadline":"Pornire rapidă",
      "advantageTopThirdDescription":"Noțiuni de bază este mult mai ușor decât crezi!",
      "advantageBottomFirstHeadline":"Imaginația",
      "advantageBottomFirstDescription":"Învăța, de a încerca, de a Crea!",
      "advantageBottomSecondHeadline":"Educație",
      "advantageBottomSecondDescription":"Aflați de programare, precum și alte subiecte.",
      "advantageBottomThirdHeadline":"Comunitate",
      "advantageBottomThirdDescription":"Împărtășiți programe cu prietenii și pentru a găsi noi prieteni.",
      "joinText":"Alăturați-vă să <span className=\"u-emphasized\">the community</span> de elevi",
      "facebookRegister":"Inregistreaza-te acum, este GRATUIT!"
    },
    "notFoundPage":{
      "title":"Pagina Nu A Fost Găsită",
      "explanation":"Îmi pare rău, dar pagina pe care încercați să o vizualizați nu există.",
      "descriptionPartFirst":"Încercați îndreaptă spre",
      "descriptionPartSecond":"pagina principala",
      "descriptionPartThird":"în schimb."
    },
    "programChangePage":{
      "titleOfEditPage":"Editați ${userName}/${title} program",
      "editProgramHeadline":"A edita un program",
      "editProgramButton":"Editare Program",
      "titleOfCreatePage":"A crea un nou program",
      "newProgramHeadline":"A crea un nou program",
      "submitProgramButton":"- Și Prezinte Programul",
      "programContent":"Un program conține toate informațiile despre cod.",
      "name":"Numele",
      "programNameForm":"Program de mare nume scurt și ușor de reținut, ca <b>hello-world</b>.",
      "titleOfProgram":"Titlu",
      "description":"Descriere",
      "validationError":"Eroare de validare",
      "errorTextForNameLength":"Lungimea <b>name</b> ar trebui să mai mult de 0 și mai puțin de 32 de ani, acesta ar trebui să constea din latină simboluri și linii.",
      "errorTextForName":"Acest nume de sursă este deja folosit de tine.",
      "errorTextForTitle":"Lungimea <b>title</b> ar trebui să mai mult de 0 și mai puțin de 128.",
      "errorTextForDescription":"Lungimea <b>description</b> ar trebui să mai mult de 0 și mai puțin de 5120.",
      "errorTextForSource":"Lungimea <b>source</b> ar trebui să mai mult de 0 și mai puțin de 10240."
    },
    "programs":{
      "title":"Programe"
    },
    "settingsPage":{
      "title":"Setări",
      "publicProfile":"Profil Public",
      "validationError":"Eroare de validare",
      "username":"Numele de utilizator",
      "yourUsername":"Numele dvs. de utilizator",
      "usernameWasAlreadyUsed":"Utilizator a fost deja folosit",
      "usernameWasReserved":"Utilizator a fost rezervat",
      "usernameValidation":"Lungimea <b>username</b> ar trebui să fie mai puțin de 24 și să conțină litere mici latine și numere.",
      "name":"Numele",
      "yourFirstNameAndLastName":"Numele și prenumele numele",
      "nameValidation":"Lungimea <b>name</b> ar trebui să fie mai mult decât 0 și mai puțin de 24 de",
      "bio":"Bio",
      "tellALittleAboutYourself":"Spune un pic despre tine",
      "bioValidation":"Lungimea <b>bio</b> ar trebui să fie mai puțin de 128.",
      "country":"Tara",
      "select":"selectați",
      "countryValidation":"Selectați oricare dintre țările",
      "updateProfile":"Actualizare profil"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"Semn în",
      "signInDescription":"Operațiunea este posibilă numai atunci când sunteți conectat."
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"Ești sigur că doriți să ștergeți programul ?",
      "answerYes":"da",
      "answerNo":"nu"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"Ieșire",
        "outputNameValue":"``codat\nde ieșire(X)\n``",
        "outputDescription":"Printuri de orice valoare pentru X: numere, operații, text și valori variabile. De exemplu",
        "outputDescriptionValue":"``codat\nde ieșire(4) # 4\nde ieșire(\"Salut\") # Howdy\nde ieșire(1+2) # 3\n``",
        "inputName":"Intrare",
        "inputNameValue":"``codat\nde intrare(X)\n``",
        "inputDescription":"Orice X valoarea variabilei declararea de către utilizator. De exemplu",
        "inputDescriptionValue":"``codat\nde intrare(a)\n``",
        "ifElseStatementName":"Verificarea declarație",
        "ifElseStatementNameValue":"``codat\ndacă <condition N1> apoi\n<operation N1>\naltfel, dacă <condition N2> apoi\n<operation N2>\naltceva\n<operation N3>\n``",
        "ifElseStatementDescription":"Operațiunile vor fi executate pe baza condiție specificată a fi adevărat. De exemplu",
        "ifElseStatementDescriptionValue":"``codat\na = 5\nb = 5\ndacă a > b atunci\nde ieșire(\"a > b\")\naltfel, dacă a < b atunci\nde ieșire(\"a < b\")\naltceva\nde ieșire(\"b ==\") # b == o\n``",
        "loopForName":"Limitat repeta",
        "loopForNameValue":"``codat\nrepet <N> ori\n<operation>\n``",
        "loopForDescription":"Execută un bloc de cod de un număr de ori. De exemplu",
        "loopForDescriptionValue":"``codat\nrepeta de 10 ori\nde ieșire(\"Salut\")\n``",
        "loopWhileDoName":"Buclă \"În Timp Ce Face\"",
        "loopWhileDoNameValue":"``codat\nîn timp ce <condition> apoi\n<operation>\n``",
        "loopWhileDoDescription":"\"În Timp ce\" bucla se execută printr-un bloc de cod, atâta timp cât o anumită condiție este adevărată. De exemplu",
        "loopWhileDoDescriptionValue":"``codat\na = 1\nîn timp ce o < 5 atunci\nde ieșire(o)\na = a + 1\n``",
        "loopDoWhileName":"Bucla \"While\"",
        "loopDoWhileNameValue":"``codat\nface\n<operation>\nîn timp ce <condition>\n``",
        "loopDoWhileDescription":"Bucla \"While\" se va repeta bucla atât timp cât condiția este adevărată. De exemplu",
        "loopDoWhileDescriptionValue":"``codat\na = 1\nface \nde ieșire(o)\na = a + 1\nîn timp ce o < 5\n``",
        "piName":"pi constantă matematică",
        "piNameValue":"``codat\nde ieșire(pi)\n``",
        "piDescription":"Printuri constantă matematică <b>pi</b>. De exemplu",
        "piDescriptionValue":"``codat\nde ieșire(pi) # 3.141592653589793\n``",
        "eNumberName":"e constantă matematică",
        "eNumberNameValue":"``codat\nde ieșire(e)\n``",
        "eNumberDescription":"Printuri constantă matematică <b>e</b>. De exemplu",
        "eNumberDescriptionValue":"``codat\nde ieșire(e) # 2.718281828459045\n``",
        "sqrName":"Piața de numărul",
        "sqrNameValue":"``codat\nsqr(X)\n``",
        "sqrDescription":"Se întoarce pătrat de <b>X</b> numărul introdus de utilizator. De exemplu",
        "sqrDescriptionValue":"``codat\nX = 5 \nY = sqr(X) \nde ieșire(Y) # 25\n``",
        "powName":"Putere de numărul",
        "powNameValue":"``codat\npow(X,Y)\n``",
        "powDescription":"Returnează valoarea <b>X</b> la puterea de <b>Y</b>. De exemplu",
        "powDescriptionValue":"``codat\nX = 2 \nY = 5 \nZ = pow(X, Y) \nde ieșire(Z) # 32\n``",
        "sqrtName":"Rădăcina pătrată din numărul",
        "sqrtNameValue":"``codat\nsqrt(X)\n``",
        "sqrtDescription":"Returnează rădăcina pătrată a <b>X</b> numărul introdus de utilizator. De exemplu",
        "sqrtDescriptionValue":"``codat\nX = 9 \nY = sqrt(X) \nde ieșire(Y) # 3\n``",
        "absName":"Valoarea absolută a numărului",
        "absNameValue":"``codat\nabs(X)\n``",
        "absDescription":"Returnează valoarea absolută a <b>X</b> numărul introdus de utilizator. De exemplu՝",
        "absDescriptionValue":"``codat\nX = -5 \nY = abs(X) \nde ieșire(Y) # 5\n``",
        "roundName":"Numărul de rotunjire",
        "roundNameValue":"``codat\nround(X)\n``",
        "roundDescription":"Runde un <b>X</b> număr la cel mai apropiat număr întreg și returnează o valoare. De exemplu",
        "roundDescriptionValue":"``codat\nX = 2.3 \no = round(X) \nde ieșire(o) # 2\n``",
        "floorName":"Numărul podea",
        "floorNameValue":"``codat\nfloor(X)\n``",
        "floorDescription":"Runde un <b>X</b> numărul <b>downwards</b> la cel mai apropiat număr întreg și returnează o valoare. De exemplu",
        "floorDescriptionValue":"``codat\nX = 2.6 \no = floor(X) \nde ieșire(o) # 2\n``",
        "ceilName":"Numărul ceil",
        "ceilNameValue":"``codat\nceil(X)\n``",
        "ceilDescription":"Runda o <b>X</b> numărul <b>upwards</b> la cel mai apropiat număr întreg și returnează valoarea",
        "ceilDescriptionValue":"``codat\nX = 2.2 \no = ceil(X) \nde ieșire(o) # 3\n``",
        "sinName":"Sine",
        "sinNameValue":"``codat\nsin(X)\n``",
        "sinDescription":"Returnează valoarea <b>sine</b> de o <b>X</b> număr. De exemplu",
        "sinDescriptionValue":"``codat\nX = sin(pi) \nde ieșire(X) # 0\n``",
        "cosName":"Cosinus",
        "cosNameValue":"``codat\ncos(X)\n``",
        "cosDescription":"Returnează valoarea <b>cosine</b> de o <b>X</b> număr. De exemplu",
        "cosDescriptionValue":"``codat\nX = cos(pi) \nde ieșire(X) # -1\n``",
        "tanName":"Tangenta",
        "tanNameValue":"``codat\ntan(X)\n``",
        "tanDescription":"Returnează valoarea <b>tangent</b> de o <b>X</b> număr. De exemplu՝",
        "tanDescriptionValue":"``codat\nX = tan(pi) \nde ieșire(X) # 0\n``",
        "ctgName":"Cotangent",
        "ctgNameValue":"``codat\nctg(X)\n``",
        "ctgDescription":"Returnează valoarea <b>cotangent</b> de o <b>X</b> număr. De exemplu՝",
        "ctgDescriptionValue":"``codat\nX = ctg(pi/4) \nde ieșire(X) # 1\n``",
        "arcSinName":"Arc-sinus",
        "arcSinNameValue":"``codat\narcsin(X)\n``",
        "arcSinDescription":"Returnează valoarea unde sinusoidale primește aceeași valoare ca <b>X</b>. De exemplu",
        "arcSinDescriptionValue":"``codat\no = arcsin(1) \nde ieșire(o) # pi/2 \n``",
        "arcCosName":"Arc-cosinus",
        "arcCosNameValue":"``codat\narccos(X)\n``",
        "arcCosDescription":"Returnează valoarea în cazul în care cosinus primește aceeași valoare ca <b>X</b>. De exemplu",
        "arcCosDescriptionValue":"``codat\na = arccos(1) \nde ieșire(a) # 0\n``",
        "arcTanName":"Arctangenta",
        "arcTanNameValue":"``codat\narctan(X)\n``",
        "arcTanDescription":"Returnează valoarea în cazul în care tangenta primește aceeași valoare ca <b>X</b>. De exemplu",
        "arcTanDescriptionValue":"``codat\na = arctan(0) \nde ieșire(a) # 0\n``",
        "arcCtgName":"Arccotangent",
        "arcCtgNameValue":"``codat\narcctg(X)\n``",
        "arcCtgDescription":"Returnează valoarea de la care cotangent primește aceeași valoare ca <b>X</b>. De exemplu",
        "arcCtgDescriptionValue":"``codat\no = arcctg(1) \nde ieșire(o) # pi/4\n``",
        "logName":"Logaritm",
        "logNameValue":"``codat\nlog(X,Y)\n``",
        "logDescription":"Returnează valoarea logaritmului <b>X</b> la baza <b>Y</b>. De exemplu",
        "logDescriptionValue":"``codat\na = log(3,27) \nde ieșire(o) # 3\n``",
        "lgName":"Logaritm comun",
        "lgNameValue":"``codat\nlg(Y)\n``",
        "lgDescription":"Returnează valoarea logaritmului <b>X</b> la baza <b>10</b>. De exemplu",
        "lgDescriptionValue":"``codat\na = lg(100) \nde ieșire(o) # 10\n``",
        "lnName":"Logaritm Natural",
        "lnNameValue":"``codat\nln(Y)\n``",
        "lnDescription":"Returnează valoarea logaritmului <b>X</b> la baza <b>e</b>. De exemplu",
        "lnDescriptionValue":"``codat\na = ln(e) \nde ieșire(o) # 1\n``",
        "randomName":"Generarea de numere aleatoare",
        "randomNameValue":"``codat\naleator(X,[Y])\n``",
        "randomDescription":"Dacă parametrul <b>Y</b> este dat, programul va genera aleatoriu și a reveni număr întreg aleator numărul de range<b>[X; Y]</b>. Dar fără <b>Y</b> parametru gama va fi <b>[0; X]</b>. De exemplu",
        "randomDescriptionValueFirst":"``codat\nX = 10 \no = random(X) # [0; 10]\nde ieșire(o) # 4 \n``",
        "randomDescriptionValueSecond":"``codat\nX = 5 \nY = 15 \no = random(X,Y) # [5; 15]\nde ieșire(o) # 12\n``"
      },
      "tutorials":{
        "intro":"Introducere",
        "output":"Ieșire",
        "variables":"Variabile",
        "input":"Intrare",
        "operations":"Operațiunile",
        "conditions":"Condiții",
        "boolean":"Boolean",
        "languageAboutLanguageTitle":"Despre Limba",
        "languageAboutLanguageContent":"Codat este creat pentru toți cei care doresc să învețe programare noțiuni de bază în mod mai confortabil. \nPentru a afla cu Codat nu este esențială cunoașterea de limbi străine sau abilități tehnice. Tot ce ai nevoie este dorința de a învăța și de diligență. \n\n#### Caracteristici:\n- **Dicționar**\n- **Multiplatformă**\n- **Simplu cod Sursă**\n- **Gratuit**\n",
        "languageFeaturesTitle":"Caracteristici De Limbă",
        "languageFeaturesContent":"Codat este bazat pe Python, Pascal și JavaScript, făcându-l ușor să se înțeleagă cu simplu cod sursă și apoi să învețe un alt limbaj de programare mai repede. \n\n**Aici sunt toate conceptele de bază ale limbii:**\n\n- **Fiecare comandă pornește de la linie nouă.** \nCodul sursă va fi mult mai simplu și clar de acest fel.\n- **Comenzile pot fi scrise atât litere mari cât și litere mici.** \nAcesta accelereaza procesul de programare, dar e de preferat să scrie cu litere mici.\n- **Text pot fi scrise între ghilimele și apostrofuri.** \nÎn multe țări nu există ghilimele în uz, astfel încât aici puteți alege convenabil versiunea pentru tine.\n- **Text scris după simbolul \"\\#\" este considerat comentariu și nu are niciun efect cu privire la munca de cod sursă.** \nComentariile sunt furnizate pentru a lua notițe.",
        "outputCommandDefinitionTitle":"Comanda definiție",
        "outputCommandDefinitionContent":"Fiecare program, care face unele operațiuni, ar trebui să ne arate informații despre rezultat. De aceea, toate sistemele de programare au ieșire de text posibilitate și locul unde ne putem vedea rezultatul, care este numit **Terminal**. \n\nComanda \"*ieșire*\" este utilizat pentru ieșire de text. \n\n#### De exemplu \nCodul sursă``codat\nde ieșire(\"Salut\")\n`Rezultat`terminal\nSalutare\n``",
        "outputPossibleValuesTitle":"Valorile posibile",
        "outputPossibleValuesContent":"Comanda de ieșire poate imprima text, numere, operații matematice și valori variabile.\n\n#### De exemplu \nCodul sursă \n``codat\nde ieșire(100)\nde ieșire(5 * 25)\n`Rezultat`terminal\n100\n125\n``",
        "variablesDeclaresAndAssignsTitle":"Declararea și misiune",
        "variablesDeclaresAndAssignsContent":"De multe ori avem nevoie pentru a salva textul, numărul și operațiuni numerice undeva cu scopul de a-l folosească din nou. Containere, care ne poate salva de valori diferite sunt numite **variabile**. În primul rând trebuie să-i dau un nume de variabilă și apoi se atribuie o valoare. După aceasta ne putem referi la valoarea pur și simplu prin apelarea variabila cu numele său. \nVariabilele sunt stocate în memorie cu acces Aleator (RAM) a calculatorului și atunci când vom folosi variabila, calculator returnează valoarea corespunzătoare pentru că numele variabilei de memorie RAM.\n#### Important să ne amintim\nNume de variabile \n**1.** Poate conține litere, simboluri sau cifre \n**2.** Nu poate începe cu un număr \n**3.** Nu poate conține spațiu și simboluri de operații aritmetice\n#### De exemplu \nPentru imprimare număr **617** în loc de asta \n``codat\nde ieșire(617)\n``\nvom scrie\n``codat\nX = 617\nde ieșire(X)\n``\nRezultatul\n`terminal\n617\n`` \nȘi dacă vrem să ieșire aceeași valoare de trei ori, vom scrie \n``codat\nX = 617\nde ieșire(X)\nde ieșire(X)\nde ieșire(X)\n`` \nRezultatul \n`terminal\n617\n617\n617\n``",
        "variablesPracticalUseTitle":"Practice de utilizare",
        "variablesPracticalUseContent":"După cum vom vedea, putem atribui atât numerice și text de valori pentru variabile. Dar de multe ori avem nevoie pentru a atribui variabilei o valoare, care au fost atribuite la altul. În acest caz putem atribui deja existente variabilă la unul nou.\n#### De exemplu \nCodul sursă\n``codat\na = 1\nb = 2\nc = a + b\nde ieșire(c)\n`` \nRezultatul\n`terminal\n3\n``\n",
        "variablesMultipleUsesTitle":"Multiple de utilizare",
        "variablesMultipleUsesContent":"Nu trebuie să creați o nouă variabilă pentru o valoare nouă de fiecare dată. De asemenea, putem modifica valorile atribuite variabilelor. Vom evita inutile variabile și codul sursă va fi mult mai simplu așa.\n#### De exemplu\nSă presupunem că avem **100** mere și de a salva această valoare în **apple** variabilă. Numărul de mere a fost în scădere cu **5** în fiecare zi. \nTrebuie să ne ieșire numărul de mere pentru fiecare zi. \n\nCodul sursă\n``codat\napple a = 100\nde ieșire(apple)\n\napple = apple - 5 # 95\nde ieșire (apple)\n\napple = apple - 5 # 90\nde ieșire(apple)\n\napple = apple - 5 # 85\nde ieșire(apple)\n`` \nRezultatul\n`terminal\n100\n95\n90\n85\n``",
        "inputCommandDefinitionTitle":"Comanda definiție",
        "inputCommandDefinitionContent":"În programare, avem nevoie de ambele pentru ieșire și, în multe cazuri, datele de intrare. Avem nevoie de ea atunci când variabilele pot primi orice valoare. Avem, de asemenea, poate schimba codul sursă de fiecare dată și atribuie noi valori variabile, dar nu este eficient și are nevoie de prea mult timp. \n\nÎn acest caz, vom folosi comanda \"*intrare*\". \n\nȘi aici este un exemplu simplu de program care emite dublu față de numărul introdus de utilizator. ``codat\nde intrare(număr)\nde ieșire(numărul * 2)\n` După rularea acestui program vom vedea simbolul \"**>**\" ceea ce înseamnă că programul a început și avem nevoie să introduceți o lipsă de date. După introducerea orice număr și apăsarea **Intra** vom vedea dublu de introdus numărul. `terminal\n>617\n1234\n`Mai mult am nevoie pentru a scrie programe, care pot fi utilizate de către oameni, care nici măcar nu știu de programare.",
        "inputWorkMechanismTitle":"Mecanism de lucru",
        "inputWorkMechanismContent":"Acum, să vedem cum de intrare de comandă funcționează. De exemplu, avem acest program ``codat\nde ieșire(\"vă Rugăm să Introduceți acreditările:\")\nde ieșire(\"Numele:\")\nde intrare(nume)\nde ieșire(\"Numele:\")\nde intrare(numele de familie)\nde ieșire(\"Salut\" + nume + \"\" + prenume)\n`` Cum vom vedea, sunt 6 linii în programul nostru. \nDupă rularea-l putem vedea că programul a funcționat până la linia de 3.``terminal\nVă rugăm să introduceți acreditările dvs.:\nNume:\n>\n` După intrarea în dor de date, vom vedea că acum a funcționat până la linia 5.``terminal\nVă rugăm să introduceți acreditările dvs.:\nNume:\n>Marin\nPrenume:\n>\n` Și în cele din urmă, după intrarea în ultimul incurcat datele program va funcționa și sfârșitul.``terminal\nVă rugăm să introduceți acreditările dvs.:\nNume:\n>Marin\nPrenume:\n>Chamchyan\nSalut, Marin Chamchyan\n` Așa am văzut că, cu această comandă funcționează programul parte de către partea care necesită la intrare ratat de date.",
        "operationsArithmeticOperatorsTitle":"Operații aritmetice",
        "operationsArithmeticOperatorsContent":"În Codat este posibil să pună în aplicare operații aritmetice simple, ca **+**, **-**, **\\***, **/**. \n\nDe exemplu, acest program va face de toți operatorii aritmetici cu **1** și **2** numere. ``codat\nde ieșire(1 + 2) # 3\nde ieșire(1 - 2) # -1\nde ieșire(1 * 2) # 2\nde ieșire(1 / 2) # 0.5\n` ` #### Important să ne amintim \nDupă cum știm în Matematica de multiplicare variabil cu o altă variabilă sau un număr poate fi scris fără simbol de multiplicare. De exemplu *de 7 ori X* va fi scris **7X** sau *X ori Y* ca **XY**. \nDar în programare este important să se scrie simbolul de multiplicare. De exemplu, **7 \\* X**, sau **X \\* Y**.",
        "operationsExecutingPriorityTitle":"Operațiunile de executare prioritate",
        "operationsExecutingPriorityContent":"Atât în Matematică și în programare, dacă există o împărțire sau înmulțire, am în primul rând să le faci și numai după ce ne-am face de adunare și scădere. \n\n#### De exemplu ``codat\nX = 10 + 2 * 4 - 2\n# X = 10 + 8 - 2\n# X = 18 - 2\n# X = 16\n` Dar putem schimba executare prioritate prin utilizarea de paranteze. \n#### De exemplu ``codat\nX = (10 + 2) * (4 - 2)\n# X = 12 * (4 - 2)\n# X = 12 * 2\n# X = 24\n`În programare putem folosi paranteze, chiar dacă acestea sunt inutile. \nAcesta nu va fi greșit, dar e de preferat să scrie simplu și clar de cod sursă, care va fi ușor de înțeles pentru alții.",
        "operationsNumbersTitle":"Numere",
        "operationsNumbersContent":"După cum știm <a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">numbers</a> sunt obiecte matematice utilizate pentru a număra, a măsura și etichetă. \nExistă 5 tipuri de numere. Ne vom ocupa cu toate acestea, cu excepția complex numbes \n- ** numere naturale** **1**, **2**, ...``codat\nde ieșire(7 + 4) # 13\n`` \n- **numere întregi** ..., **-1**, **0**, **1**, ...``codat\nde ieșire(-6 * 5 + -3) # -33\n`` \n- **numere raționale** **1/2**, **2/3**, **0.125**, ...``codat\nde ieșire(0.617 * 2 * 1000) # 1234\n`` \n- **numere reale** **√2**, **1.62**, ...``codat\nde ieșire(2/3 + 1/2) # 1\n``",
        "operationsSumOfStringAndNumberTitle":"Suma de siruri de caractere și numere",
        "operationsSumOfStringAndNumberContent":"După cum vom vedea, este posibil să se adauge ambele numere și texte pentru fiecare alte, în care rezultatul linii sunt combinate într-o singură linie. Dar de multe ori avem nevoie pentru a obține o linie, în care vor fi folosite valoare numerică. În acest caz, este posibil pentru a adăuga text la număr, din care rezultă numărul va fi modificat și combinate cu textul ca text.``codat\ntext = \"nu sunt\" + 365 + \"de zile în an\"\n# text = \"nu sunt\" + \"365\" + \"de zile în an\"\n# text = \"nu sunt 365 de\" + \"de zile în an\"\n# text = \"nu sunt 365 de zile în an\"\n` ` #### Important să ne amintim \nCu linii putem face doar adăugarea de funcționare. În timp ce faci alte operațiuni vor duce eroare.",
        "conditionsCommandsIfTitle":"Comanda \"Dacă\"",
        "conditionsCommandsIfContent":"Uneori în programare trebuie să execute anumite operații în funcție de stare. Pentru că există condiția de verificare comenzi cum ar fi \"Dacă\", \"if-else\" și \"Altceva-Dacă\". \n\nScris formularul de comanda \"**Daca**\" ``codat\ndacă <condition> apoi\n<operation>\n` Aici între comenzi \"Dacă\" și \"atunci\" nu există nici o condiție, și după asta din nou linie și după **4 locuri** este scris operație (sau operații), care va fi făcut dacă afirmația este adevărată. \n\n#### De exemplu ``codat\na = 5\nb = 2\ndacă a > b atunci\nde ieșire(\"a > b\")\n``",
        "conditionsCommandsIfElseTitle":"Comanda \"If-Else\"",
        "conditionsCommandsIfElseContent":"Deci, noi știm cum să utilizați declarație condiționată în programe. Acum vom discuta cazul când condiția este falsă.\n\nScris sub formă de \"**if-Else**\" declarație ``codat\ndacă <condition> apoi\n<operation N1>\naltceva\n<operation N2>\n` Aici, după comandă \", Dacă\" există o nouă comandă \"Altceva\". Și de la rând nou, după 4 spații este scris de funcționare, care va fi făcut, dacă menționate condiția este falsă.\n\n#### De exemplu ``codat\na = 5\nb = 10\ndacă a > b\nde ieșire(\"a > b\")\naltceva\nde ieșire(\"b < o\")\n``",
        "conditionsCommandsElseIfTitle":"Comanda \"Altceva-Dacă\"",
        "conditionsCommandsElseIfContent":"Am discutat deja care comanda va fi executat pe baza condiției de a fi adevărat sau fals. Dar, uneori, avem nevoie pentru a verifica mai mult de o condiție în același timp. \n\nScris sub formă de \"**if-Else-If**\" declarație``codat\ndacă <condition N1> apoi\n<operation N1>\naltfel, dacă <condition N2> apoi\n<operation N2>\naltceva\n<operation N3>\n` Aici trebuie să verificați mai mult decât o singură condiție. În caz de \"Altceva-Dacă\" scris de formă nu poate fi 1 sau mai multe \"Altceva-Dacă\" declarații între comenzi \"Dacă\" și \"Altceva\". \n\n#### De exemplu ``codat\na = 5\nb = 5\ndacă a > b atunci\nde ieșire(\"a > b\")\naltfel, dacă a < b atunci\nde ieșire(\"a < b\")\naltceva\nde ieșire(\"b == o\")\n``",
        "booleanTypesBooleanTitle":"Descriere",
        "booleanTypesBooleanContent":"Știm deja cum să verifice declarațiile și unele dintre ele pot fi *adevărat* (22 > 18) sau *fals* (16 > 18). Uneori, din cauza lungimii de condiția de verificare linie, devine dificil pentru a citi codul sursă. Aici vine pentru a ajuta valori booleene \n\n- **adevărat** ``codat\ncondiție = true\nde ieșire(starea) #adevărat\n`` \n\n- **fals**``codat\nconditie = false\nde ieșire(starea) #false\n` Pentru orice boolean comparație cunoscut la noi se întoarce una din valorile date \n\nExemple de *adevărat* comparație ``codat\nconditie = 1 < 5\nde ieșire(starea) # adevărat\n` Pentru exemplul de *fals* comparație ``codat\nconditie = 10 < 5\nde ieșire(starea) # false\n` Atât în condiția de verificare comenzi putem folosi variabile cu valori booleene. \n\n#### De exemplu ``codat\nde ieșire(\"Scrie un număr \"a\":\")\nde intrare(a)\n\nde ieșire(\"Scrie o serie \"b\":\")\nde intrare(b)\n\ncondiție1 = a > b\ncondiție2 = o < b\n\ndacă condiție1 apoi\nrezultatul = \"a > b\"\naltfel, dacă condiție2 apoi\nrezultatul = \"a < b\"\naltceva\nrezultatul = \"a == b\"։\nde ieșire(\"Rezultat:\" + rezultat)\n``",
        "booleanOperatorsComparisonTitle":"Operatori de comparație",
        "booleanOperatorsComparisonContent":"În condiția de verificare comenzi avem deja folosite simbolurile \"mai mult\" > și \"mai puțin decât\" < operatori de comparație. Dar acum, aici putem folosi orice alte operatorii de cunoscut la noi. \n\n- **>** compară valorile numerice, în care primul este *#mai* mult de cel de-al doilea. De exemplu ``codat\nde ieșire(5 > 1) # adevărat\nde ieșire(1 > 5) # false\n`` \n\n- **>=** compară valorile numerice, în care primul este *#mai mare sau egal cu* cel de-al doilea. De exemplu ``codat\nde ieșire(5 >= 5) # adevărat\nde ieșire(1 >= 5) # false\n`` \n\n- **<** compară valorile numerice, în care primul este *#mai mic* decât cel de-al doilea. De exemplu ``codat\nde ieșire(1 < 5) # adevărat\nde ieșire(5 < 1) # false\n`` \n\n- **<=** compară valorile numerice, în care primul este *#mai mic sau egal cu* cel de-al doilea. De exemplu ``codat\nde ieșire(1 <= 5) # adevărat\nde ieșire(5 <= 1) # false\n`` \n\n- **==** compară numerice, text sau valori, în care primul este *#egală cu* cel de-al doilea. De exemplu ``codat\nde ieșire(5 == 5) # adevărat\nde ieșire(5 == 1) # false\nde ieșire(\"soldat\" == \"soldat\") # adevărat\nde ieșire(\"Hello\" == \"Elicopter\") # false\n`` \n\n- **!=** compară numerice, text sau valori, în care primul este *#nu este egal cu* cel de-al doilea. De exemplu ``codat\nde ieșire(5 != 1) # adevărat\nde ieșire(5 != 5) # false\nde ieșire(\"HelLo\" != \"Elicopterul\") # adevărat\nde ieșire(\"soldat\" != \"soldat\") # false\n`` \n\n- **()** se întoarce inversat rezultatul de orice numerice sau text comparație. De exemplu ``codat\nde ieșire(nu(1 > 5)) # adevărat\nde ieșire(nu(5 == 5)) # false\nde ieșire(nu(false)) # adevărat\nde ieșire(nu(adevărat)) # false\n``",
        "booleanOperatorsLogicalTitle":"Operatori booleeni",
        "booleanOperatorsLogicalContent":"Deci, noi știm cum să scrie orice declarație condițională, dar de multe ori avem nevoie de a combina o serie de condiții într-o singură, și pe baza a executa unele operațiuni. Combinarea de condiții are loc prin operatori booleeni. \n\n- Comanda \"**și**\" combină două condiții într-o singură, care este numit **adevărat** atunci când ambele condiții sunt *adevărat* și **fals** atunci când cel puțin una dintre condiții este *fals*. De exemplu ``codat\nde ieșire(5 > 1 և 10 < 100) # adevărat\nde ieșire(20 < 100 և 1 > 5) # false\n`` \n\n- Comanda \"**sau**\" combină două condiții într-o singură, care este numit **adevărat** atunci când cel puțin una dintre condiții este *adevărat* și **fals** atunci când cele două condiții sunt *fals*. De exemplu ``codat\nde ieșire(5 > 1 sau 100 < 10) # adevărat\nde ieșire(20 > 100 sau 1 > 5) # false\n``",
        "booleanOperatorsExecutingPriorityTitle":"De executare prioritate",
        "booleanOperatorsExecutingPriorityContent":"Am învățat cum să combine 2 condiții, dar ele pot fi mai mult de 2, bazat pe conținutul programului. În acest caz, condițiile vor fi combinate cu alte fiecare de la *de la stânga la dreapta*, până se formează o singură condiție.\n\n#### De exemplu ``codat\nde ieșire(5 < 1 և 1 < 7 sau 1 >= 3 sau 9 == 9)\n` pentru acest lucru este la fel ca `codat\nde ieșire(false և adevărat sau fals sau adevărat)\n` hai s-o combina **1** și **2** \"**fals și adevărat**\" condiții în una․ ``codat\nde ieșire(fals sau fals sau adevărat)\n`atunci **1+2** starea cu **3** va \"**false sau false**\" ``codat\nde ieșire(false sau true)\n` și în cele din urmă **1+2+3** starea cu **4** va \"**false sau true**\"․ ``codat\nde ieșire(adevărat)\n` Și așa ne-am combina 4 condiții într-o singură. Putem combina mai multe condiții. \n\nUneori avem nevoie pentru a schimba de la stânga la dreapta combinarea prioritate prin utilizarea de paranteze. \n\n#### De exemplu ``codat\nde ieșire(5 < 1 և (1 < 7 sau (1 >= 3 sau 9 == 9)))\n`` \n\nacest lucru este la fel ca `codat\nde ieșire(false և (adevărat sau (false sau true)))\n` hai s-o combina **3** și **4** \"**false sau true**\" în condiții o ``codat\nde ieșire(sau falsă (false sau true))\n` după ce l **2** cu condiția **3+4** condiția va fi \"**false sau true**\" ``codat\nde ieșire(false և adevărat)\n` și în cele din urmă să combine **1** starea cu **2+(3+4)**. Acesta va fi \"**fals și adevărat**\" ``codat\nde ieșire(false)\n` Și așa, am văzut că rezultatul este schimbat cu schimbarea combinarea prioritate."
      },
      "syntaxInfo":{
        "modalTitle":"Comanda ghid",
        "cheatSheetTitle":"Foaie de ieftin",
        "lesson":"Tutorial"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b> Hotkeys</b>",
      "undo":"Undo",
      "redo":"Redo",
      "selectAll":"Selectați toate",
      "run":"Rula",
      "terminal":"Terminal"
    },
    "program":{
      "program":"Program",
      "sourceCode":"Codul sursă",
      "functionArgumentSyntaxError":"Funcția de argument eroare de sintaxă în ${line} linie.",
      "undefinedVariable":"\"${variable}\" variabila nu este definit în ${line} linie.",
      "indentError":"Spațiu de eroare în ${line} linie.",
      "hackAttempt":"Hack încercare. Ta \"${ip}\" adresa ip a fost salvat în baza noastră de date.",
      "syntaxError":"Eroare de sintaxă",
      "timeout":"Compila timeout. Asigurați-vă că codul nu trebuie buclă infinită.",
      "true":"adevărat",
      "false":"false",
      "NaN":"necunoscut",
      "null":"necunoscut",
      "Infinity":"infinity",
      "undefined":"nedefinit"
    },
    "programListGroup":{
      "programs":"Programe"
    },
    "terminal":{
      "hotkeys":"<b> Hotkeys</b>",
      "undo":"Undo",
      "redo":"Redo",
      "selectAll":"Selectați toate",
      "terminal":"Terminal"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"Semn în"
    },
    "menuButton":{
      "settings":"Setări",
      "logOut":"Sign out"
    }
  },
  "panels":{
    "header":{
      "title":"Acasă"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"Utilizatorul nu are programe încă."
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"Nu aveți orice programe încă.",
      "programNotFoundClickPartFirst":"Faceți clic pe",
      "programNotFoundClickPartSecond":"aici",
      "programNotFoundClickPartThird":"pentru a crea un program nou."
    },
    "loading":{
      "loading":"Încărcare"
    }
  }
}