{
  "blocks":{
    "controlPanelBlock":{
      "edit":"Правка",
      "delete":"Удалить"
    },
    "lovePanelBlock":{
      "like":"Нравится",
      "liked":"Понравилось",
      "star":"В Избранное",
      "starred":"Избранное"
    },
    "moreFromUserBlock":{
      "viewAll":"Показать все",
      "moreFromFirst":"Еще от",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"Сортировать по",
      "recent":"Недавние",
      "views":"Просмотры",
      "stars":"Звезды",
      "likes":"Нравится",
      "random":"Случайное"
    },
    "shareBlock":{
      "link":"Ссылка",
      "share":"Поделиться",
      "tweet":"Твитнуть",
      "textTwitter":"Программа «${programTitle}» от ${userName} на #LinguaCode ${userPageLink}",
      "descriptionVK":"LinguaCode общедоступная платформа для кодирования, рассчитанная в первую очередь на детей. Здесь они могут учиться программированию и делиться кодами на своих родных языках, без надобности знания английского."
    },
    "userPrimaryInfoBlock":{
      "editProfile":"Редактировать профиль"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"Присоединился"
    }
  },
  "pages":{
    "errorPage":{
      "title":"Ошибка",
      "explanation":"К сожалению, на этой странице произошла критическая ошибка."
    },
    "landingPage":{
      "title":"LinguaCode: Обучение с Кодированием",
      "learningByCoding":"Обучение <span className=\"masthead--lora-italic\">с Кодированием</span>",
      "explanation":"Мы делаем обучение программированию и кодирование интересным и простым.",
      "facebookSignIn":"Войти через Facebook",
      "or":"или",
      "seeTheListOfPrograms":"Список существующих программ",
      "descriptionHead":"Лучший новый способ обучится программированию.",
      "descriptionBody":"LinguaCode общедоступная платформа для кодирования, рассчитанная в первую очередь для детей. Здесь они могут учиться программированию и делиться кодами на своих родных языках, без надобности знания английского.",
      "advantagesHeadline":"LinguaCode поможет вам <span className=\"u-emphasized\">обучится быстрее </span>",
      "advantageTopFirstHeadline":"Многоязычная",
      "advantageTopFirstDescription":"Пишите программы на своих родных языках, и не только.",
      "advantageTopSecondHeadline":"Это бесплатно!",
      "advantageTopSecondDescription":"Все бесплатно.",
      "advantageTopThirdHeadline":"Быстрый старт",
      "advantageTopThirdDescription":"Начать намного легче, чем Вам кажется!",
      "advantageBottomFirstHeadline":"Воображение",
      "advantageBottomFirstDescription":"Учитесь, попробуйте, творите!",
      "advantageBottomSecondHeadline":"Образование",
      "advantageBottomSecondDescription":"Изучайте программирование, как и другие предметы.",
      "advantageBottomThirdHeadline":"Сообщество",
      "advantageBottomThirdDescription":"Делитесь своими кодами с друзьями и находите новых друзей.",
      "joinText":"Присоединяйтесь к <span className=\"u-emphasized\">сообществу</span> учащихся",
      "facebookRegister":"Зарегистрируйтесь сейчас, это бесплатно!"
    },
    "notFoundPage":{
      "title":"Страница не найдена",
      "explanation":"Извините, запрашиваемая страница не существует.",
      "descriptionPartFirst":"Попробуйте перейте на",
      "descriptionPartSecond":"главная страница",
      "descriptionPartThird":"страницу."
    },
    "programChangePage":{
      "titleOfEditPage":"Редактировать ${userName}/${title} программу",
      "editProgramHeadline":"Редактировать программу",
      "editProgramButton":"Редактировать программу",
      "titleOfCreatePage":"Создать новую программу",
      "newProgramHeadline":"Создать новую программу",
      "submitProgramButton":"Опубликовать программу",
      "programContent":"Программа содержит всю информацию о вашем коде.",
      "name":"Название",
      "programNameForm":"Лучшие названия программ бывают короткие и запоминающиеся, как <b>hello-world</b>.",
      "titleOfProgram":"Заголовок",
      "description":"Описание",
      "validationError":"Ошибки при валидации",
      "errorTextForNameLength":"Длина <b>имени</b> должно быть больше чем 0 и меньше чем 32, оно должно состоять из латинских символов и черточек.",
      "errorTextForName":"Это имя уже используется вами.",
      "errorTextForTitle":"Длина <b>названии</b> должна быть более чем 0 и менее 128.",
      "errorTextForDescription":"Длина <b>описания</b> должна быть более чем 0 и менее 5120.",
      "errorTextForSource":"Длина <b>исходного кода</b> должна быть более чем 0 и менее 10240."
    },
    "programs":{
      "title":"Программы"
    },
    "settingsPage":{
      "title":"Настройки",
      "publicProfile":"Профиль",
      "validationError":"Ошибка при валидации",
      "username":"Имя пользователя",
      "yourUsername":"Ваше имя пользователя",
      "usernameWasAlreadyUsed":"Имя пользователя уже используется",
      "usernameWasReserved":"Имя пользователя зарезервирован",
      "usernameValidation":"Длина <b>имени пользователя</b> должен быть менее чем 24 и содержать маленькие буквы латиницы и цифры.",
      "name":"Имя",
      "yourFirstNameAndLastName":"Ваше имя и фамилия",
      "nameValidation":"Длина <b>имени</b> должна быть более чем 0 и менее 24",
      "bio":"О себе",
      "tellALittleAboutYourself":"Расскажите немного о себе",
      "bioValidation":"Длина <b>биографии</b> должна быть меньше, чем 128.",
      "country":"Страна",
      "select":"выбрать",
      "countryValidation":"Выберете страну",
      "updateProfile":"Обновить профиль"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"Войти",
      "signInDescription":"Эта операция возможна только тогда, когда вы войдете в систему."
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"Вы уверены, что хотите удалить программу?",
      "answerYes":"да",
      "answerNo":"нет"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"Вывод",
        "outputNameValue":"```linguacode\nвывод(X)\n```",
        "outputDescription":"Возвращает любое X значение: числа, операции, тексты и значения переменных. Например",
        "outputDescriptionValue":"```linguacode\nвывод(4)                        # 4\nвывод(«Привет!»)                # Привет!\nвывод(1+2)                      # 3\n```",
        "inputName":"Ввод",
        "inputNameValue":"```linguacode\nввод(a)\n```",
        "inputDescription":"Объявление переменной X от пользователя. Например",
        "inputDescriptionValue":"```linguacode\nввод(a)\n```",
        "ifElseStatementName":"Проверка условий",
        "ifElseStatementNameValue":"```linguacode\nесли <условие N1> тогда\n    <условие N1>\nиначе если <условие N2> тогда\n    <условие N2>\nиначе\n    <условие N3>\n```",
        "ifElseStatementDescription":"Операции выполнятся, если указанные условия будут верными. Например",
        "ifElseStatementDescriptionValue":"```linguacode\na = 5\nb = 5\nесли a > b тогда\n    вывод(«a > b»)\nиначе если a < b тогда\n    вывод(«a < b»)\nиначе\n    вывод(«b == a»)             # b == a\n```",
        "loopForName":"Ограниченный повтор",
        "loopForNameValue":"```linguacode\nповторять <N> раз\n    <операция>\n```",
        "loopForDescription":"Выполняет блок кода несколько раз. Например",
        "loopForDescriptionValue":"```linguacode\nповторять 10 раз\n    вывод(«Привет!»)\n```",
        "loopWhileDoName":"Цикл «пока-сделать»",
        "loopWhileDoNameValue":"```linguacode\nпока <условие> тогда\n    <операция>\n```",
        "loopWhileDoDescription":"Цикл \"Пока-сделать\" продолжает повторять блок кода до тех пор, пока условие все ещё истинное. Например",
        "loopWhileDoDescriptionValue":"```linguacode\na = 1\nпока a < 5 тогда\n    вывод(a)\n    a = a + 1\n```",
        "loopDoWhileName":"Цикл \"Do While\"",
        "loopDoWhileNameValue":"```linguacode\nсделать\n    <операция>\nпока <условие>\n```",
        "loopDoWhileDescription":"Действие будет повторяться, пока заданное условие выполняется. Например",
        "loopDoWhileDescriptionValue":"```linguacode\na = 1\nсделать \n    вывод(a)\n    a = a + 1\nпока a < 5\n```",
        "piName":"математическая константа pi",
        "piNameValue":"```linguacode\nвывод(pi)\n```",
        "piDescription":"Напечатает математический констант <b>pi</b>. Например",
        "piDescriptionValue":"```linguacode\nвывод(pi)                       # 3.141592653589793\n```",
        "eNumberName":"математическая константа е",
        "eNumberNameValue":"```linguacode\nвывод(e)\n```",
        "eNumberDescription":"Напечатает математический констант <b>e</b>. Например",
        "eNumberDescriptionValue":"```linguacode\nвывод(e)                        # 2.718281828459045\n```",
        "sqrName":"Квадрат числа",
        "sqrNameValue":"```linguacode\nкорень(X)\n```",
        "sqrDescription":"Возвращает квадрат введенного пользователем числа <b>X</b>. Например",
        "sqrDescriptionValue":"```linguacode\nX = 5 \nY = квадрат(X) \nвывод(Y)                        # 25\n```",
        "powName":"Степень числа",
        "powNameValue":"```linguacode\nстепень(X,Y)\n```",
        "powDescription":"Возвращает значение числа <b>X</b> в степени <b>Y</b>. Например",
        "powDescriptionValue":"```linguacode\nX = 2 \nY = 5 \nZ = степень(X, Y) \nвывод(Z)                        # 32\n```",
        "sqrtName":"Квадратный корень из числа",
        "sqrtNameValue":"```linguacode\nкорень(X)\n```",
        "sqrtDescription":"Возвращает квадратный корень из введенного пользователем числа<b>X</b>. Например",
        "sqrtDescriptionValue":"```linguacode\nX = 9 \nY = корень(X) \nвывод(Y)                        # 3\n```",
        "absName":"Абсолютная величина числа",
        "absNameValue":"```linguacode\nмодуль(X)\n```",
        "absDescription":"Возвращает абсолютную величину введенного пользователем числа<b>X</b>. Например",
        "absDescriptionValue":"```linguacode\nX = -5 \nY = модуль(X) \nвывод(Y)                        # 5\n```",
        "roundName":"Округление числа",
        "roundNameValue":"```linguacode\nокруглить(X)\n```",
        "roundDescription":"Округляет число <b>X</b> до ближайшего целого числа и возвращает значение. Например",
        "roundDescriptionValue":"```linguacode\nX = 2.3 \na = округлить(X) \nвывод(a)                        # 2\n```",
        "floorName":"Целая часть числа",
        "floorNameValue":"```linguacode\nокруглить_вниз(X)\n```",
        "floorDescription":"Округляет число <b>X</b> по направлению <b>вниз</b> - до ближайшего целого числа и возвращает значение. Например",
        "floorDescriptionValue":"```linguacode\nX = 2.6 \na = округлить_вниз(X) \nвывод(a)                        # 2\n```",
        "ceilName":"Округление числа до ближайшего целого в большую сторону",
        "ceilNameValue":"```linguacode\nокруглить_вверх(X)\n```",
        "ceilDescription":"Округляет число <b>X</b> до ближайшего целого в большую сторону и возвращает значение",
        "ceilDescriptionValue":"```linguacode\nX = 2.2 \na = округлить_вверх(X) \nвывод(a)                        # 3\n```",
        "sinName":"Синус",
        "sinNameValue":"```linguacode\nsin(X)\n```",
        "sinDescription":"Возвращает значение синуса числа <b>x</b>. Например",
        "sinDescriptionValue":"```linguacode\nX = sin(pi) \nвывод(X)                        # 0\n```",
        "cosName":"Косинус",
        "cosNameValue":"```linguacode\ncos(X)\n```",
        "cosDescription":"Возвращает значение <b>косинуса</b> числа <b>x</b>. Например",
        "cosDescriptionValue":"```linguacode\nX = cos(pi) \nвывод(X)                        # -1\n```",
        "tanName":"Тангенс",
        "tanNameValue":"```linguacode\ntan(X)\n```",
        "tanDescription":"Возвращает значение тангенса числа <b>x</b>. Например",
        "tanDescriptionValue":"```linguacode\nX = tan(pi) \nвывод(X)                        # 0\n```",
        "ctgName":"Котангенс",
        "ctgNameValue":"```linguacode\nctg(X)\n```",
        "ctgDescription":"Возвращает значение котангенса числа <b>x</b>. Например",
        "ctgDescriptionValue":"```linguacode\nX = ctg(pi/4) \nвывод(X)                        # 1\n```",
        "arcSinName":"Арксинус",
        "arcSinNameValue":"```linguacode\narcsin(X)\n```",
        "arcSinDescription":"Возвращает значение, при котором синус принимает то же значение что и <b>X</b>. Например",
        "arcSinDescriptionValue":"```linguacode\na = arcsin(1) \nвывод(a)                        # pi/2 \n```",
        "arcCosName":"Арккосинус",
        "arcCosNameValue":"```linguacode\narccos(X)\n```",
        "arcCosDescription":"Возвращает значение, при котором косинус принимает то же значение что и <b>X</b>. Например",
        "arcCosDescriptionValue":"```linguacode\na = arccos(1) \nвывод(a)                        # 0\n```",
        "arcTanName":"Арктангенс",
        "arcTanNameValue":"```linguacode\narctan(X)\n```",
        "arcTanDescription":"Возвращает значение, при котором тангенс принимает то же значение что и <b>X</b>. Например",
        "arcTanDescriptionValue":"```linguacode\na = arctan(0) \nвывод(a)                        # 0\n```",
        "arcCtgName":"Арккотангенс",
        "arcCtgNameValue":"```linguacode\narcctg(X)\n```",
        "arcCtgDescription":"Возвращает значение, при котором котангенс принимает то же значение что и <b>X</b>. Например",
        "arcCtgDescriptionValue":"```linguacode\na = arcctg(1) \nвывод(a)                        # pi/4\n```",
        "logName":"Логарифм",
        "logNameValue":"```linguacode\nlog(X,Y)\n```",
        "logDescription":"Возвращает значение логарифма <b>Y</b> по основанию <b>X</b>. Например",
        "logDescriptionValue":"```linguacode\na = log(3,27) \nвывод(a)                        # 3\n```",
        "lgName":"Десятичный логарифм",
        "lgNameValue":"```linguacode\nlg(Y)\n```",
        "lgDescription":"Возвращает значение логарифма <b>Y</b> по основанию <b>10</b>. Например",
        "lgDescriptionValue":"```linguacode\na = lg(100) \nвывод(a)                        # 10\n```",
        "lnName":"Натуральный логарифм",
        "lnNameValue":"```linguacode\nln(Y)\n```",
        "lnDescription":"Возвращает значение логарифма <b>Y</b> по основанию <b>e</b>. Например",
        "lnDescriptionValue":"```linguacode\na = ln(e) \nвывод(a)                        # 1\n```",
        "randomName":"Генерирование случайных чисел",
        "randomNameValue":"```linguacode\nслучайное(X,[Y])\n```",
        "randomDescription":"Если задан параметр <b>Y</b>, программа случайным образом сгенерирует и выдаст случайное целое число из промежутка <b>[X; Y]</b>. Без параметра <b>Y</b> промежутком будет уже <b>[0; X]</b>. Например",
        "randomDescriptionValueFirst":"```linguacode\nX = 10 \na = случайное(X)        # [0; 10]\nвывод(a)                        # 4 \n```",
        "randomDescriptionValueSecond":"```linguacode\nX = 5 \nY = 15 \na = случайное(X,Y)      # [5; 15]\nвывод(a)                        # 12\n```"
      },
      "tutorials":{
        "intro":"Введение",
        "output":"Вывод",
        "variables":"Переменные",
        "input":"Ввод",
        "operations":"Операции",
        "conditions":"Условия",
        "boolean":"Логические значения",
        "languageAboutLanguageTitle":"О языке",
        "languageAboutLanguageContent":"LinguaCode предназначен для тех, кто хочет изучать основы программирования по более удобному  способу.\nОбучение программированию через LinguaCode не требует знание иностранных языков или технических навыков. Всё что нужно - желание учиться и трудолюбие.\n#### Особенности:\n - **Многоязычный**\n - **Мультиплатформенный**\n - **Простой исходный код**\n - **Бесплатный**\n",
        "languageFeaturesTitle":"Особенности языка",
        "languageFeaturesContent":"LinguaCode основан на языках Python, Паскаль и JavaScript, что и делает исходный код более простым и понятным, дав возможность обучению других языков программирования.\n**Здесь представлены все основные понятия языка:**\n - **Каждая команда начинается с новой строки.**\nТаким образом исходный код получится более простым и понятным.\n - **Команды могут быть написаны как прописными, так и строчными буквами.** \nЭто ускоряет процесс программирования, но предпочтительно писать  строчными буквами.\n - **Текст можно писать как с кавычками так и между апострофами.**  \nВо многих странах  кавычки не используются. Здесь ты можешь выбрать более удобный вариант для тебя. \n - **Текст написанный после  «\\#» считается комментарием и не влияет на работу программы.** \nКомментарии предназначены для заметок.",
        "outputCommandDefinitionTitle":"Значение команды",
        "outputCommandDefinitionContent":"Каждая программа, которая выполняет некоторые операции, должна показать нам информацию о результате. Вот почему у всех системах программирования есть возможность вывода текста и место, где мы можем увидеть результат, который называется **терминал**. \n\nКоманда «*вывод*» используется для вывода текста. \n\n#### Например \nИсходный код ```linguacode\nвывод(«Привет!»)\n``` результат ```terminal\nПривет!\n```",
        "outputPossibleValuesTitle":"Возможные значения",
        "outputPossibleValuesContent":"Команда вывода может распечатать текст, цифры, математические операции и значение переменных.\n#### Например  \nИсходный код \n```linguacode\nвывод(100)\nвывод(5 * 25)\n```Результат```terminal\n100\n125\n```",
        "variablesDeclaresAndAssignsTitle":"Объявление и назначение",
        "variablesDeclaresAndAssignsContent":"Часто нам приходится где-то сохранить текст, число или арифметические операции с целью использовать их снова. Контейнеры, в которых можно сохранить различные значения, называются **переменные**. Сначала мы должны дать имя переменной, затем присвоить ей значение. Переменные хранятся в оперативной памяти компьютера (ОЗУ), и когда мы используем нужную переменную, компьютер возвращает значение соответствующее имени переменной из оперативной памяти.\n#### Важно помнить.\nИмена переменных\n**1.** Могут содержать буквы, числа или символы.\n**2.** Не могут начинаться с цифры.\n**3.** Не могут содержать пробел и символы арифметических операций.\n#### Например\nЧтобы вывести число **617**, вместо\n```linguacode\nвывод(617)\n```\nмы напишем\n```linguacode\nX = 617\nвывод(X)\n```\nРезультат\n```terminal\n617\n```  \nА если нам нужно вывести одно и тоже значение в 3 раза, мы напишем\n```linguacode\nX = 617\nвывод(X)\nвывод(X)\nвывод(X)\n```  \nРезультат  \n```terminal\n617\n617\n617\n```",
        "variablesPracticalUseTitle":"Практическое использование",
        "variablesPracticalUseContent":"Как видим, мы можем назначить переменным как числовые, так и текстовые значения. Но часто нам приходится присвоить переменной такое значение, которое до этого было назначено другому переменному. В этом случае мы можем назначить уже существующую переменную к новому.\n#### Например \nИсходный код\n```linguacode\na = 1\nb = 2\nc = a + b\nвывод(c)\n```  \nРезультат\n  ```terminal\n3\n```\n",
        "variablesMultipleUsesTitle":"Многократное использование",
        "variablesMultipleUsesContent":"Нам не нужно каждый раз создать новую переменную для сохранение новых значения. Мы можем просто изменить значения присвоенные переменным. Это дает возможность избежать от лишних переменных, и сделать исходный код более простым.\n#### Например\nИмеем **100** яблок. Сохраняем это значение в переменной **яблоко**. Представим, что количество яблок уменьшилась на 5 каждый день.\nОт нас требуется вывести количество яблок на каждый день.\n\nИсходный код\n```linguacode\nяблоко = 100\nвывод(яблоко)\n\nяблоко = яблоко - 5  # 95\nвывод(яблоко)\n\nяблоко = яблоко - 5  # 90\nвывод(яблоко)\n\nяблоко = яблоко - 5  # 85\nвывод(яблоко)\n```  \nРезультат\n```terminal\n100\n95\n90\n85\n```",
        "inputCommandDefinitionTitle":"Значение команды",
        "inputCommandDefinitionContent":"В программирование нам приходится как вывести, так и ввести данные. Это нам нужно, когда переменные могут иметь разные значение. Мы также можем изменить исходный код каждый раз,  но это не эффективно и потребует много времени.\n\nВ этом случае мы используем команду \"*ввод*\". \n\nА вот простой пример программы, которая выводит  введенное число умноженное на 2 ```linguacode\nввод(число)\nвывод(число * 2)\n``` После запуска программы мы увидим символ \"**>**\", который значит, что программа запустилась, и мы должны ввести нужные данные. После ввода любого числа и нажатия **пуск**, мы увидим кратное введенного числа. ```terminal\n>617\n1234\n``` В основном, мы должны создать программы, которые могут быть использованы теми, которые  не знают программирование.",
        "inputWorkMechanismTitle":"Механизм работы",
        "inputWorkMechanismContent":"А сейчас давайте посмотрим как работает команда ввода.\nНапример у нас есть эта программа:\n```linguacode\nвывод(\"Пожалуйста введите ваши данные.\")\nвывод(\"Имя\")\nввод(\"имя\")\nвывод(\"Фамилия\")\nввод(\"фамилия\")\nвывод(\"Привет\" + имя + фамилия)\n``` Как мы видим наша программа состоит из шести строк.\nПосле запуска мы видим, что программа выполнена до строки 3\n```terminal\nПожалуйста введите ваши данные.\nИмя\n>\n``` После введения нужного данного, мы увидим, что теперь программа выполнена до строки 5.\n```terminal\nПожалуйста введите ваши данные.\nИмя\n>Марине\nФамилия\n>\n``` И на конец после введения последнего нужного данного, программа будет завершена.\n```terminal\nПожалуйста введите ваши данные.\nИмя\n>Марине\nФамилия\n>Чамчян\nПривет Марине Чамчян\n``` Итак, мы увидели, что при использовании команды ввода, программа работает частично, требуя нужные данные.",
        "operationsArithmeticOperatorsTitle":"Арифметические действия",
        "operationsArithmeticOperatorsContent":"С LinguaCod можно выполнять простые арифметические операции такие, как **+**, **-**, **\\***, **/**. \nНапример эта программа выполнит все арифметические операции с цифрами **1** и **2**.\n```linguacode\nвывод(1 + 2)  # 3\nвывод(1 - 2)  # -1\nвывод(1 * 2)  # 2\nвывод(1 / 2)  # 0.5\n``` #### Важно помнить\nКак мы знаем, в математике умножение переменной с другим переменным или цифрам можно написать без символа умножения. Например *7 раз X* будет написан **7X** или * X раз Y* - **XY**.\nНо в программирование важно написать символ умножения.  Например  **7 \\* X**, или **X \\* Y**.",
        "operationsExecutingPriorityTitle":"Приоритет выполнения операций",
        "operationsExecutingPriorityContent":"Как в математике, так и в программировании, сначала выполняются все действия умножения и деления, и только после этого все действия сложения и вычитания.\n\n#### Например  ```linguacode\nХ = 10 + 2 * 4 - 2\n# Х = 10 + 8 - 2\n# Х = 18 - 2\n# Х = 16\n```  Но мы можем изменить приоритет выполнения при помощи скобок. \n#### Например  ```linguacode\nХ = (10 + 2) * (4 - 2)\n# Х = 12 * (4 - 2)\n# Х = 12 * 2\n# Х = 24\n``` В программировании мы можем использовать скобки, даже если они являются ненужными. \nЭто ошибкой не будет, но предпочтительно написать простой и понятный код, который легко понятен другим.",
        "operationsNumbersTitle":"Числа",
        "operationsNumbersContent":"Как мы знаем, <a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">числа</a> -математические объекты, используемые для подсчета, измерения и метки. \nСуществует 5 видов чисел. Мы будем иметь дело со всеми из них, кроме комплексных чисел.\n- **Натуральные числа** **1**, **2**, ...```linguacode\nвывод(7 + 4)  # 13\n```  \n - **Целые числа** ..., **-1**, **0**, **1**, ...```linguacode\nвывод(-6 * 5 + -3)  # -33\n```  \n - **Рациональные числа** **1/2**, **2/3**, **0.125**, ...```linguacode\nвывод(0.617 * 2 * 1000)  # 1234\n``` \n - **Действительные числа** **√2**, **1.62**, ...```linguacode\nвывод(2/3 + 1/2)  # 1\n```",
        "operationsSumOfStringAndNumberTitle":"Сумма строк и цифыр",
        "operationsSumOfStringAndNumberContent":"Как видим, мы можем сложить как числа, так и тексты. В результате строки просто объединяются. Но часто нам нужно получить строку, в котором будет использоваться числовое значение. В этом случае можно добавить текст к числу, в результате которого число будет изменен в сочетании с текстом.\n``linguacode\n текст = «в году » + 365 + « дней»\n# текст = «в году » + «365» + « дней»\n# текст = «в году 365» + « дней»\n# текст = «в году 365 дней»\n```  #### Важно помнить  \nСтроки мы можем только сложить. Выполнение других операций приведет к ошибке.",
        "conditionsCommandsIfTitle":"Комманда «если»",
        "conditionsCommandsIfContent":"Иногда в программирование нам необходимо выполнить некоторые операции в зависимости от условий. Для этого есть команды \"если\", \"если-иначе\"  и \"иначе-если\"  для проверки состояния.\nПисьменная форма команды «**если**»  ```linguacode\nесли <условие> тогда\n    <операция>\n``` Здесь, между командами «если» и «тогда» записывается условия, и уже после этого, с новой строки, после **4 пробел** записывается операция, которая должна выполниться, если условия верно.\n#### Например ```linguacode\na = 5\nb = 2\nесли a > b тогда\n    вывод(«a > b»)\n```",
        "conditionsCommandsIfElseTitle":"Комманда «если-иначе»",
        "conditionsCommandsIfElseContent":"Итак, мы узнали, как использовать условный оператор в программах. Теперь рассмотрим случай, когда условия ложно.\n\nПисьменная форма  команды «**если-иначе**» ```linguacode\nесли <условиe> тогда\n    <операция N1>\nиначе\n    <операция N2>\n``` Здесь после команды \"если\" есть и другая команда \"иначе\".  И  с новой строки, после 4 пробел записывается операция, которая должна выполниться, если условия ложная.\n\n#### Например ```linguacode\na = 5\nb = 10\nесли a > b\n    вывод(«a > b»)\nиначе\n    вывод(«b < a»)\n```",
        "conditionsCommandsElseIfTitle":"Комманда «иначе-если»",
        "conditionsCommandsElseIfContent":"Мы уже обсуждали, какие команды будут выполняться, основываясь на условии быть истинным или ложным. Но иногда нам нужно проверить несколько условий одновременно. \n\nПисьменная форма команды \"**если-иначе-если**\" ```linguacode\nесли <условие N1> тогда\n    <операция N1>\nиначе если <условие N2> тогда\n    <операция N2>\nиначе\n    <операция N3>\n``` Здесь мы должны проверить более чем одно условие.  Между командами \"иначе-если\" могут быть более чем 1 \"если\" или \"иначе\".\n\n#### Например ```linguacode\na = 5\nb = 5\nесли a > b тогда\n    вывод(«a > b»)\nиначе если a < b тогда\n    вывод(«a < b»)\nиначе\n    вывод(«b == a»)\n```",
        "booleanTypesBooleanTitle":"Описание",
        "booleanTypesBooleanContent":"Мы уже знаем  как проверить  условия, которые могут быть *правильными* (22 > 18) или *ложными* (16 > 18). Иногда, из-за длины условный проверочной строки, исходный код становится трудно понять. Здесь приходят на помощь логические значения.\n\n - **правильный** ```linguacode\nусловие = правда\nвывод(условие)  #правда\n```  \n\n- **ложный**```linguacode\nусловие = ложь\nвывод(условие)  #ложь\n```\nЛюбое известное нам логическое сравнение возвращает одно из указанных значение.\n\nПример  *правильного*  сравнение ```linguacode\nусловие = 1 < 5\nвывод(условие)  # правда\n``` Пример *ложного*  сравнение ```linguacode\nусловие = 10 < 5\nвывод(условие)  # ложь\n``` Итак, в  условных проверочных команд мы можем использовать переменные с логическими значениями.  \n\n#### Например ```linguacode\nвывод(«Напишите число \"a\":»)\nввод(a)\n\nвывод(«Напишите число \"b\":»)\nввод(b)\n\nусловие1 = a > b\nусловие2 = a < b\n\nесли условие1 тогда\n     результат = «a > b»\nиначе если условие2 тогда\n     результат = «a < b»\nиначе\n     результат = «a == b»։\nвывод(«Результат: » +  результат)\n```",
        "booleanOperatorsComparisonTitle":"Операторы сравнения",
        "booleanOperatorsComparisonContent":"В условие проверки команд мы уже использовали символы больше \">\" и меньше \"<\" операторы сравнения. Но теперь здесь мы можем использовать любые другие известные нам операторы. \n\n - **>** Сравнивает численные значение, где первое значение должно быть больше чем второе. Например ```linguacode\nвывод(5 > 1)  # правда\nвывод(1 > 5)  # ложь\n```  \n\n - **>=** Сравнивает численные значение, где первое значение должно быть больше или ровно чем второе. Например ```linguacode\nвывод(5 >= 5)  # правда\nвывод(1 >= 5)  # ложь\n```  \n\n - **<** Сравнивает численные значение, где первое значение должно быть меньше чем второе. Например ```linguacode\nвывод(1 < 5)  # правда\nвывод(5 < 1)  # ложь\n```  \n\n - **<=** Сравнивает численные значение, где первое значение должно быть меньше или ровно чем второе. Например ```linguacode\nвывод(1 <= 5)  # правда\nвывод(5 <= 1)  # ложь\n```  \n\n - **==** Сравнивает численные значение, где первое значение должно быть ровно ко второму. Например ```linguacode\nвывод(5 == 5)  # правда\nвывод(5 == 1)  # ложь\nвывод(«Военный» == «Военый»)  # правда\nвывод(«Привет» == «Превед»)  # ложь\n```  \n\n - **!=** Сравнивает численные значение, где первое значение должно быть не ровно ко второму. Например ```linguacode\nвывод(5 != 1)  # правда\nвывод(5 != 5)  # ложь\nвывод(«Привет» != «Превед») # правда\nвывод(«Военный» != «Военый»)  # ложь\n```  \n\n - **не()** возвращает обратный результат любого логического значения. Например ```linguacode\nвывод(не(1 > 5))  # правда\nвывод(не(5 == 5))  # ложь\nвывод(не(ложь))  # правда\nвывод(не(правда))  # ложь\n```",
        "booleanOperatorsLogicalTitle":"Логические операторы",
        "booleanOperatorsLogicalContent":"Мы уже узнали, как пишутся условные операторы, но часто нам приходится объединять несколько условие в одном, и выполнять некоторые операции основываясь на них. Объединение некоторых условии возможно используя логические операторы.\n\nКоманда «**и**» объединяет 2 условие в одном, которая будет назваться **правда**, если две условии будут иметь значение **правда** и **ложь**, если хотя бы один из условий будет иметь значение **ложь**.  Например\n```linguacode\nвывод(5 > 1 и 10 < 100)  # правда\nвывод(20 < 100 и 1 > 5)  # ложь\n```  \nКоманда «**или**» объединяет 2 условие в одном, которая будет назваться **правда**, если хотя бы один из условий будет иметь значение **правда** и **ложь**, если две условии будут иметь значение **ложь**.  Например ```linguacode\nвывод(5 > 1 or 100 < 10)  # правда\nвывод(20 > 100 or 1 > 5)  # ложь\n```",
        "booleanOperatorsExecutingPriorityTitle":"Приоритет выполнения",
        "booleanOperatorsExecutingPriorityContent":"Мы узнали, как совместить 2 условия, но они могут быть больше, чем 2, на основе содержания программы. В этом случае, условия будут сочетаться друг с другом от *слева направо*, пока они не образуют одно условие.\n\n#### Например ```linguacode\nвывод(5 < 1 и 1 < 7 или 1 >= 3 или 9 == 9)\n``` this is the same as ```linguacode\nвывод(ложь и правда или ложь или правда)\n``` Давайте совместим **1-ое** и **2-ое** \"**ложь и правда**\" условие в одно․  ```linguacode\nвывод(ложь или ложь или правда)\n```тогда **1+2** условие с **3-й** будет \"**ложь или ложь**\" ```linguacode\nвывод(ложь или правда)\n``` и наконец **1+2+3** условие с **4-ой** будет \"**ложь или правда**\"․ ```linguacode\nвывод(правда)\n``` в итоге мы совместили 4 условия в одно. По этим же методом мы сможем скомбинировать условия любого количества.  \n\nSometimes we need to change left to right combining priority by using brackets.  \nИногда нам понадобится изменить приоритет выполнения от левого направо с помощью скобок.\n\n#### Например ```linguacode\nвывод(5 < 1 и (1 < 7 или (1 >= 3 или 9 == 9)))\n```  \n\nэто тоже самое что и ```linguacode\nвывод(ложь и (правда или (ложь или правда)))\n``` Давайте совместим **3-ий** и **4-ий** \"**ложь или правда**\" условие в одно․  ```linguacode\nвывод(ложь или (ложь или правда))\n``` после этого **2-ое** условие со **3+4** условием будет \"**ложь или правда**\" ```linguacode\nвывод(ложь и правда)\n``` и наконец совместим **1-ое** условие со **2+(3+4)**. Оно \"**ложь и правда**\" ```linguacode\nвывод(ложь)\n``` в итоге мы увидели как использование скобок влияет на приоритет выполнения."
      },
      "syntaxInfo":{
        "modalTitle":"Руководство команд",
        "cheatSheetTitle":"Шпаргалка",
        "lesson":"Учебник"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b> Горячие клавиши</b>",
      "undo":"Отменить",
      "redo":"Вернуть",
      "selectAll":"Выделить все",
      "run":"Запуск",
      "terminal":"Терминал"
    },
    "program":{
      "program":"Программа",
      "sourceCode":"Исходный код",
      "functionArgumentSyntaxError":"Синтаксическая ошибка аргумента функции в строке ${line}.",
      "undefinedVariable":"Переменная «${variable}» не определена в строке ${line}.",
      "indentError":"Ошибка пробели в ${line} линии.",
      "hackAttempt":"Попытка взлома. Ваш IP-адрес «${ip}» был сохранен в нашей базе данных.",
      "syntaxError":"Синтаксическая ошибка",
      "timeout":"Время ожидания истекло. Убедитесь, что код не имеет вечный цикл.",
      "true":"правда",
      "false":"ложь",
      "NaN":"неизвестное",
      "null":"неизвестное",
      "Infinity":"бесконечное",
      "undefined":"необъявленный"
    },
    "programListGroup":{
      "programs":"Программы"
    },
    "terminal":{
      "hotkeys":"<b> Горячие клавишы</b>",
      "undo":"Отменить",
      "redo":"Вернуть",
      "selectAll":"Выделить все",
      "terminal":"Терминал"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"Войти"
    },
    "menuButton":{
      "settings":"Настройки",
      "logOut":"Выйти"
    }
  },
  "panels":{
    "header":{
      "title":"Домашняя страница"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"Пользователь пока не имеет програм."
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"Вы пока не имеете програм.",
      "programNotFoundClickPartFirst":"Нажмите",
      "programNotFoundClickPartSecond":"здесь",
      "programNotFoundClickPartThird":"чтобы создать новую программу."
    },
    "loading":{
      "loading":"Загрузка"
    }
  }
}