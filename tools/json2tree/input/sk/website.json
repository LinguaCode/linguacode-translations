{
  "blocks":{
    "controlPanelBlock":{
      "edit":"Upraviť",
      "delete":"Vymazať"
    },
    "lovePanelBlock":{
      "like":"Ako",
      "liked":"Páčilo",
      "star":"Hviezda",
      "starred":"Hral"
    },
    "moreFromUserBlock":{
      "viewAll":"Zobraziť všetky",
      "moreFromFirst":"Viac z",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"Zoradiť podľa",
      "recent":"Posledných",
      "views":"Názory",
      "stars":"Hviezdy",
      "likes":"Rád",
      "random":"Náhodný"
    },
    "shareBlock":{
      "link":"Odkaz",
      "share":"Zdieľať",
      "tweet":"Tweet",
      "textTwitter":"Program \"${programTitle}\" ${userName} na #LinguaCode ${userPageLink}",
      "descriptionVK":"LinguaCode je sociálna kódovanie platformy a je určená hlavne pre deti, kde sa môžu dozvedieť programovanie a zdieľať ich kódy s ich rodnom jazyku a bez nutnosti znalosti angličtiny."
    },
    "userPrimaryInfoBlock":{
      "editProfile":"Upraviť profil"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"Pripojil na"
    }
  },
  "pages":{
    "errorPage":{
      "title":"Chyba",
      "explanation":"Ospravedlňujeme sa, kritická chyba na tejto stránke."
    },
    "landingPage":{
      "title":"LinguaCode: Učenie Kódovanie",
      "learningByCoding":"Učenie <span className=\"masthead--lora-italic\">by Coding</span>",
      "explanation":"Sme, aby učenie programovanie a kódovanie, takže plné radosti a života, budete smiať nahlas.",
      "facebookSignIn":"Prihláste sa pomocou Facebook",
      "or":"alebo",
      "seeTheListOfPrograms":"Pozri zoznam existujú programy",
      "descriptionHead":"Najlepšie nový spôsob, ako sa naučiť programovanie.",
      "descriptionBody":"LinguaCode je sociálna kódovanie platformy a je určená hlavne pre deti, kde sa môžu dozvedieť programovanie a zdieľať ich kódy s ich rodnom jazyku a bez nutnosti znalosti angličtiny.",
      "advantagesHeadline":"LinguaCode pomáha <span className=\"u-emphasized\">learn lepšie </span>",
      "advantageTopFirstHeadline":"Viacjazyčný",
      "advantageTopFirstDescription":"Písať programy na vašom rodnom jazyku, a to nielen.",
      "advantageTopSecondHeadline":"Je to zadarmo!",
      "advantageTopSecondDescription":"Všetko je zadarmo.",
      "advantageTopThirdHeadline":"Rýchly štart",
      "advantageTopThirdDescription":"Začíname, je oveľa jednoduchšie, než si myslíte!",
      "advantageBottomFirstHeadline":"Predstavivosť",
      "advantageBottomFirstDescription":"Učiť, snažiť Vytvoriť!",
      "advantageBottomSecondHeadline":"Vzdelanie",
      "advantageBottomSecondDescription":"Zistite, programovanie, rovnako ako iné predmety.",
      "advantageBottomThirdHeadline":"Spoločenstva",
      "advantageBottomThirdDescription":"Podiel programov s priateľmi a nájsť nových priateľov.",
      "joinText":"Pripojte sa k <span className=\"u-emphasized\">the community</span> študentov",
      "facebookRegister":"Zaregistrujte sa teraz, je to ZADARMO!"
    },
    "notFoundPage":{
      "title":"Stránka Nebola Nájdená",
      "explanation":"Ospravedlňujeme sa, ale stránka, ktorú sa pokúšate zobraziť, neexistuje.",
      "descriptionPartFirst":"Skúste položky k",
      "descriptionPartSecond":"hlavná stránka",
      "descriptionPartThird":"namiesto toho."
    },
    "programChangePage":{
      "titleOfEditPage":"Upraviť ${userName}/${title} program",
      "editProgramHeadline":"Upraviť program",
      "editProgramButton":"Upraviť Program",
      "titleOfCreatePage":"Vytvoriť nový program",
      "newProgramHeadline":"Vytvoriť nový program",
      "submitProgramButton":"Predložiť Program",
      "programContent":"Program obsahuje všetky informácie o vašom kóde.",
      "name":"Názov",
      "programNameForm":"Skvelý program mená sú krátke a nezabudnuteľné, ako <b>hello-world</b>.",
      "titleOfProgram":"Hlava",
      "description":"Popis",
      "validationError":"Potvrdzovanie chýb",
      "errorTextForNameLength":"Dĺžka <b>name</b> by viac ako 0 a menej 32, mala by pozostávať z latinskej symboly a pomlčky.",
      "errorTextForName":"Tento názov zdroja je už používa.",
      "errorTextForTitle":"Dĺžka <b>title</b> by viac ako 0 a menej potom 128.",
      "errorTextForDescription":"Dĺžka <b>description</b> by viac ako 0 a menej potom 5120.",
      "errorTextForSource":"Dĺžka <b>source</b> by viac ako 0 a menej potom 10240."
    },
    "programs":{
      "title":"Programy"
    },
    "settingsPage":{
      "title":"Nastavenia",
      "publicProfile":"Verejný profil",
      "validationError":"Potvrdzovanie chýb",
      "username":"Užívateľské meno",
      "yourUsername":"Vaše užívateľské meno",
      "usernameWasAlreadyUsed":"Užívateľské meno bolo už použité",
      "usernameWasReserved":"Užívateľské meno bolo vyhradené.",
      "usernameValidation":"Dĺžka <b>username</b> by mal byť menej ako 24 a obsahujú malé písmená latinskej a čísla.",
      "name":"Názov",
      "yourFirstNameAndLastName":"Vaše meno a priezvisko",
      "nameValidation":"Dĺžka <b>name</b> by mal byť viac ako 0 a menej a potom 24",
      "bio":"Bio",
      "tellALittleAboutYourself":"Povedz niečo o sebe",
      "bioValidation":"Dĺžka <b>bio</b> by mal byť menej ako 128.",
      "country":"Krajina",
      "select":"vyberte",
      "countryValidation":"Vyberte si akýkoľvek z krajín",
      "updateProfile":"Profil aktualizácie"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"Prihláste sa",
      "signInDescription":"Prevádzky je možné len ak ste prihlásený."
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"Ste si istý, že chcete odstrániť program ?",
      "answerYes":"áno",
      "answerNo":"žiadne"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"Výstup",
        "outputNameValue":"``linguacode\nvýstup(X)\n``",
        "outputDescription":"Vypíše všetky X hodnota: čísla, operácie, text a hodnoty premenných. Napríklad",
        "outputDescriptionValue":"``linguacode\nvýstup(4) # 4\nvýstup(\"Ahoj\") # Ahoj\nvýstup(1+2) # 3\n``",
        "inputName":"Vstup",
        "inputNameValue":"``linguacode\nvstup(X)\n``",
        "inputDescription":"Všetky X hodnota premennej prehlasuje užívateľ. Napríklad",
        "inputDescriptionValue":"``linguacode\npríkon(a)\n``",
        "ifElseStatementName":"Kontrola výkazu",
        "ifElseStatementNameValue":"``linguacode\nak <condition N1> potom\n<operation N1>\ninak ak <condition N2> potom\n<operation N2>\niné\n<operation N3>\n``",
        "ifElseStatementDescription":"Operácie sa vykonávajú na základe uvedených podmienkou je pravda. Napríklad",
        "ifElseStatementDescriptionValue":"``linguacode\na = 5\nb = 5\nak a > b, tak\nvýstup(\"a > b\")\ninak, ak a < b, potom\nvýstup (\"<b\")\niné\nvýstup(\"b ==\") # b == \n``",
        "loopForName":"Obmedzené opakovať",
        "loopForNameValue":"``linguacode\nopakujte <N> krát\n<operation>\n``",
        "loopForDescription":"Vykonáva blok kódu niekoľkokrát. Napríklad",
        "loopForDescriptionValue":"``linguacode\nopakujte 10-krát\nvýstup(\"Ahoj\")\n``",
        "loopWhileDoName":"Slučky \", Zatiaľ Čo Robiť\"",
        "loopWhileDoNameValue":"``linguacode\nzatiaľ čo <condition> potom\n<operation>\n``",
        "loopWhileDoDescription":"\"Zatiaľ čo Urobiť,\" slučka sa vykoná prostredníctvom blok kódu, ktorý tak dlho, ako zadaná podmienka je splnená. Napríklad",
        "loopWhileDoDescriptionValue":"``linguacode\na = 1\nhoci < 5 potom\nvýstup(a)\na = a + 1\n``",
        "loopDoWhileName":"Slučky \"Robiť, Keď\"",
        "loopDoWhileNameValue":"``linguacode\nrobiť\n<operation>\nzatiaľ čo <condition>\n``",
        "loopDoWhileDescription":"Slučky \", Zatiaľ čo\" sa bude opakovať slučky, pokiaľ podmienka platí. Napríklad",
        "loopDoWhileDescriptionValue":"``linguacode\na = 1\nrobiť \nvýstup(a)\na = a + 1\nhoci < 5\n``",
        "piName":"pi matematická konštanta",
        "piNameValue":"``linguacode\nvýstup(pi)\n``",
        "piDescription":"Vytlačí matematická konštanta <b>pi</b>. Napríklad",
        "piDescriptionValue":"``linguacode\nvýstup(pi) # 3.141592653589793\n``",
        "eNumberName":"e matematická konštanta",
        "eNumberNameValue":"``linguacode\nvýstup(e)\n``",
        "eNumberDescription":"Vytlačí matematická konštanta <b>e</b>. Napríklad",
        "eNumberDescriptionValue":"``linguacode\nvýstup(e) # 2.718281828459045\n``",
        "sqrName":"Námestie číslo",
        "sqrNameValue":"``linguacode\nsqr(X)\n``",
        "sqrDescription":"Vráti námestie <b>X</b> číslo inputted užívateľ. Napríklad",
        "sqrDescriptionValue":"``linguacode\nX = 5 \nY = sqr(X) \nvýstup(Y) # 25\n``",
        "powName":"Moc číslo",
        "powNameValue":"``linguacode\npow(X,Y)\n``",
        "powDescription":"Vracia hodnotu <b>X</b> k moci <b>Y</b>. Napríklad",
        "powDescriptionValue":"``linguacode\nX = 2 \nY = 5 \nZ = c(X, Y) \nvýstup(Z) # 32\n``",
        "sqrtName":"Odmocnina z čísla",
        "sqrtNameValue":"``linguacode\nsqrt(X)\n``",
        "sqrtDescription":"Vráti druhú odmocninu z <b>X</b> číslo inputted užívateľ. Napríklad",
        "sqrtDescriptionValue":"``linguacode\nX = 9 \nY = sqrt(X) \nvýstup(Y) # 3\n``",
        "absName":"Absolútna hodnota čísla",
        "absNameValue":"``linguacode\nabs(X)\n``",
        "absDescription":"Vráti absolútnu hodnotu <b>X</b> číslo inputted užívateľ. Napríklad՝",
        "absDescriptionValue":"``linguacode\nX = -5 \nY = abs(X) \nvýstup(Y) # 5\n``",
        "roundName":"Počet zaokrúhľovania",
        "roundNameValue":"``linguacode\nround(X)\n``",
        "roundDescription":"Kôl je <b>X</b> číslo na najbližšiu celočíselnú hodnotu a vracia hodnotu. Napríklad",
        "roundDescriptionValue":"``linguacode\nX = 2.3 \na = round(X) \nvýstup(a) # 2\n``",
        "floorName":"Počet poschodí",
        "floorNameValue":"``linguacode\nfloor(X)\n``",
        "floorDescription":"Kôl je <b>X</b> číslo <b>downwards</b> na najbližšiu celočíselnú hodnotu a vracia hodnotu. Napríklad",
        "floorDescriptionValue":"``linguacode\nX = 2.6 \na = floor(X) \nvýstup(a) # 2\n``",
        "ceilName":"Počet ceil",
        "ceilNameValue":"``linguacode\nceil(X)\n``",
        "ceilDescription":"Kolo je <b>X</b> číslo <b>upwards</b> na jeho najbližšiu celočíselnú hodnotu a vracia hodnotu",
        "ceilDescriptionValue":"``linguacode\nX = 2.2 \na = ceil(X) \nvýstup(a) # 3\n``",
        "sinName":"Sine",
        "sinNameValue":"``linguacode\nsin(X)\n``",
        "sinDescription":"Vráti hodnotu <b>sine</b> z <b>X</b> číslo. Napríklad",
        "sinDescriptionValue":"``linguacode\nX = sin(pi) \nvýstup(X) # 0\n``",
        "cosName":"Cosine",
        "cosNameValue":"``linguacode\ncos(X)\n``",
        "cosDescription":"Vráti hodnotu <b>cosine</b> z <b>X</b> číslo. Napríklad",
        "cosDescriptionValue":"``linguacode\nX = cos(pi) \nvýstup(X) # -1\n``",
        "tanName":"Dotyčnice",
        "tanNameValue":"``linguacode\ntan(X)\n``",
        "tanDescription":"Vráti hodnotu <b>tangent</b> z <b>X</b> číslo. Napríklad՝",
        "tanDescriptionValue":"``linguacode\nX = tan(pi) \nvýstup(X) # 0\n``",
        "ctgName":"Cotangent",
        "ctgNameValue":"``linguacode\nctg(X)\n``",
        "ctgDescription":"Vráti hodnotu <b>cotangent</b> z <b>X</b> číslo. Napríklad՝",
        "ctgDescriptionValue":"``linguacode\nX = ctg(pi/4) \nvýstup(X) # 1\n``",
        "arcSinName":"Arkussínus",
        "arcSinNameValue":"``linguacode\narcsin(X)\n``",
        "arcSinDescription":"Vráti hodnotu kde sine dostane rovnakú hodnotu ako <b>X</b>. Napríklad",
        "arcSinDescriptionValue":"``linguacode\na = arcsin(1) \nvýstup(a) # pi/2 \n``",
        "arcCosName":"Arkuskosínus",
        "arcCosNameValue":"``linguacode\narccos(X)\n``",
        "arcCosDescription":"Vráti hodnotu kde kosínus dostane rovnakú hodnotu ako <b>X</b>. Napríklad",
        "arcCosDescriptionValue":"``linguacode\na = arccos(1) \nvýstup(a) # 0\n``",
        "arcTanName":"Arkustangens",
        "arcTanNameValue":"``linguacode\narctan(X)\n``",
        "arcTanDescription":"Vráti hodnotu kde dotyčnice dostane rovnakú hodnotu ako <b>X</b>. Napríklad",
        "arcTanDescriptionValue":"``linguacode\na = arctan(0) \nvýstup(a) # 0\n``",
        "arcCtgName":"Arccotangent",
        "arcCtgNameValue":"``linguacode\narcctg(X)\n``",
        "arcCtgDescription":"Vráti hodnotu kde cotangent dostane rovnakú hodnotu ako <b>X</b>. Napríklad",
        "arcCtgDescriptionValue":"``linguacode\na = arcctg(1) \nvýstup(a) # pi/4\n``",
        "logName":"Logaritmus",
        "logNameValue":"``linguacode\nlog(X,Y)\n``",
        "logDescription":"Vracia hodnotu logaritmu z <b>X</b> na základňu <b>Y</b>. Napríklad",
        "logDescriptionValue":"``linguacode\na = log(3,27) \nvýstup(a) # 3\n``",
        "lgName":"Spoločné logaritmus",
        "lgNameValue":"``linguacode\nlg(Y)\n``",
        "lgDescription":"Vracia hodnotu logaritmu z <b>X</b> na základňu <b>10</b>. Napríklad",
        "lgDescriptionValue":"``linguacode\na = lg(100) \nvýstup(a) # 10\n``",
        "lnName":"Prirodzený logaritmus",
        "lnNameValue":"``linguacode\nln(Y)\n``",
        "lnDescription":"Vracia hodnotu logaritmu z <b>X</b> na základňu <b>e</b>. Napríklad",
        "lnDescriptionValue":"``linguacode\na = ln(e) \nvýstup(a) # 1\n``",
        "randomName":"Generovanie náhodných čísel",
        "randomNameValue":"``linguacode\nrandom(X,[Y])\n``",
        "randomDescription":"Ak parameter <b>Y</b> je zadané, program bude náhodne generovať a vráti náhodné celé číslo z range<b>[X; Y]</b>. Ale bez <b>Y</b> parameter rozsah bude <b>[0, X]</b>. Napríklad",
        "randomDescriptionValueFirst":"``linguacode\nX = 10 \na = random(X) # [0; 10]\nvýstup(a) # 4 \n``",
        "randomDescriptionValueSecond":"``linguacode\nX = 5 \nY = 15 \na = random(X,Y) # [5; 15]\nvýstup(a) # 12\n``"
      },
      "tutorials":{
        "intro":"Úvod",
        "output":"Výstup",
        "variables":"Premenné",
        "input":"Vstup",
        "operations":"Operácie",
        "conditions":"Podmienky",
        "boolean":"Boolean",
        "languageAboutLanguageTitle":"O Jazyku",
        "languageAboutLanguageContent":"LinguaCode je vytvorený pre všetkých tých, ktorí sa chcú naučiť základy programovania v pohodlnejšiu cestu. \nUčiť sa s LinguaCode to nie je nevyhnutné vedomosti z cudzích jazykov alebo technické zručnosti. Všetko, čo musíte sa chcú učiť a starostlivosťou. \n\n#### Funkcie:\n- **Viacjazyčné**\n- **Multiplatformová**\n- **Jednoduchý Zdrojový kód**\n- **Zadarmo**\n",
        "languageFeaturesTitle":"Jazykové Funkcie",
        "languageFeaturesContent":"LinguaCode je založené na Python, Pascal a JavaScript, takže je ľahké pochopiť jednoduchý zdrojový kód a potom učiť iný programovací jazyk rýchlejšie. \n\n**Tu sú všetky základné pojmy jazyk:**\n\n- **Každý príkaz sa začína nový riadok.** \nZdrojový kód bude viac jednoduché a jasné, že spôsob.\n- **Príkazy môžu byť napísané v oboch veľké a malé písmená.** \nTo urýchľuje proces programovania, ale to radšej píšu s malými písmenami.\n- **Text môže byť napísaný medzi oboma úvodzovky a apostrofy.** \nV mnohých krajinách nie sú žiadne úvodzovky použiť, tak tu si môžete vybrať pohodlné verzia pre vás.\n- **Text napísaný po symbol \"\\#\" je považované za komentár a nemá žiadny vplyv na prácu zdrojový kód.** \nKomentáre sú poskytované len na robenie si poznámok.",
        "outputCommandDefinitionTitle":"Príkaz definícia",
        "outputCommandDefinitionContent":"Každý program, ktorý sa nejaké operácie, mali by ukázať nám informácie o výsledok. To je dôvod, prečo všetky programové systémy majú výstup textu možnosť a miesto, kde môžeme vidieť výsledok, ktorý sa nazýva **Terminál**. \n\nPríkaz \"*výstup*\" sa používa na výstup textu. \n\n#### Napríklad \nZdrojový kód``linguacode\nvýstup(\"Ahoj\")\n``Result``terminál\nAhoj\n``",
        "outputPossibleValuesTitle":"Možné hodnoty",
        "outputPossibleValuesContent":"Príkaz výstupu môžete vytlačiť text, čísla, matematické operácie a hodnoty premenných.\n\n#### Napríklad \nZdrojový kód \n``linguacode\nvýstup(100)\nvýstup(5 * 25)\n``Result``terminál\n100\n125\n``",
        "variablesDeclaresAndAssignsTitle":"Konkurz a priradenie",
        "variablesDeclaresAndAssignsContent":"Často musíme uložiť text, čísla a číselné operácie niekde s cieľom použiť znovu. Kontajnery, kde sa s nami môžete uložiť rozličné hodnoty sa nazývajú **premenné**. Najprv sme sa musí dať meno premennej a potom priradiť hodnotu. Po tom, ako môžeme odkazovať na hodnoty jednoducho telefonicky na premenná s jeho menom. \nPremenné sú uložené v Random-access memory (RAM), počítač a keď sme sa použiť premenná, počítač vráti hodnotu zodpovedajúcu názov premennej z RAM.\n#### Dôležité pamätať\nNázvy premenných \n**1.** Môže obsahovať písmená, symboly alebo číslic \n**2.** Nemôžu začať číslom \n**3.** Nemôže obsahovať medzeru a znaky aritmetické operácie\n#### Napríklad \nPre tlač číslo **617** namiesto tohto \n``linguacode\nvýstup(617)\n``\nbudeme písať\n``linguacode\nX = 617\nvýstup(X)\n``\nVýsledok\n``terminál\n617\n`` \nA ak chceme výstup rovnakú hodnotu tri-krát, sme sa napísať \n``linguacode\nX = 617\nvýstup(X)\nvýstup(X)\nvýstup(X)\n`` \nVýsledok \n``terminál\n617\n617\n617\n``",
        "variablesPracticalUseTitle":"Praktické využitie",
        "variablesPracticalUseContent":"Ako vidíme, môžeme priradiť oboch číselných a textových hodnôt do premenných. Často však musíme priradiť premennej niektoré hodnoty, ktoré boli priradené k inej. V tomto prípade môžeme priradiť už existujúcej premennej na nový.\n#### Napríklad \nZdrojový kód\n``linguacode\na = 1\nb = 2\nc = a + b\nvýstup(c)\n`` \nVýsledok\n``terminál\n3\n``\n",
        "variablesMultipleUsesTitle":"Viacnásobné použitie",
        "variablesMultipleUsesContent":"Nemusíte vytvoriť nové premenné pre novú hodnotu každý čas. Môžeme tiež zmeniť hodnoty priradené k premenné. Budeme vyhnúť sa z zbytočné premenných a zdrojový kód bude viac jednoduché, že spôsob, ako.\n#### Napríklad\nPredpokladajme, že máme **100** jablká a uložíte túto hodnotu v * * *apple** premennej. Počet jabĺk bola znižuje o **5** každý deň. \nMusíme výstup počet jabĺk pre každý deň. \n\nZdrojový kód\n``linguacode\njablko = 100\nvýstup(apple)\n\njablko = apple - 5 # 95\nvýstup (apple)\n\njablko = apple - 5 # 90\nvýstup(apple)\n\njablko = apple - 5 # 85\nvýstup(apple)\n`` \nVýsledok\n``terminál\n100\n95\n90\n85\n``",
        "inputCommandDefinitionTitle":"Príkaz definícia",
        "inputCommandDefinitionContent":"V programovania potrebujeme aj na výstup a v mnohých prípadoch sa vstupné údaje. Potrebujeme ju, keď premenné môžu prijímať žiadnu hodnotu. Sme tiež môžete meniť zdrojový kód vždy, a priradenie novej hodnoty do premennej, ale nie je účinné a potrieb príliš dlho. \n\nV prípade, že budeme používať príkaz \"*vstup*\". \n\nA tu je jednoduchý príklad program, ktorý výstupy dvojnásobok počtu inputted užívateľ. ``linguacode\nvstup(číslo)\nvýstup(číslo * 2)\n`` Po spustení tohto programu sme sa zobrazí symbol \"**>**\", čo znamená program začal a musíme textu chýbajúce údaje. Po zadaní akékoľvek číslo a stlačením **Enter** budeme vidieť dvojnásobok inputted číslo. ``terminál\n>617\n1234\n``Väčšinou musíme písať programy, ktoré môžu byť použité ľuďmi, ktorí ani nevedia, programovanie.",
        "inputWorkMechanismTitle":"Práca mechanizmus",
        "inputWorkMechanismContent":"Teraz sa pozrime, ako príkaz vstupu funguje. Napríklad máme tento program ``linguacode\nvýstup(\"Prosím, Zadajte svoje poverenia:\")\nvýstup(\"Meno:\")\nvstup(názov)\nvýstup(\"Priezvisko:\")\nvstup(priezvisko)\nvýstup(\"Ahoj\" + meno + \"\" + priezvisko)\n`` Ako môžeme vidieť, že sú 6 riadkov v našom programe. \nPo spustení sa môžeme vidieť, že program pracoval až do riadku 3.``terminál\nProsím, zadajte svoje poverenia:\nNázov:\n>\n` \"Po zadaní neprijaté údajov, budeme vidieť, že teraz to fungovalo, až kým riadok 5.``terminál\nProsím, zadajte svoje poverenia:\nNázov:\n>Marine\nPriezvisko:\n>\n` A nakoniec po zadaní poslednej pokazil údajov program bude fungovať a koniec.``terminál\nProsím, zadajte svoje poverenia:\nNázov:\n>Marine\nPriezvisko:\n>Chamchyan\nAhoj, Morské Chamchyan\n` \"Aby sme videli, že s týmto príkazom program funguje časť po časti vyžadujúce na vstup neprijaté údajov.",
        "operationsArithmeticOperatorsTitle":"Aritmetické operácie",
        "operationsArithmeticOperatorsContent":"V LinguaCode je to možné, vykonávať jednoduché aritmetické operácie ako **+**, **-**, **\\***, **/**. \n\nNapríklad tento program bude robiť všetky aritmetické operátory s **1** a **2** čísla. ``linguacode\nvýstup(1 + 2) # 3\nvýstup(1 - 2) # -1\nvýstup(1 * 2) # 2\nvýstup(1 / 2) # 0.5\n` ` #### Dôležité pamätať \nAko vieme, v Matematike množenie premenná s inej premennej alebo číslo, ktoré môže byť napísané bez symbol množenie. Napríklad *7 X krát* bude napísané **7X** alebo *X-krát Y* ako **XY**. \nAle v programovaní, je dôležité, ak chcete napísať symbol množenie. Napríklad **7 \\* X** **X \\* Y**.",
        "operationsExecutingPriorityTitle":"Činnosti vykonávajúci prioritou",
        "operationsExecutingPriorityContent":"Aj v Matematike a v programovania, ak nie je rozdelenie alebo násobenie, sme v prvom rade robiť ich a iba potom, čo sme urobiť sčítanie a odčítanie. \n\n#### Napríklad ``linguacode\nX = 10 + 2 * 4 - 2\n# X = 10 + 8 - 2\n# X = 18 - 2\n# X = 16\n` \", Ale môžeme zmeniť vykonávajúci priority pomocou zátvoriek. \n#### Napríklad ``linguacode\nX = (10 + 2) * (4 - 2)\n# X = 12 * (4 - 2)\n# X = 12 * 2\n# X = 24\n`V programovom môžeme použiť zátvorky, aj keď sú zbytočné. \nNebude to zle, ale to radšej napísať jednoduché a jasné zdrojový kód, ktorý bude ľahké pochopiť, pre druhých.",
        "operationsNumbersTitle":"Čísla",
        "operationsNumbersContent":"Ako vieme, <a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">numbers</a> sú matematické objekty používa na počítanie, meranie a label. \nExistuje 5 druhov čísla. Budeme jednať so všetkými z nich, s výnimkou komplexné numbes \n- **- prirodzené čísla** **1**, **2**, ...``linguacode\nvýstup(7 + 4) # 13\n`` \n- **celé čísla** ..., **-1**, **0**, **1**, ...``linguacode\nvýstup(-6 * 5 + -3) # -33\n`` \n- **racionálne čísla** **1/2**, **2/3**, **0.125**, ...``linguacode\nvýstup(0.617 * 2 * 1000) # 1234\n`` \n- **reálne čísla** **√2**, **1.62**, ...``linguacode\nvýstup(2/3 + 1/2) # 1\n``",
        "operationsSumOfStringAndNumberTitle":"Súčet reťazce a čísla",
        "operationsSumOfStringAndNumberContent":"Ako vidíme, je možné pridať obe čísla a texty, ktoré sa navzájom, v ktorých výsledkom linky sú kombinované v jednom riadku. Ale často sa musíme dostať riadok, v ktorom sa bude používa číselnú hodnotu. V tomto prípade je možné pridať text, číslo, v ktorých výsledkom bude číslo upravené a v kombinácii s text ako text.``linguacode\ntext = \"tam sú\" + 365 + \"dní v roku\"\n# text = \"tam sú\" + \"365\" + \"dní v roku\"\n# text = \"tam sú 365\" + \"dní v roku\"\n# text = \"tam sú 365 dní v roku\"\n` ` #### Dôležité pamätať \nS riadky môžeme urobiť len pridaním prevádzky. Pritom iné činnosti, výsledkom bude chyba.",
        "conditionsCommandsIfTitle":"Príkaz \"Ak\"",
        "conditionsCommandsIfContent":"Niekedy v programovania potrebujeme vykonať niektoré operácie založené na stave. Na to existuje stav, kontrola príkazy ako \"Ak\", \"Ak-iný\" a \"Iné-Ak\". \n\nPísomnej forme príkazu \"**Ak**\" ``linguacode\nak <condition> potom\n<operation>\n` \"Tu medzi príkazy \"Ak\" a \"potom\" je tu nejaká podmienka, a po z novom riadku a po **4 priestory** je napísané prevádzky (resp. operácií), ktoré budú vykonané, ak tvrdenie je pravdivé. \n\n#### Napríklad ``linguacode\na = 5\nb = 2\nak a > b, tak\nvýstup(\"a > b\")\n``",
        "conditionsCommandsIfElseTitle":"Príkaz \"If-Else\"",
        "conditionsCommandsIfElseContent":"Tak sme vedieť, ako používať podmienené vyhlásenie v programoch. Teraz sa budeme diskutovať o prípade, keď stav je nepravdivé.\n\nPísanie forme \"**If-Else**\" vyhlásenie ``linguacode\nak <condition> potom\n<operation N1>\niné\n<operation N2>\n` \"Tu po príkaz \"Ak\" existuje nový príkaz \"Iného\". A z nového riadku, po 4 priestorov je napísané prevádzky, ktoré budú vykonané, ak uvedené podmienky, je nepravdivé.\n\n#### Napríklad ``linguacode\na = 5\nb = 10\nak a > b\nvýstup(\"a > b\")\niné\nvýstup(\"b < a\")\n``",
        "conditionsCommandsElseIfTitle":"Príkaz \"Iné-Ak\"",
        "conditionsCommandsElseIfContent":"Sme už diskutovali, ktorý príkaz bude vykonaný na základe podmienkou je pravdivé alebo nepravdivé. Ale niekedy sa musíme skontrolovať, viac ako jednu podmienku v rovnakom čase. \n\nPísanie forme \"**If-Else-If**\" vyhlásenie``linguacode\nak <condition N1> potom\n<operation N1>\ninak ak <condition N2> potom\n<operation N2>\niné\n<operation N3>\n` \"Tu musíme skontrolovať viac ako jednu podmienku. V prípade \"Iné-Ak\" písomnej forme, môže byť 1 alebo viac \"Iné-Ak\" vyhlásenia medzi príkazy \"Ak\" a \"Iný\". \n\n#### Napríklad ``linguacode\na = 5\nb = 5\nak a > b, tak\nvýstup(\"a > b\")\ninak, ak a < b, potom\nvýstup (\"<b\")\niné\nvýstup(\"b ==\")\n``",
        "booleanTypesBooleanTitle":"Popis",
        "booleanTypesBooleanContent":"Už vieme, ako skontrolovať výkazy a niektoré z nich môžu byť *pravda* (22 > 18) alebo *false* (16 > 18). Niekedy kvôli dĺžke stav checking line, to sa stáva ťažko čitateľný zdrojový kód. Tu prichádza na pomoc boolean hodnoty \n\n- **pravda** ``linguacode\nstav = true\nvýstup(podmienka) #pravda\n`` \n\n- **false**``linguacode\nstav = false\nvýstup(podmienka) #false\n` \"Akýkoľvek boolean porovnanie známy nám vráti jednu z danej hodnoty \n\nExemple *pravda* porovnanie ``linguacode\nstav = 1 < 5\nvýstup(podmienka) # pravda\n`` Exemple *false* porovnanie ``linguacode\nstav = 10 < 5\nvýstup(podmienka) # false\n` \"Takže v stave kontrola príkazov môžeme použiť premenné s boolean hodnoty. \n\n#### Napríklad ``linguacode\nvýstup(\"Napíšte číslo \"a\":\")\npríkon(a)\n\nvýstup(\"Napíšte číslo \"b\":\")\nvstup(b)\n\ncondition1 = > b\ncondition2 = < b\n\nak condition1 potom\nvýsledok = \"> b\"\ninak ak condition2 potom\nvýsledok = \"< b\"\niné\nvýsledok = \"= = b\"։\nvýstup(\"Výsledok:\" + výsledok)\n``",
        "booleanOperatorsComparisonTitle":"Porovnanie operátorov",
        "booleanOperatorsComparisonContent":"V stave kontrola príkazy sme už použité symboly \"väčšie než\" > a \"menej ako\" < porovnanie operátorov. Ale teraz tu môžeme použiť akékoľvek iné subjekty nám známe. \n\n- **>** porovnáva číselné hodnoty, v ktorých prvý je *#väčšiu* ako druhý. Napríklad ``linguacode\nvýstup(5 > 1) # pravda\nvýstup(1 > 5) # false\n`` \n\n- **>=** porovnáva číselné hodnoty, v ktorých prvý je *#väčšia alebo sa rovná* druhý. Napríklad ``linguacode\nvýstup(5 >= 5) # pravda\nvýstup(1 >= 5) # false\n`` \n\n- **<** porovnáva číselné hodnoty, v ktorých prvý je *#menej* ako druhý. Napríklad ``linguacode\nvýstup(1 < 5) # pravda\nvýstup(5 < 1) # false\n`` \n\n- **<=** porovnáva číselné hodnoty, v ktorých prvý je *#menej alebo rovné* druhý. Napríklad ``linguacode\nvýstup(1 <= 5) # pravda\nvýstup(5 <= 1) # false\n`` \n\n- **==** porovnáva číselné alebo textové hodnoty, v ktorých prvý je *#rovná* druhý. Napríklad ``linguacode\nvýstup(5 == 5) # pravda\nvýstup(5 == 1) # false\nvýstup(\"vojak\" == \"vojak\") # pravda\nvýstup(\"Hello\" == \"Helo\") # false\n`` \n\n- **!=** porovnáva číselné alebo textové hodnoty, v ktorých prvý je *#nerovná* druhý. Napríklad ``linguacode\nvýstup(5 != 1) # pravda\nvýstup(5 != 5) # false\nvýstup(\"HelLo\" != \"Helo\") # pravda\nvýstup(\"vojak\" != \"vojak\") # false\n`` \n\n- **()** vráti zvrátiť výsledok akýkoľvek číselný alebo textový porovnanie. Napríklad ``linguacode\nvýstup(nie(1 > 5)) # pravda\nvýstup(nie, (5 == 5)) # false\nvýstup(nie je(false)) # pravda\nvýstup(nie je(true)) # false\n``",
        "booleanOperatorsLogicalTitle":"Boolových operátorov",
        "booleanOperatorsLogicalContent":"Tak sme vedieť, ako napísať nejaké podmienené ziskov a strát, ale často musíme spojiť viaceré podmienky v jednom, a na základe toho vykonať niektoré operácie. Kombinovanie podmienky uskutočňuje boolových operátorov. \n\n- Príkaz \"**a**\" spája dve podmienky v jednom, ktorý sa nazýva **pravda** keď obe podmienky sú *pravda* a **false** * * ak aspoň jedna z podmienok je *false*. Napríklad ``linguacode\nvýstup(5 > 1 և 10 < 100) # pravda\nvýstup(20 < 100 և 1 > 5) # false\n`` \n\n- Príkaz \"**alebo**\" spája dve podmienky v jednom, ktorý sa nazýva **pravda** * * ak aspoň jedna z podmienok je *pravda* a **false** * * ak dve podmienky *false*. Napríklad ``linguacode\nvýstup(5 > 1 alebo 100 < 10) # pravda\nvýstup(20 > 100 alebo 1 > 5) # false\n``",
        "booleanOperatorsExecutingPriorityTitle":"Vykonávajúci prioritou",
        "booleanOperatorsExecutingPriorityContent":"Sme sa naučili, ako spojiť 2 podmienky, ale môže byť viac ako 2, na základe programového obsahu. V prípade, že podmienky sa budú navzájom kombinované, z *zľava doprava*, kým sa tvoria jednu podmienku.\n\n#### Napríklad ``linguacode\nvýstup(5 < 1 և 1 < 7 alebo 1 >= 3 alebo 9 == 9)\n` toto je rovnaký ako `linguacode\nvýstup(false և true alebo false alebo true)\n`` poďme kombinovať **1th** a **2.** \"**false a true**\" podmienky v jednom․ ``linguacode\nvýstup(false alebo false alebo true)\n`\"a potom **1+2** stav s **3.** \"**nesprávne alebo nepravdivé**\" ``linguacode\nvýstup(false alebo true)\n` a nakoniec **1+2+3** stav s **4.** \"**false alebo true**\"․ ``linguacode\nvýstup(pravda)\n` A tak sme sa kombinovať 4 podmienky v jednom. Môžeme kombinovať ďalšie podmienky, že spôsob. \n\nNiekedy potrebujeme zmeniť zľava doprava kombinuje prednosti pomocou zátvoriek. \n\n#### Napríklad ``linguacode\nvýstup(5 < 1 և (1 < 7 alebo (1 >= 3 alebo 9 == 9)))\n`` \n\nje to to isté ako `linguacode\nvýstup(false և (pravda alebo nie je (false alebo true)))\n`` poďme kombinovať **3.** a **4.** \"**false alebo true**\" podmienky v jednom ``linguacode\nvýstup(false alebo (false alebo true))\n` \"po tom, čo to **2.** stav s **3+4** podmienkou bude \"**false alebo true**\" ``linguacode\nvýstup(false և pravda)\n` a konečne poďme kombinovať **1th** stav s **2+(3+4)**. To bude \"**false a true**\" ``linguacode\nvýstup(false)\n` A tak, videli sme, že výsledok sa mení so zmenou kombinuje prednosti."
      },
      "syntaxInfo":{
        "modalTitle":"Príkaz príručka",
        "cheatSheetTitle":"Ťahák",
        "lesson":"Návod"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b> Hotkeys</b>",
      "undo":"Späť",
      "redo":"Redo",
      "selectAll":"Vybrať všetko",
      "run":"Spustiť",
      "terminal":"Terminál"
    },
    "program":{
      "program":"Program",
      "sourceCode":"Zdrojový kód",
      "functionArgumentSyntaxError":"Argumentom funkcie syntaktická chyba v ${line} linky.",
      "undefinedVariable":"\"${variable}\" variable nemal definované v ${line} linky.",
      "indentError":"Priestor chyby v ${line} linky.",
      "hackAttempt":"Hack pokus. \"${ip}\" ip adresa bola uložená v našej databáze.",
      "syntaxError":"Syntaktická chyba",
      "timeout":"Zostaviť časový limit. Uistite sa, že kód nemá infinity slučky.",
      "true":"pravda",
      "false":"false",
      "NaN":"neznáma",
      "null":"neznáma",
      "Infinity":"infinity",
      "undefined":"neurčená"
    },
    "programListGroup":{
      "programs":"Programy"
    },
    "terminal":{
      "hotkeys":"<b> Hotkeys</b>",
      "undo":"Späť",
      "redo":"Redo",
      "selectAll":"Vybrať všetko",
      "terminal":"Terminál"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"Prihláste sa"
    },
    "menuButton":{
      "settings":"Nastavenia",
      "logOut":"Odhlásiť sa"
    }
  },
  "panels":{
    "header":{
      "title":"Domov"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"Používateľ nemá žiadne programy ešte."
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"Nemáte žiadne programy ešte.",
      "programNotFoundClickPartFirst":"Kliknite na tlačidlo",
      "programNotFoundClickPartSecond":"tu",
      "programNotFoundClickPartThird":"ak chcete vytvoriť nový program."
    },
    "loading":{
      "loading":"Nakladanie"
    }
  }
}