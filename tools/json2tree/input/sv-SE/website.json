{
  "blocks":{
    "controlPanelBlock":{
      "edit":"Ändra",
      "delete":"Ta bort"
    },
    "lovePanelBlock":{
      "like":"Som",
      "liked":"Gillade",
      "star":"Star",
      "starred":"Spelade"
    },
    "moreFromUserBlock":{
      "viewAll":"Visa alla",
      "moreFromFirst":"Mer från",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"Sortera efter",
      "recent":"Senaste",
      "views":"Visningar",
      "stars":"Stjärnor",
      "likes":"Gillar",
      "random":"Random"
    },
    "shareBlock":{
      "link":"Länk",
      "share":"Dela",
      "tweet":"Tweet",
      "textTwitter":"Programmet \"${programTitle}\" av ${userName} på #LinguaCode ${userPageLink}",
      "descriptionVK":"LinguaCode är en social kodning plattform och är utformad speciellt för barn där de kan lära sig programmering och dela med sig av sina koder med sitt eget språk och utan behov av att känna till svenska."
    },
    "userPrimaryInfoBlock":{
      "editProfile":"Redigera profil"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"Gick på"
    }
  },
  "pages":{
    "errorPage":{
      "title":"Fel",
      "explanation":"Sorry, ett allvarligt fel har uppstått på den här sidan."
    },
    "landingPage":{
      "title":"LinguaCode: Lärande genom Kodning",
      "learningByCoding":"Lärande <span className=\"masthead--lora-italic\">by Coding</span>",
      "explanation":"Vi gör för att lära programmering och kodning så full av glädje och liv, du kommer att skratta högt.",
      "facebookSignIn":"Logga in med Facebook",
      "or":"eller",
      "seeTheListOfPrograms":"Se listan över de finns program",
      "descriptionHead":"De bästa nya sätt att lära sig ett programmeringsspråk.",
      "descriptionBody":"LinguaCode är en social kodning plattform och är utformad speciellt för barn där de kan lära sig programmering och dela med sig av sina koder med sitt eget språk och utan behov av att känna till svenska.",
      "advantagesHeadline":"LinguaCode hjälper dig <span className=\"u-emphasized\">learn bättre </span>",
      "advantageTopFirstHeadline":"Flerspråkig",
      "advantageTopFirstDescription":"Skriva program på ditt eget språk, och inte bara.",
      "advantageTopSecondHeadline":"Det är gratis!",
      "advantageTopSecondDescription":"Allt är gratis.",
      "advantageTopThirdHeadline":"Snabb start",
      "advantageTopThirdDescription":"Att komma igång är mycket enklare än du tror!",
      "advantageBottomFirstHeadline":"Fantasi",
      "advantageBottomFirstDescription":"Lära, pröva, Skapa!",
      "advantageBottomSecondHeadline":"Utbildning",
      "advantageBottomSecondDescription":"Lära sig programmering, såväl som andra ämnen.",
      "advantageBottomThirdHeadline":"Gemenskapen",
      "advantageBottomThirdDescription":"Dela dina program med vänner och hitta nya vänner.",
      "joinText":"Gå till <span className=\"u-emphasized\">the community</span> av elever",
      "facebookRegister":"Registrera dig nu, det är GRATIS!"
    },
    "notFoundPage":{
      "title":"Sidan Kunde Inte Hittas",
      "explanation":"Tyvärr, men sidan du försöker visa finns inte.",
      "descriptionPartFirst":"Försök på väg till",
      "descriptionPartSecond":"huvudsidan",
      "descriptionPartThird":"istället."
    },
    "programChangePage":{
      "titleOfEditPage":"Redigera ${userName}/${title} program",
      "editProgramHeadline":"Redigera ett program",
      "editProgramButton":"Redigera Program",
      "titleOfCreatePage":"Skapa ett nytt program",
      "newProgramHeadline":"Skapa ett nytt program",
      "submitProgramButton":"Skicka In Programmet",
      "programContent":"Ett program som innehåller all information om din kod.",
      "name":"Namn",
      "programNameForm":"Bra program namn är kort och minnesvärd, som <b>hello-world</b>.",
      "titleOfProgram":"Titel",
      "description":"Beskrivning",
      "validationError":"Validering fel",
      "errorTextForNameLength":"Längd <b>name</b> bör mer än 0 och mindre än 32 det bör bestå av latin symboler och streck.",
      "errorTextForName":"Detta namnet på den källa som redan används av dig.",
      "errorTextForTitle":"Längd <b>title</b> bör mer än 0 och mindre än 128.",
      "errorTextForDescription":"Längd <b>description</b> bör mer än 0 och mindre än 5120.",
      "errorTextForSource":"Längd <b>source</b> bör mer än 0 och mindre än 10240."
    },
    "programs":{
      "title":"Program"
    },
    "settingsPage":{
      "title":"Inställningar",
      "publicProfile":"Offentliga profil",
      "validationError":"Validering fel",
      "username":"Användarnamn",
      "yourUsername":"Ditt användarnamn",
      "usernameWasAlreadyUsed":"Användarnamnet används redan",
      "usernameWasReserved":"Användarnamn var reserverade",
      "usernameValidation":"Längd <b>username</b> bör vara mindre än 24 och innehåller små bokstäver i latin och siffror.",
      "name":"Namn",
      "yourFirstNameAndLastName":"Ditt för-och efternamn",
      "nameValidation":"Längd <b>name</b> bör vara större än 0 och mindre än 24",
      "bio":"Bio",
      "tellALittleAboutYourself":"Berätta lite om dig själv",
      "bioValidation":"Längd <b>bio</b> bör vara mindre än 128.",
      "country":"Landet",
      "select":"välj",
      "countryValidation":"Välj någon av länder",
      "updateProfile":"Uppdatera profil"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"Logga in",
      "signInDescription":"Operationen är möjligt endast när du är inloggad på."
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"Är du säker på att du vill radera programmet ?",
      "answerYes":"ja",
      "answerNo":"inga"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"Utgång",
        "outputNameValue":"``linguacode\nutgång(X)\n``",
        "outputDescription":"Skriver något X-värde: tal -, operations -, text-och variabelvärden. Till exempel",
        "outputDescriptionValue":"``linguacode\nutgång(4) # 4\nresultat(\"Tjena\") # Tjena\nutgång(1+2) # 3\n``",
        "inputName":"Ingång",
        "inputNameValue":"``linguacode\ningång(X)\n``",
        "inputDescription":"Varje X-variabel för att förklara värdet av användaren. Till exempel",
        "inputDescriptionValue":"``linguacode\ningång(a)\n``",
        "ifElseStatementName":"Kontrollera uttalande",
        "ifElseStatementNameValue":"``linguacode\nom <condition N1> sedan\n<operation N1>\nannars om <condition N2> sedan\n<operation N2>\nannat\n<operation N3>\n``",
        "ifElseStatementDescription":"Verksamheten kommer att genomföras baserat på angivna villkor är sant. Till exempel",
        "ifElseStatementDescriptionValue":"``linguacode\na = 5\nb = 5\nom a > b så\nresultat(\"a > b\")\nelse if a < b then\nresultat (\"<b\")\nannat\nresultat(\"b ==\") # b == en\n``",
        "loopForName":"Begränsad upprepa",
        "loopForNameValue":"``linguacode\nupprepa <N> gånger\n<operation>\n``",
        "loopForDescription":"Utför ett block av kod ett antal gånger. Till exempel",
        "loopForDescriptionValue":"``linguacode\nupprepa 10 gånger\nresultat(\"Tjena\")\n``",
        "loopWhileDoName":"Loop \"Medan Den Gör\"",
        "loopWhileDoNameValue":"``linguacode\nmedan <condition> sedan\n<operation>\n``",
        "loopWhileDoDescription":"\"Medan\" - loop exekverar genom ett block av kod som länge ett angivet villkor är sant. Till exempel",
        "loopWhileDoDescriptionValue":"``linguacode\na = 1\nmedan en < 5 sedan\nutgång(a)\nen = en + 1\n``",
        "loopDoWhileName":"Loop \"Göra Medan\"",
        "loopDoWhileNameValue":"``linguacode\ngöra\n<operation>\nmedan <condition>\n``",
        "loopDoWhileDescription":"Loop \"Göra Medan\" kommer att upprepa slingan så länge villkoret är sant. Till exempel",
        "loopDoWhileDescriptionValue":"``linguacode\na = 1\ngöra \nutgång(a)\nen = en + 1\nmedan en < 5\n``",
        "piName":"matematiska konstanten pi",
        "piNameValue":"``linguacode\nutgång(pi)\n``",
        "piDescription":"Skriver matematisk konstant <b>pi</b>. Till exempel",
        "piDescriptionValue":"``linguacode\nutgång(pi) # 3.141592653589793\n``",
        "eNumberName":"e matematisk konstant",
        "eNumberNameValue":"``linguacode\nutgång(e)\n``",
        "eNumberDescription":"Skriver matematisk konstant <b>e</b>. Till exempel",
        "eNumberDescriptionValue":"``linguacode\nutgång(e) # 2.718281828459045\n``",
        "sqrName":"Kvadraten på antalet",
        "sqrNameValue":"``linguacode\nsqr(X)\n``",
        "sqrDescription":"Returnerar kvadraten på <b>X</b> nummer som matas in av användaren. Till exempel",
        "sqrDescriptionValue":"``linguacode\nX = 5 \nY = sqr(X) \nutgång(Y) # 25\n``",
        "powName":"Effekt på antalet",
        "powNameValue":"``linguacode\npow(X,Y)\n``",
        "powDescription":"Returnerar värdet av <b>X</b> makt <b>Y</b>. Till exempel",
        "powDescriptionValue":"``linguacode\nX = 2 \nY = 5 \nZ = pow(X, Y) \nutgång(Z) # 32\n``",
        "sqrtName":"Kvadratroten av antalet",
        "sqrtNameValue":"``linguacode\nsqrt(X)\n``",
        "sqrtDescription":"Returnerar kvadratroten av <b>X</b> nummer som matas in av användaren. Till exempel",
        "sqrtDescriptionValue":"``linguacode\nX = 9 \nY = sqrt(X) \nutgång(Y) # 3\n``",
        "absName":"Absoluta värdet av antalet",
        "absNameValue":"``linguacode\nabs(X)\n``",
        "absDescription":"Returnerar det absoluta värdet av <b>X</b> nummer som matas in av användaren. Till exempel՝",
        "absDescriptionValue":"``linguacode\nX = -5 \nY = abs(X) \nutgång(Y) # 5\n``",
        "roundName":"Antalet avrundning",
        "roundNameValue":"``linguacode\nround(X)\n``",
        "roundDescription":"Avrundar ett <b>X</b> nummer till närmaste heltal och returnerar värdet. Till exempel",
        "roundDescriptionValue":"``linguacode\nX = 2.3 \na = round(X) \nutgång () # 2\n``",
        "floorName":"Antalet våningen",
        "floorNameValue":"``linguacode\nfloor(X)\n``",
        "floorDescription":"Avrundar ett <b>X</b> antalet <b>downwards</b> till närmaste heltal och returnerar värdet. Till exempel",
        "floorDescriptionValue":"``linguacode\nX = 2.6 \na = floor(X) \nutgång () # 2\n``",
        "ceilName":"Antalet tak",
        "ceilNameValue":"``linguacode\nceil(X)\n``",
        "ceilDescription":"Runt en <b>X</b> antalet <b>upwards</b> till sin närmaste heltal och returnerar värdet",
        "ceilDescriptionValue":"``linguacode\nX = 2.2 \na = ceil(X) \nproduktionen(en) # 3\n``",
        "sinName":"Sinus",
        "sinNameValue":"``linguacode\nsin(X)\n``",
        "sinDescription":"Returnerar värdet av <b>sine</b> av en <b>X</b> nummer. Till exempel",
        "sinDescriptionValue":"``linguacode\nX = sin(pi) \nutgång(X) # 0\n``",
        "cosName":"Cosinus",
        "cosNameValue":"``linguacode\ncos(X)\n``",
        "cosDescription":"Returnerar värdet av <b>cosine</b> av en <b>X</b> nummer. Till exempel",
        "cosDescriptionValue":"``linguacode\nX = cos(pi) \nutgång(X) # -1\n``",
        "tanName":"Tangent",
        "tanNameValue":"``linguacode\ntan(X)\n``",
        "tanDescription":"Returnerar värdet av <b>tangent</b> av en <b>X</b> nummer. Till exempel՝",
        "tanDescriptionValue":"``linguacode\nX = tan(pi) \nutgång(X) # 0\n``",
        "ctgName":"Cotangens",
        "ctgNameValue":"``linguacode\nctg(X)\n``",
        "ctgDescription":"Returnerar värdet av <b>cotangent</b> av en <b>X</b> nummer. Till exempel՝",
        "ctgDescriptionValue":"``linguacode\nX = ctg(pi/4) \nutgång(X) # 1\n``",
        "arcSinName":"Arcsinus",
        "arcSinNameValue":"``linguacode\narcsin(X)\n``",
        "arcSinDescription":"Returnerar det värde där sinus får samma värde som <b>X</b>. Till exempel",
        "arcSinDescriptionValue":"``linguacode\na = arcsin(1) \nutgång () # pi/2 \n``",
        "arcCosName":"Arcuscosinus",
        "arcCosNameValue":"``linguacode\narccos(X)\n``",
        "arcCosDescription":"Returnerar det värde där cosinus får samma värde som <b>X</b>. Till exempel",
        "arcCosDescriptionValue":"``linguacode\na = arccos(1) \nutgång () # 0\n``",
        "arcTanName":"Arcus tangens (arctan)",
        "arcTanNameValue":"``linguacode\narctan(X)\n``",
        "arcTanDescription":"Returnerar värde, där den tangerar får samma värde som <b>X</b>. Till exempel",
        "arcTanDescriptionValue":"``linguacode\na = arctan(0) \nutgång () # 0\n``",
        "arcCtgName":"Arccotangent",
        "arcCtgNameValue":"``linguacode\narcctg(X)\n``",
        "arcCtgDescription":"Returnerar det värde där cotangens får samma värde som <b>X</b>. Till exempel",
        "arcCtgDescriptionValue":"``linguacode\na = arcctg(1) \nutgång () # pi/4\n``",
        "logName":"Logaritmen",
        "logNameValue":"``linguacode\nlog(X,Y)\n``",
        "logDescription":"Returnerar värdet av logaritmen av <b>X</b> till basen <b>Y</b>. Till exempel",
        "logDescriptionValue":"``linguacode\na = log(3,27) \nproduktionen(en) # 3\n``",
        "lgName":"Tiologaritmen",
        "lgNameValue":"``linguacode\nlg(Y)\n``",
        "lgDescription":"Returnerar värdet av logaritmen av <b>X</b> till basen <b>10</b>. Till exempel",
        "lgDescriptionValue":"``linguacode\na = lg(100) \nutgång () # 10\n``",
        "lnName":"Naturliga logaritmen",
        "lnNameValue":"``linguacode\nln(Y)\n``",
        "lnDescription":"Returnerar värdet av logaritmen av <b>X</b> till basen <b>e</b>. Till exempel",
        "lnDescriptionValue":"``linguacode\na = ln(e) \nutgång () # 1\n``",
        "randomName":"Slumptal genererar",
        "randomNameValue":"``linguacode\nrandom(X,[Y])\n``",
        "randomDescription":"Om parametern <b>Y</b> ges, kommer programmet att generera slumpmässigt och avkastning slumpmässiga heltal från range<b>[X; Y]</b>. Men utan <b>Y</b> parameter sortimentet kommer att <b>[0, X]</b>. Till exempel",
        "randomDescriptionValueFirst":"``linguacode\nX = 10 \na = random(X) # [0; 10]\nutgång () # 4 \n``",
        "randomDescriptionValueSecond":"``linguacode\nX = 5 \nY = 15 \na = random(X,Y) # [5; 15]\nutgång () # 12\n``"
      },
      "tutorials":{
        "intro":"Introduktion",
        "output":"Utgång",
        "variables":"Variabler",
        "input":"Ingång",
        "operations":"Verksamhet",
        "conditions":"Villkor",
        "boolean":"Boolean",
        "languageAboutLanguageTitle":"Om Språk",
        "languageAboutLanguageContent":"LinguaCode är skapat för alla dem, som vill lära sig grundläggande programmering i mer bekvämt sätt. \nAtt lära sig med LinguaCode det är inte grundläggande kunskaper i främmande språk eller tekniska färdigheter. Allt du behöver är vilja att lära sig och omsorg. \n\n#### Funktioner:\n- **Stor**\n- **Plattformsoberoende**\n- **Enkel Källkod**\n- **Fria**\n",
        "languageFeaturesTitle":"Språket Har",
        "languageFeaturesContent":"LinguaCode är baserat på Python, Pascal och JavaScript, vilket gör det lätt att förstå med enkla källkoden och sedan lära sig ett nytt programmeringsspråk snabbare. \n\n**Här är alla grundläggande begrepp i språket:**\n\n- **Varje kommando startar från nya raden.** \nKällkoden kommer att vara mer enkel och tydlig genom att på det sättet.\n- **Kommandon kan skrivas både versaler och gemener.** \nDet påskyndar processen av programmering, men det är att föredra att skriva med små bokstäver.\n- **Text kan skrivas mellan citattecken och apostrofer.** \nI många länder finns det inga citattecken används, så här kan du välja lämplig version för dig.\n- **Text skriven efter symbol \"\\#\" är att betrakta som en kommentar och har ingen inverkan på arbetet i källkoden.** \nKommentarer finns för att ta anteckningar.",
        "outputCommandDefinitionTitle":"Kommando definition",
        "outputCommandDefinitionContent":"Varje program, vilket innebär att vissa verksamheter, borde visa oss information om resultatet. Det är därför all programmering av system har textproduktion möjlighet och plats där vi kan se resultatet, som kallas **Terminal**. \n\nKommandot \"*utgång*\" används för textproduktion. \n\n#### Till exempel \n`Källkod \" för \" linguacode\nresultat(\"Tjena\")\n`\"Resultat`\" terminal\nTjena\n``",
        "outputPossibleValuesTitle":"Möjliga värden",
        "outputPossibleValuesContent":"Utdata kan skriva ut text, siffror, matematiska operationer och variabel-värden.\n\n#### Till exempel \nKällkoden \n``linguacode\nuteffekt(100)\nutgång(5 * 25)\n`\"Resultat`\" terminal\n100\n125\n``",
        "variablesDeclaresAndAssignsTitle":"Förklara och uppdrag",
        "variablesDeclaresAndAssignsContent":"Ofta behöver vi för att spara text, antal och numeriska operationer någonstans med syfte att använda den igen. Behållare, där vi kan spara olika värden kallas **variabler**. Först måste vi ge ett namn på en variabel och tilldela den ett värde. Efter det kan vi hänvisa till ett värde bara genom att ringa variabeln med namn. \nVariabler lagras i en Random-access memory (RAM-minne) på datorn och när vi använder en variabel, dator och returnerar det värde som motsvarar den variabeln namn från RAM-minnet.\n#### Viktigt att komma ihåg\nVariabel namn \n**1.** Kan innehålla bokstäver, symboler eller siffror \n**2.** Kan inte börja med ett nummer \n**3.** Kan inte innehålla blanksteg och symboler av aritmetiska operationer\n#### Till exempel \nFör att skriva ut nummer **617** i stället för denna \n``linguacode\nutgång(617)\n``\nvi kommer att skriva\n``linguacode\nX = 617\nutgång(X)\n``\nResultat\n``terminal\n617\n`` \nOch om vi vill ut samma värde tre gånger, vi kommer att skriva \n``linguacode\nX = 617\nutgång(X)\nutgång(X)\nutgång(X)\n`` \nResultat \n``terminal\n617\n617\n617\n``",
        "variablesPracticalUseTitle":"Praktisk användning",
        "variablesPracticalUseContent":"Som vi ser, kan vi tilldela både numeriskt och text värden till variabler. Men ofta behöver vi för att tilldela variabeln ett värde, som har tilldelats till en annan. I så fall kan vi tilldela redan befintlig rörlig till den nya.\n#### Till exempel \nKällkoden\n``linguacode\na = 1\nb = 2\nc = a + b\nutgång(c)\n`` \nResultat\n``terminal\n3\n``\n",
        "variablesMultipleUsesTitle":"Flera olika typer av användning",
        "variablesMultipleUsesContent":"Du behöver inte skapa en ny variabel ett nytt värde varje gång. Vi kan också ändra de värden som tilldelas till variabler. Vi kommer att undvika onödiga variabler och källkod kommer att vara enklare på det sättet.\n#### Till exempel\nLåt oss anta att vi har **100** äpplen och spara detta värde i **äpple** variabel. Antalet äpplen var att minska med **5** varje dag. \nVi måste produktionen räkna äpplen för varje dag. \n\nKällkoden\n``linguacode\napple = 100\nutgång(apple)\n\napple = äpple - 5 # 95\nutgång (apple)\n\napple = äpple - 5 # 90\nutgång(apple)\n\napple = äpple - 5 # 85\nutgång(apple)\n`` \nResultat\n``terminal\n100\n95\n90\n85\n``",
        "inputCommandDefinitionTitle":"Kommando definition",
        "inputCommandDefinitionContent":"I programmering vi måste både produktionen och i många fall för att mata in data. Vi behöver den, när variabler som kan få vilket värde som helst. Vi kan också ändra källkoden varje gång och tilldela ett nytt värde till en variabel, men det är inte effektivt och behov för lång tid. \n\nI detta fall använder vi kommandot \"*ingång*\". \n\nOch här är ett enkelt exempel på program som matar dubbel nummer som matas in av användaren. ``linguacode\ningång(antal)\nproduktion(antal * 2)\n`` Efter att ha kört detta program kommer vi att se symbolen \"**>**\" vilket innebär att programmet har startat och vi behöver mata in en data saknas. Efter inmatning av antal och trycka på **In** vi kommer att se dubbelt av inmatat nummer. ``terminal\n>617\n1234\n`Det mesta vi behöver för att skriva program som kan användas av personer, som inte ens vet programmering.",
        "inputWorkMechanismTitle":"Arbetar mekanism",
        "inputWorkMechanismContent":"Låt oss nu se hur kommandot input fungerar. Vi har till exempel det här programmet ``linguacode\nresultat(\"Vänligen Ange dina autentiseringsuppgifter:\")\nresultat(\"Namn:\")\ninput(namn)\nresultat(\"Efternamn:\")\ningång(efternamn)\nresultat(\"Hej\" + namn + \"\" + efternamn)\n` Som vi ser det är 6 rader i vårt program. \nEfter att ha kört det vi kan se att programmet arbetade fram till linje 3.``terminal\nVänligen ange dina autentiseringsuppgifter:\nNamn:\n>\n`` Efter att de missat data, kommer vi att se att nu är det funkade tills linje 5.``terminal\nVänligen ange dina autentiseringsuppgifter:\nNamn:\n>Marina\nEfternamn:\n>\n`` Och slutligen efter att den sista bud data programmet kommer att fungera och slutet.``terminal\nVänligen ange dina autentiseringsuppgifter:\nNamn:\n>Marina\nEfternamn:\n>Chamchyan\nHej, Marina Chamchyan\n`` Så såg vi att vi med detta kommando programmet fungerar en del av del som kräver att mata missade data.",
        "operationsArithmeticOperatorsTitle":"Aritmetiska operationer",
        "operationsArithmeticOperatorsContent":"I LinguaCode det är möjligt att genomföra enkla aritmetiska operationer som **+**, **-**, **\\***, **/**. \n\nTill exempel detta program kommer att göra alla aritmetiska operatörer med **1** och **2** numren. ``linguacode\nutgång(1 + 2) # 3\nutgång(1 - 2) # -1\nutgång(1 * 2) # 2\nutgång(1 / 2) # 0.5\n` ` #### Viktigt att komma ihåg \nSom vi vet i Math multiplikation med variabel med en annan variabel eller nummer kan skrivas utan symbol för multiplikation. Till exempel *7 gånger X* skriftlig **7X** eller *X gånger Y* som **XY**. \nMen i programmering är det viktigt att skriva symbol för multiplikation. Till exempel **7 \\* X** eller **X \\* Y**.",
        "operationsExecutingPriorityTitle":"Verksamheten verkställande prioritet",
        "operationsExecutingPriorityContent":"Både i Matematik och i programmering om det är en division eller multiplikation, vi för det första gör dem och endast efter att vi har att göra med addition och subtraktion. \n\n#### Till exempel ` \" linguacode\nX = 10 + 2 * 4 - 2\n# X = 10 + 8 - 2\n# X = 18 - 2\n# X = 16\n` Men vi kan ändra verkställande prioritet genom att använda parenteser. \n#### Till exempel ` \" linguacode\nX = (10 + 2) * (4 - 2)\n# X = 12 * (4 - 2)\n# X = 12 * 2\n# X = 24\n`\"I programmering kan vi använda parenteser även om de är onödiga. \nDet kommer inte vara fel men det är att föredra att skriva enkelt och klart källkod, som kommer att vara lätt att förstå för andra.",
        "operationsNumbersTitle":"Nummer",
        "operationsNumbersContent":"Som vi vet <a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">numbers</a> är matematiska objekt som används för att räkna, mäta och etikett. \nDet finns 5 typer av nummer. Vi kommer att hantera alla av dem, med undantag för komplexa numbes \n- ** naturliga tal** **1**, **2**, ...``linguacode\noutput(7 + 4) # 13\n`` \n- **heltal** ..., **-1**, **0**, **1**, ...``linguacode\nutgång(-6 * 5 + -3) # -33\n`` \n- **rationella tal** **1/2**, **2/3**, **0.125**, ...``linguacode\nutgång(0.617 * 2 * 1000) # 1234\n`` \n- **reella tal** **√2**, **1.62**, ...``linguacode\nutgång(2/3 + 1/2) # 1\n``",
        "operationsSumOfStringAndNumberTitle":"Summan av strängar och nummer",
        "operationsSumOfStringAndNumberContent":"Som vi kan se, det är möjligt att lägga till både siffror och texter till varandra, vilket resulterar linjer kombineras i en rad. Men ofta behöver vi för att få en linje, där det kommer att användas för numeriska värde. I så fall är det möjligt att lägga till text till antalet, i som resultat antalet kommer att ändras och i kombination med den text som text.``linguacode\nsms: a = \"det finns\" + 365 + \"dagar i år\"\n# sms: a = \"det finns\" + \"365\" + \"dagar i år\"\n# sms: a = \"det finns 365\" + \"dagar i år\"\n# sms: a = \"det finns 365 dagar på året\"\n` ` #### Viktigt att komma ihåg \nMed linjer som vi kan göra är bara att lägga till operation. Medan du gör andra insatser kommer att leda fel.",
        "conditionsCommandsIfTitle":"Kommando \"Om\"",
        "conditionsCommandsIfContent":"Ibland i programmering vi behöver för att utföra vissa transaktioner som grundar sig på tillståndet. För det finns det skick kontrollera kommandon som \"Om\", \"Om-else\" och \"Annat-Om\". \n\nSkriva form av kommandot \"**Om**\" ``linguacode\nom <condition> sedan\n<operation>\n` Här mellan kommandona \"Om\" och \"då\" det inte finns något tillstånd, och efter det från new line och efter **4 utrymmen** finns skriftliga drift (eller verksamheten) som kommer att göras om uttalandet är sant. \n\n#### Till exempel ` \" linguacode\na = 5\nb = 2\nom a > b så\nresultat(\"a > b\")\n``",
        "conditionsCommandsIfElseTitle":"Kommandot \"If-Else\"",
        "conditionsCommandsIfElseContent":"Så vi vet hur vi ska använda villkorlig uppgift i program. Nu kommer vi att diskutera fallet när villkoret är falskt.\n\nSkriva form av \"**Om-Else**\" uttalande ``linguacode\nom <condition> sedan\n<operation N1>\nannat\n<operation N2>\n` Här efter kommandot \"Om\" det är ett nytt kommando \"Annat\". Och från den nya linjen, efter 4 utrymmen är skriven verksamheten, som kommer att göras, om det nämnda villkoret är falskt.\n\n#### Till exempel ` \" linguacode\na = 5\nb = 10\nom a > b\nresultat(\"a > b\")\nannat\nresultat(\"b < a\")\n``",
        "conditionsCommandsElseIfTitle":"Kommandot \"Annat-Om\"",
        "conditionsCommandsElseIfContent":"Vi har redan diskuterat det där kommandot kommer att utföras baserat på villkoret är sant eller falskt. Men ibland behöver vi för att kontrollera mer än ett tillstånd på samma gång. \n\nSkriva form av \"**Om-Annat-Om**\" uttalande``linguacode\nom <condition N1> sedan\n<operation N1>\nannars om <condition N2> sedan\n<operation N2>\nannat\n<operation N3>\n` Här måste vi kolla mer än ett villkor. I fall av \"Annat-Om\" att skriva form kan det vara 1 eller mer \"Annat-Om\" - påståenden mellan kommandona \"Om\" och \"Annat\". \n\n#### Till exempel ` \" linguacode\na = 5\nb = 5\nom a > b så\nresultat(\"a > b\")\nelse if a < b then\nresultat (\"<b\")\nannat\nresultat(\"b ==\")\n``",
        "booleanTypesBooleanTitle":"Beskrivning",
        "booleanTypesBooleanContent":"Vi vet redan hur att kontrollera rapporterna och vissa av dem kan vara *sant* (22 > 18 år) eller *false* (16 > 18). Ibland på grund av längden på skick kontrollera linjen, blir det svårt att läsa källkoden. Här kommer att hjälpa booleska värden \n\n- **sann** ``linguacode\nskick = true\nutgång(tillstånd) #sanna\n`` \n\n- **false**``linguacode\nvillkor = falskt\nutgång(tillstånd) #false\n`` Booleskt jämförelse av oss kända returnerar ett av givna värden \n\nExempel på *sant* jämförelse ``linguacode\nvillkor = 1 < 5\nutgång(tillstånd) # sanna\n`` Exempel på *false* jämförelse ``linguacode\nskick = 10 < 5\nutgång(tillstånd) # false\n`` Så i skick att kontrollera kommandon som vi kan använda variabler med booleska värden. \n\n#### Till exempel ` \" linguacode\nresultat(\"Skriv ett nummer \"ett\":\")\ningång(a)\n\nresultat(\"Skriv en rad \"b\":\")\ningång(b)\n\ncondition1 = a > b\ncondition2 = a < b\n\nom condition1 sedan\nresultatet = \"a > b\"\nannars om condition2 sedan\nresultatet = \"< b\"\nannat\nresultatet = \"= = b\"։\nresultat(\"Resultat:\" + resultat)\n``",
        "booleanOperatorsComparisonTitle":"Jämförelseoperatorer",
        "booleanOperatorsComparisonContent":"I skick att kontrollera kommandon vi har redan använt symboler för \"större än\" > och \"mindre än\" < aktörer jämförelse. Men nu här vi kan använda andra operatörer som är kända för oss. \n\n- **>** jämför numeriska värden, där den första är *#bättre* än den andra. Till exempel ` \" linguacode\nutgång(5 > 1) # sanna\nutgång(1 > 5) # false\n`` \n\n- **>=** jämför numeriska värden, där den första är *#större än eller lika med* den andra. Till exempel ` \" linguacode\nutgång(5 >= 5) # sanna\nutgång(1 >= 5) # false\n`` \n\n- **<** jämför numeriska värden, där den första är *#mindre* än den andra. Till exempel ` \" linguacode\nutgång(1 < 5) # sanna\nutgång(5 < 1) # false\n`` \n\n- **<=** jämför numeriska värden, där den första är *#mindre eller lika med* den andra. Till exempel ` \" linguacode\nutgång(1 <= 5) # sanna\nutgång(5 <= 1) # false\n`` \n\n- **==** jämför numeriska värden eller text, där den första är *#motsvarande* den andra. Till exempel ` \" linguacode\nutgång(5 == 5) # sanna\nutgång(5 == 1) # false\nresultat(\"soldat\" == \"soldat\") # sanna\nresultat(\"Hello\") = = \"Helo\") # false\n`` \n\n- **!=** jämför numeriska värden eller text, där den första är *#inte lika* den andra. Till exempel ` \" linguacode\nutgång(5 != 1) # sanna\nutgång(5 != 5) # false\nresultat(\"Hej\" != \"Helo\") # sanna\nresultat(\"soldier\" != \"soldat\") # false\n`` \n\n- **()** avkastning som återförts på grund av någon numerisk eller sms: a jämförelse. Till exempel ` \" linguacode\nutgång(inte(1 > 5)) # sanna\nutgång(inte(5 == 5)) # false\nutgång(inte(false)) # sanna\nutgång(inte(true)) # false\n``",
        "booleanOperatorsLogicalTitle":"Booleska operatorer",
        "booleanOperatorsLogicalContent":"Så vi vet hur vi ska skriva någon villkorlig uppgift, men ofta behöver vi kombinera ett antal villkor i ett, och utifrån det utföra vissa operationer. Kombinationen av villkoren sker av booleska operatorer. \n\n- Kommando \"**och**\" kombinerar två villkor i en, som kallas **sann** om båda villkoren är *sant* och **false** när minst ett av villkoren är *false*. Till exempel ` \" linguacode\nutgång(5 > 1 և 10 < 100) # sanna\nutgång(20 < 100 և 1 > 5) # false\n`` \n\n- Kommando \"**eller**\" kombinerar två villkor i en, som kallas **sann** när minst ett av villkoren är *sant* och **false** när följande två villkor är *false*. Till exempel ` \" linguacode\nutgång(5 > 1 eller 100 < 10) # sanna\nutgång(20 > 100 eller 1 > 5) # false\n``",
        "booleanOperatorsExecutingPriorityTitle":"Verkställande prioritet",
        "booleanOperatorsExecutingPriorityContent":"Vi har lärt oss hur man kan kombinera 2 förhållanden, men de kan vara mer än 2, baserat på programmets innehåll. I så fall, villkoren kommer att kombineras med varandra från *vänster till höger*, tills de utgör ett villkor.\n\n#### Till exempel ` \" linguacode\nutgång(5 < 1 և 1 < 7 eller 1 >= 3 eller 9 == 9)\n` detta är samma som `linguacode\nutgång(falskt և sant eller falskt eller sant)\n`` låt oss kombinera **1** **2** \"**falsk och sann**\" villkor i en․ ``linguacode\nutgång(falskt eller falskt eller sant)\n``**1+2** tillstånd med **3** kommer att vara \"**falsk eller falskt**\" ``linguacode\nutgång(falskt eller sant)\n`` och slutligen **1+2+3** tillstånd med **4** kommer att vara \"**false eller true**\"․ ``linguacode\nutgång(sant)\n` \"Och så kombinerar vi 4 villkor i ett. Vi kan kombinera flera villkor på det sättet. \n\nIbland behöver vi ändra från vänster till höger kombinera prioritet genom att använda parenteser. \n\n#### Till exempel ` \" linguacode\nutgång(5 < 1 և (1 < 7 eller (1 >= 3 eller 9 == 9)))\n`` \n\ndetta är samma som `linguacode\nutgång(falskt և (sant eller (falskt eller sant)))\n`` låt oss kombinera **3** **4** \"**false eller true**\" förhållandena i en ``linguacode\nutgång(falskt eller (falskt eller sant))\n`` efter det **2** tillstånd med **3+4** villkoret kommer att vara \"**false eller true**\" ``linguacode\nutgång(falskt և sant)\n`` och slutligen låt oss kombinera **1** tillstånd med **2+(3+4)**. Det kommer att vara \"**falsk och sann**\" ``linguacode\nutgång(falskt)\n` \"Och så såg vi att resultatet ändras med förändrade kombinera prioritet."
      },
      "syntaxInfo":{
        "modalTitle":"Kommandot guide",
        "cheatSheetTitle":"Lathund",
        "lesson":"Handledning"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b> Hotkeys</b>",
      "undo":"Ångra",
      "redo":"Gör om",
      "selectAll":"Välj alla",
      "run":"Kör",
      "terminal":"Terminal"
    },
    "program":{
      "program":"Program",
      "sourceCode":"Källkoden",
      "functionArgumentSyntaxError":"Funktion argument syntax error i ${line} linje.",
      "undefinedVariable":"\"${variable}\" variabel som inte är definierad i ${line} linje.",
      "indentError":"Utrymme fel i ${line} linje.",
      "hackAttempt":"Hacka försök. Din \"${ip}\" ip-adress sparas i vår databas.",
      "syntaxError":"Syntax error",
      "timeout":"Sammanställa timeout. Se till att koden inte har oändlig loop.",
      "true":"sanna",
      "false":"falskt",
      "NaN":"okänd",
      "null":"okänd",
      "Infinity":"infinity",
      "undefined":"odefinierad"
    },
    "programListGroup":{
      "programs":"Program"
    },
    "terminal":{
      "hotkeys":"<b> Hotkeys</b>",
      "undo":"Ångra",
      "redo":"Gör om",
      "selectAll":"Välj alla",
      "terminal":"Terminal"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"Logga in"
    },
    "menuButton":{
      "settings":"Inställningar",
      "logOut":"Logga ut"
    }
  },
  "panels":{
    "header":{
      "title":"Hem"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"Användare som inte har något program ännu."
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"Du inte har några program ännu.",
      "programNotFoundClickPartFirst":"Klicka",
      "programNotFoundClickPartSecond":"här",
      "programNotFoundClickPartThird":"för att skapa ett nytt program."
    },
    "loading":{
      "loading":"Laddar"
    }
  }
}