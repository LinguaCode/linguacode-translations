{
  "blocks":{
    "controlPanelBlock":{
      "edit":"Редагувати",
      "delete":"Видалити"
    },
    "lovePanelBlock":{
      "like":"Як",
      "liked":"Сподобалося",
      "star":"Зірка",
      "starred":"Знявся"
    },
    "moreFromUserBlock":{
      "viewAll":"Дивитися всі",
      "moreFromFirst":"Більше від",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"Сортувати по",
      "recent":"Останні",
      "views":"Вид",
      "stars":"Зірки",
      "likes":"Любить",
      "random":"Випадковий"
    },
    "shareBlock":{
      "link":"Посилання",
      "share":"Поділитися",
      "tweet":"Твітнуть",
      "textTwitter":"Програма \"${programTitle}\" за ${userName} на #LinguaCode ${userPageLink}",
      "descriptionVK":"LinguaCode-це Платформа соціального кодування і призначений спеціально для дітей, де вони можуть навчитися програмуванню і ділитися своїми кодами з рідною мовою і без необхідності знати англійську."
    },
    "userPrimaryInfoBlock":{
      "editProfile":"Редагувати профіль"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"Приєдналася"
    }
  },
  "pages":{
    "errorPage":{
      "title":"Помилка",
      "explanation":"На жаль, сталась критична помилка на цій сторінці."
    },
    "landingPage":{
      "title":"LinguaCode: навчання за допомогою кодування",
      "learningByCoding":"Навчання <span className=\"masthead--lora-italic\">by Coding</span>",
      "explanation":"Ми робимо навчання програмуванню і кодування, повний радості і життя, ви будете сміятися вголос.",
      "facebookSignIn":"Увійдіть у Facebook",
      "or":"або",
      "seeTheListOfPrograms":"Подивитися список існують програми",
      "descriptionHead":"Краще новий спосіб вивчення програмування.",
      "descriptionBody":"LinguaCode-це Платформа соціального кодування і призначений спеціально для дітей, де вони можуть навчитися програмуванню і ділитися своїми кодами з рідною мовою і без необхідності знати англійську.",
      "advantagesHeadline":"LinguaCode допоможе вам <span className=\"u-emphasized\">learn краще </span>",
      "advantageTopFirstHeadline":"Багатомовний",
      "advantageTopFirstDescription":"Писати програми рідною мовою, і не тільки.",
      "advantageTopSecondHeadline":"Це безкоштовно!",
      "advantageTopSecondDescription":"Все безкоштовно.",
      "advantageTopThirdHeadline":"Швидкий старт",
      "advantageTopThirdDescription":"Приступаючи до роботи набагато простіше, ніж ви думаєте!",
      "advantageBottomFirstHeadline":"Уява",
      "advantageBottomFirstDescription":"Вчіться, пробуйте, створюйте!",
      "advantageBottomSecondHeadline":"Освіта",
      "advantageBottomSecondDescription":"Вивчати програмування, а також інших предметів.",
      "advantageBottomThirdHeadline":"Спільнота",
      "advantageBottomThirdDescription":"Поділіться вашими програмами з друзями і знайти нових друзів.",
      "joinText":"Приєднатися до <span className=\"u-emphasized\">the community</span> учнів",
      "facebookRegister":"Зареєструйтеся зараз, це безкоштовно!"
    },
    "notFoundPage":{
      "title":"Сторінка Не Знайдена",
      "explanation":"Вибачте, але сторінка, яку ви намагаєтесь переглянути, не існує.",
      "descriptionPartFirst":"Спробуйте відправитися в",
      "descriptionPartSecond":"Головна сторінка",
      "descriptionPartThird":"замість."
    },
    "programChangePage":{
      "titleOfEditPage":"Редагування програми ${userName}/${title}",
      "editProgramHeadline":"Редагування програми",
      "editProgramButton":"Програма Редагування",
      "titleOfCreatePage":"Створити нову програму",
      "newProgramHeadline":"Створити нову програму",
      "submitProgramButton":"Програму Уявити",
      "programContent":"Програма містить всю інформацію про вашому коді.",
      "name":"Назва",
      "programNameForm":"Великі імена програми короткий і запам'ятовується, як <b>hello-world</b>.",
      "titleOfProgram":"Назва",
      "description":"Опис",
      "validationError":"Помилка перевірки",
      "errorTextForNameLength":"Довжина <b>name</b> повинні більше ніж 0 і менше, то 32, то він повинен складатися з латинських символів і рисок.",
      "errorTextForName":"Це джерела ім'я вже використовується вами.",
      "errorTextForTitle":"Довжина <b>title</b> більш ніж 0 і менше 128.",
      "errorTextForDescription":"Довжина <b>description</b> більш ніж 0 і менше 5120.",
      "errorTextForSource":"Довжина <b>source</b> більш ніж 0 і менше 10240."
    },
    "programs":{
      "title":"Програми"
    },
    "settingsPage":{
      "title":"Параметри",
      "publicProfile":"Публічний профіль",
      "validationError":"Помилка перевірки",
      "username":"Ім'я користувача",
      "yourUsername":"Ваш логін",
      "usernameWasAlreadyUsed":"Ім'я вже використовується",
      "usernameWasReserved":"Ім'я користувача було збережено",
      "usernameValidation":"Довжина <b>username</b> повинен бути менше 24 і містити маленькі букви латиниці та цифри.",
      "name":"Назва",
      "yourFirstNameAndLastName":"Ваше ім'я та прізвище",
      "nameValidation":"Довжина <b>name</b> повинні бути більше ніж 0 і менше ніж за 24",
      "bio":"Біо",
      "tellALittleAboutYourself":"Розповім трохи про себе",
      "bioValidation":"Довжина <b>bio</b> повинна бути менше ніж 128.",
      "country":"Країна",
      "select":"виберіть",
      "countryValidation":"Оберіть будь-якої з країн",
      "updateProfile":"Оновлення профілю"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"Знак в",
      "signInDescription":"Операція можлива тільки тоді, коли ви увійшли в систему."
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"Ви впевнені, що хочете видалити програму ?",
      "answerYes":"так",
      "answerNo":"немає"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"Вихід",
        "outputNameValue":"`linguacode\nвихідний(х)\n`",
        "outputDescription":"Друк будь-яких x значення: числа, операції, тексту і значень змінних. Наприклад",
        "outputDescriptionValue":"`linguacode\nвихід(4) # 4\nвисновок(«привіт») # привіт\nвихід(1+2) # 3\n`",
        "inputName":"Вхід",
        "inputNameValue":"`linguacode\nвхідний(x)\n`",
        "inputDescription":"Будь змінній x значення декларування користувачів. Наприклад",
        "inputDescriptionValue":"`linguacode\nвхідні(а)\n`",
        "ifElseStatementName":"Перевіривши заяву",
        "ifElseStatementNameValue":"`linguacode\nякщо <condition N1> тоді\n<operation N1>\nще якщо <condition N2> тоді\n<operation N2>\nще\n<operation N3>\n`",
        "ifElseStatementDescription":"Операції будуть виконуватися на підставі зазначених умова. Наприклад",
        "ifElseStatementDescriptionValue":"`linguacode\nа = 5\nб = 5\nякщо А > Б тоді\nвисновок(«А > Б»)\nще якщо a < b, то\nвисновок(«А < Б»)\nще\nвисновок(«B == А») # Б == А\n`",
        "loopForName":"Товариства повторити",
        "loopForNameValue":"`linguacode\nповторіть <N> разів\n<operation>\n`",
        "loopForDescription":"Виконує блок коду кілька разів. Наприклад",
        "loopForDescriptionValue":"`linguacode\nповторіть 10 разів\nвисновок(«Привіт»)\n`",
        "loopWhileDoName":"Цикл \"Поки Не\"",
        "loopWhileDoNameValue":"`linguacode\nа потім <condition>\n<operation>\n`",
        "loopWhileDoDescription":"\"У той час як\" петля виконується через блок коду, поки заданий умова істинна. Наприклад",
        "loopWhileDoDescriptionValue":"`linguacode\nа = 1\nа < 5 тоді\nВихідна(а)\nА = А + 1\n`",
        "loopDoWhileName":"Цикл \"Не Час\"",
        "loopDoWhileNameValue":"`linguacode\nробити\n<operation>\nхоча <condition>\n`",
        "loopDoWhileDescription":"Цикл \"не час\" буде повторювати цикл, поки умова істинна. Наприклад",
        "loopDoWhileDescriptionValue":"`linguacode\nа = 1\nробити \nВихідна(а)\nА = А + 1\nу той час як < 5\n`",
        "piName":"пі-математична константа",
        "piNameValue":"`linguacode\nвихід(пі)\n`",
        "piDescription":"Відбитки математична константа <b>pi</b>. Наприклад",
        "piDescriptionValue":"`linguacode\nвихід(пі) # 3.141592653589793\n`",
        "eNumberName":"е математична константа",
        "eNumberNameValue":"`linguacode\nвихід(е)\n`",
        "eNumberDescription":"Відбитки математична константа <b>e</b>. Наприклад",
        "eNumberDescriptionValue":"`linguacode\nвихід(е) # 2.718281828459045\n`",
        "sqrName":"Квадрат числа",
        "sqrNameValue":"`linguacode\nкв(х)\n`",
        "sqrDescription":"Повертає квадрат <b>X</b> кількість введеного користувачем. Наприклад",
        "sqrDescriptionValue":"`linguacode\nХ = 5 \nР = кв(х) \nвихід(р) # 25\n`",
        "powName":"Потужність кількість",
        "powNameValue":"`linguacode\nпау(х,Р)\n`",
        "powDescription":"Повертає значення <b>X</b> до влади <b>Y</b>. Наприклад",
        "powDescriptionValue":"`linguacode\nХ = 2 \nУ = 5 \nЗ = пр(х, Y) \nвихід(Z) і # 32\n`",
        "sqrtName":"Квадратний корінь з числа",
        "sqrtNameValue":"`linguacode\nфункція sqrt(х)\n`",
        "sqrtDescription":"Повертає квадратний корінь з <b>X</b> кількість введеного користувачем. Наприклад",
        "sqrtDescriptionValue":"`linguacode\nХ = 9 \nУ = корінь(х) \nвихід(р) # 3\n`",
        "absName":"Абсолютне значення числа",
        "absNameValue":"`linguacode\nАБС(х)\n`",
        "absDescription":"Повертає абсолютне значення <b>X</b> кількість введеного користувачем. Наприклад՝",
        "absDescriptionValue":"`linguacode\nХ = -5 \nР = АБС(х) \nвихід(р) # 5\n`",
        "roundName":"Кількість округлення",
        "roundNameValue":"`linguacode\nкруглий(х)\n`",
        "roundDescription":"Тури в <b>X</b> число до найближчого цілого і повертає значення. Наприклад",
        "roundDescriptionValue":"`linguacode\nХ = 2.3 \nа = круглий(х) \nВихідна(а) # 2\n`",
        "floorName":"Кількість підлога",
        "floorNameValue":"`linguacode\nпідлогу(x)\n`",
        "floorDescription":"Тури в <b>X</b> кількість <b>downwards</b> до найближчого цілого числа і повертає значення. Наприклад",
        "floorDescriptionValue":"`linguacode\nХ = 2.6 \nа = підлога(x) \nВихідна(а) # 2\n`",
        "ceilName":"Кількість підшити",
        "ceilNameValue":"`linguacode\nметод ceil(х)\n`",
        "ceilDescription":"Навколо <b>X</b> кількість <b>upwards</b> до свого найближчого цілого числа і повертає значення",
        "ceilDescriptionValue":"`linguacode\nХ = 2.2 \nа = Сел(х) \nВихідна(а) # 3\n`",
        "sinName":"Синус",
        "sinNameValue":"`linguacode\nгріх(х)\n`",
        "sinDescription":"Повертає значення <b>sine</b> з <b>X</b> кількість. Наприклад",
        "sinDescriptionValue":"`linguacode\nХ = гріх(пі) \nвихідний(х) # 0\n`",
        "cosName":"Косинус",
        "cosNameValue":"`linguacode\nсоѕ(х)\n`",
        "cosDescription":"Повертає значення <b>cosine</b> з <b>X</b> кількість. Наприклад",
        "cosDescriptionValue":"`linguacode\nХ = соѕ(пі) \nвихідний(х) # -1\n`",
        "tanName":"Дотичною",
        "tanNameValue":"`linguacode\nТан(х)\n`",
        "tanDescription":"Повертає значення <b>tangent</b> з <b>X</b> кількість. Наприклад՝",
        "tanDescriptionValue":"`linguacode\nХ = тангенс(пі) \nвихідний(х) # 0\n`",
        "ctgName":"Котангенс",
        "ctgNameValue":"`linguacode\nКТГ(х)\n`",
        "ctgDescription":"Повертає значення <b>cotangent</b> з <b>X</b> кількість. Наприклад՝",
        "ctgDescriptionValue":"`linguacode\nХ = КТГ(пі/4) \nвихідний(х) # 1\n`",
        "arcSinName":"Арксінус",
        "arcSinNameValue":"`linguacode\nобчислити arcsin(х)\n`",
        "arcSinDescription":"Повертає значення, де синус отримує таке ж значення, як <b>X</b>. Наприклад",
        "arcSinDescriptionValue":"`linguacode\nа = арксинуса(1) \nВихідна(а) # пі/2 \n`",
        "arcCosName":"Арккосинуса",
        "arcCosNameValue":"`linguacode\narccos(х)\n`",
        "arcCosDescription":"Повертає значення, де косинус отримує таке ж значення, як <b>X</b>. Наприклад",
        "arcCosDescriptionValue":"`linguacode\nа = arccos(1) \nВихідна(а) # 0\n`",
        "arcTanName":"Тангенс",
        "arcTanNameValue":"`linguacode\nрівності arctg(х)\n`",
        "arcTanDescription":"Повертає значення, де дотична отримує таке ж значення, як <b>X</b>. Наприклад",
        "arcTanDescriptionValue":"`linguacode\nа = рівності arctg(0) \nВихідна(а) # 0\n`",
        "arcCtgName":"Arccotangent",
        "arcCtgNameValue":"`linguacode\narcctg(х)\n`",
        "arcCtgDescription":"Повертає значення, де котангенс отримує таке ж значення, як <b>X</b>. Наприклад",
        "arcCtgDescriptionValue":"`linguacode\nа = arcctg(1) \nВихідна(а) # пі/4\n`",
        "logName":"Логарифм",
        "logNameValue":"`linguacode\nжурнал(х,Y)\n`",
        "logDescription":"Повертає значення логарифма <b>X</b> на базу <b>Y</b>. Наприклад",
        "logDescriptionValue":"`linguacode\nа = журнал(3,27) \nВихідна(а) # 3\n`",
        "lgName":"Десятковий логарифм",
        "lgNameValue":"`linguacode\nЛГ(р)\n`",
        "lgDescription":"Повертає значення логарифма <b>X</b> на базу <b>10</b>. Наприклад",
        "lgDescriptionValue":"`linguacode\nа = ЛГ(100) \nВихідна(а) # 10\n`",
        "lnName":"Натуральний логарифм",
        "lnNameValue":"`linguacode\nЛН(р)\n`",
        "lnDescription":"Повертає значення логарифма <b>X</b> на базу <b>e</b>. Наприклад",
        "lnDescriptionValue":"`linguacode\nа = ЛН(е) \nВихідна(а) # 1\n`",
        "randomName":"Випадкових чисел, генеруюча",
        "randomNameValue":"`linguacode\nвипадкова(х,[Y])\n`",
        "randomDescription":"Якщо параметр <b>Y</b> дається, програма буде випадковим чином генерувати і повертати випадкове ціле число від range<b>[х, у]</b>. Але без параметра <b>Y</b> діапазон буде <b>[0; х]</b>. Наприклад",
        "randomDescriptionValueFirst":"`linguacode\nХ = 10 \nа = випадкове(х) # [0; 10]\nВихідна(А) # 4 \n`",
        "randomDescriptionValueSecond":"`linguacode\nХ = 5 \nР = 15 \nа = випадкове(х,Y) # [5; 15]\nвихід () # 12\n`"
      },
      "tutorials":{
        "intro":"Введення",
        "output":"Вихід",
        "variables":"Змінні",
        "input":"Вхід",
        "operations":"Операції",
        "conditions":"Умови",
        "boolean":"Логічне",
        "languageAboutLanguageTitle":"Про Мову",
        "languageAboutLanguageContent":"LinguaCode створений для всіх тих, хто хоче освоїти Основи програмування в більш зручний спосіб. \nВчитися з LinguaCode це не важливо знання іноземних мов або технічних навичок. Все, що вам потрібно, це бажання вчитися і старанність. \n\n#### Особливості:\n- **Багатомовна**\n- **Мультиплатформеність**\n- **Простий вихідний код**\n- **** Безкоштовно\n",
        "languageFeaturesTitle":"Мовні Особливості",
        "languageFeaturesContent":"LinguaCode заснований на Python, Паскаль і javascript, що робить його легко зрозуміти з допомогою простий вихідний код, а потім вчити іншу мову програмування більш швидко. \n\n**Тут представлені всі основні поняття мови:**\n\n- **Кожна команда починається з нового рядка.** \nВихідний код буде більш простим і зрозумілим способом.\n- **Команди можуть бути написані як великими, так і малими літерами.** \nЦе прискорює процес програмування, але він волів писати з малої.\n- **Текст може бути написаний між обома лапками та апострофи.** \nУ багатьох країнах немає жодних лапок у використанні, тому тут ви можете вибрати зручний для вас варіант.\n- **Текст, написаний після символу «\\#» вважається коментарем і не впливає на роботу коду.** \nКоментарі призначені для нотаток.",
        "outputCommandDefinitionTitle":"Команди визначення",
        "outputCommandDefinitionContent":"Кожна програма, яка робить деякі операції, повинні показати нам інформацію про результат. Ось чому всім системам програмування тексту, можливість виведення і місце, де ми можемо побачити результат, який називається **термінал**. \n\nКоманда «*вихід*» використовується для виведення тексту. \n\n#### Наприклад \nLinguacode вихідний код`\nвисновок(«Привіт»)\nТермінал `результат`\nПривітик\n`",
        "outputPossibleValuesTitle":"Можливі значення",
        "outputPossibleValuesContent":"Висновок команди може друкувати текст, числа, математичні операції і значень змінних.\n\n#### Наприклад \nВихідний код \n`linguacode\nвихід(100)\nвихід(5 * 25)\nТермінал `результат`\n100\n125\n`",
        "variablesDeclaresAndAssignsTitle":"Оголошення та призначення",
        "variablesDeclaresAndAssignsContent":"Часто нам потрібно зберегти текст, числа і числових операцій десь з метою використовувати його знову. Контейнери, в яких можна зберігати різні значення, називаються **змінні**. Спочатку ми повинні дати ім'я змінної, а потім присвоїти їй значення. Після цього ми можемо звернутися до значення просто зателефонувавши змінної за її ім'ям. \nЗмінні зберігаються в оперативній пам'яті (ОЗП) комп'ютера і коли ми використовуємо змінну, комп'ютер повертає значення, відповідне ім'я змінної з оперативної пам'яті.\n#### Важливо пам'ятати\nІмена змінних \n**1.** Може містити букви, знаки або цифри \n**2.** Не може починатися з цифри \n**3.** Не може містити пробіл і символи арифметичних операцій\n#### Наприклад \nДля друку кількість **617** замість цього \n`linguacode\nвихід(617)\n`\nми будемо писати\n`linguacode\nХ = 617\nвихідний(х)\n`\nРезультат\n`термінал\n617\n` \nІ якщо ми хочемо на виході одне і те ж значення у три рази, ми будемо писати \n`linguacode\nХ = 617\nвихідний(х)\nвихідний(х)\nвихідний(х)\n` \nРезультат \n`термінал\n617\n617\n617\n`",
        "variablesPracticalUseTitle":"Практичне використання",
        "variablesPracticalUseContent":"Як ми бачимо, ми можемо призначити як числові, так і текстові значення для змінних. Але часто ми повинні привласнити змінної якесь значення, яке було призначено ще одне. В цьому випадку ми можемо призначити вже існуючу змінну до нового.\n#### Наприклад \nВихідний код\n`linguacode\nа = 1\nБ = 2\nЗ = А + Б\nвихід(с)\n` \nРезультат\n`термінал\n3\n`\n",
        "variablesMultipleUsesTitle":"Множинне використання",
        "variablesMultipleUsesContent":"Ви не повинні створити нову змінну нове значення кожен раз. Також ми можемо змінити значення, присвоєні змінним. Ми будемо уникати зайвих змінних і вихідний код буде більш простий вихід.\n#### Наприклад\nДавайте припустимо, що ми маємо **100** яблука і зберегти значення в **яблуко** змінної. Кількість яблук зменшується на **5** кожен день. \nМи повинні вихідна кількість яблук на кожен день. \n\nВихідний код\n`linguacode\nяблуко = 100\nвихід(яблуко)\n\nяблуко = яблуко - 5 # 95\nвихід (яблуко)\n\nяблуко = яблуко - 5 # 90\nвихід(яблуко)\n\nяблуко = яблуко - 5 # 85\nвихід(яблуко)\n` \nРезультат\n`термінал\n100\n95\n90\n85\n`",
        "inputCommandDefinitionTitle":"Команди визначення",
        "inputCommandDefinitionContent":"У програмуванні потрібен як вихідний і у багатьох випадках для введення даних. Нам це потрібно, коли змінні можуть приймати будь-яке значення. Також ми можемо змінити вихідний код кожного разу, та присвоїти нові значення змінної, але це не ефективно та потребує надто багато часу. \n\nУ цьому випадку ми використовуємо команду \"*вхід*\". \n\nІ ось простий приклад програми, яка виводить два числа, введені користувачем. `linguacode\nвхід(кількість)\nвихід(кількість * 2)\nПісля запуску цієї програми ми побачимо символ \"**>**\", який означає, що програма вже почалася, і ми повинні ввести необхідні дані. Після введення будь-якого числа і натискання **введіть** ми побачимо два введених числа. `термінал\n>617\n1234\n`В основному нам потрібен для написання програм, які можуть бути використані людьми, які навіть не знають програмування.",
        "inputWorkMechanismTitle":"Механізм роботи",
        "inputWorkMechanismContent":"Тепер давайте подивимося, як команди вводу. Наприклад у нас є програма `linguacode\nвисновок(\"будь ласка, введіть ваші облікові дані\")\nвисновок(\"ім'я\")\nвведення(ім'я)\nвисновок(\"прізвище:\")\nвведення(прізвище)\nвисновок(\"Привіт\" + ім'я + \"\" + прізвище)\n` Як ми бачимо, є 6 рядків у нашій програмі. \nПісля її запуску ми бачимо, що програма працювала до лінії 3`.`термінал\nБудь ласка, введіть свої облікові дані:\nІм'я:\n>\n` Після введення відсутніх даних, ми побачимо, що зараз він працював до лінії 5.`термінал\nБудь ласка, введіть свої облікові дані:\nІм'я:\n>Морські\nПрізвище:\n>\n` І, нарешті, після введення останнього переплуталися даних програми будуть працювати і кінець`.`термінал\nБудь ласка, введіть свої облікові дані:\nІм'я:\n>Морські\nПрізвище:\n>Chamchyan\nПривіт, Морський Chamchyan\n` Отже, ми побачили, що за допомогою цієї команди програма працює по частинах, що потребують для введення відсутніх даних.",
        "operationsArithmeticOperatorsTitle":"Арифметичні операції",
        "operationsArithmeticOperatorsContent":"У LinguaCode можна виконувати прості арифметичні операції, такі як **+**, **-**, **\\***, **/**. \n\nНаприклад, ця програма зробить все арифметичні оператори з **1** і **2** цифри. `linguacode\nвихід(1 + 2) # 3\nвихід(1 - 2) # -1\nвихід(1 * 2) # 2\nвихід(1 / 2) # 0.5\n` ` #### Важливо пам'ятати \nЯк ми знаємо в математиці множення змінної з іншої змінної або числа можуть бути написані без символу множення. Наприклад, *7 разів х* буде написано **7х** або *х разів г* Як *ху***. \nАле в програмуванні дуже важливо написати символ множення. Наприклад **7 \\* х**, або **х \\* Р**.",
        "operationsExecutingPriorityTitle":"Виконання операцій пріоритет",
        "operationsExecutingPriorityContent":"Як в математиці і в програмуванні, якщо є поділ або множення, то по-перше робити їх і тільки після того, як ми виконуємо додавання і віднімання. \n\n###Linguacode# наприклад, `\nХ = 10 + 2 * 4 - 2\n# Х = 10 + 8 - 2\n# Х = 18 - 2\n# Х = 16\n` Але ми можемо змінити пріоритет виконання за допомогою квадратних дужок. \n###Linguacode# наприклад, `\nХ = (10 + 2) * (4 - 2)\n# Х = 12 * (4 - 2)\n# Х = 12 * 2\n# Х = 24\n`В програмуванні ми можемо використовувати дужки, навіть якщо вони є непотрібними. \nВін не буде неправильно, але він волів писати простий і зрозумілий код, який буде легко зрозуміти, для інших.",
        "operationsNumbersTitle":"Цифри",
        "operationsNumbersContent":"Як ми знаємо, <a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">numbers</a>-це математичні об'єкти, що використовуються для підрахунку, вимірювання і мітки. \nЄ 5 видів чисел. Ми будемо мати справу з усіма з них, крім комплексу numbes \n- ** натуральних чисел** **1**, **2**, ...`linguacode\nвихід(7 + 4) # 13\n` \n- **цілі числа** ..., **-1**, **0**, **1**, ...`linguacode\nвихід(-6 * 5 + -3) # -33\n` \n- **раціональні числа** **1/2**, **2/3**, **0.125**, ...`linguacode\nвихід(0.617 * 2 * 1000) # 1234\n` \n- **реальні цифри** **√2**, **1.62**, ...`linguacode\nвихід(2/3 + 1/2) # 1\n`",
        "operationsSumOfStringAndNumberTitle":"Сума рядків і чисел",
        "operationsSumOfStringAndNumberContent":"Як ми бачимо, можна додати цифри і тексти один з одним, в які рядка результату об'єднуються в один рядок. Але часто нам потрібно отримати рядок, в якому буде використовуватися числове значення. У цьому випадку можна додати текст в число, в результаті якого номер буде змінений і в поєднанні з текстом, як текст.`linguacode\nтекст = «є » + 365 + « днів в році»\n# текст = «є » + «365» + « днів в році»\n# текст = «є 365» + « днів в році»\n# текст = «є 365 днів в році»\n` ` #### Важливо пам'ятати \nЗ лініями ми можемо зробити тільки додаючи роботи. При виконанні інших операцій призведе до помилки.",
        "conditionsCommandsIfTitle":"Команда \"Якщо\"",
        "conditionsCommandsIfContent":"Іноді в програмуванні нам необхідно виконати деякі операції залежно від стану. Для це є стан перевірка команди, як \"якщо\", \"Якщо-то\" і \"інакше якщо\". \n\nПисьмовій формі команди «****» `linguacode\nякщо <condition> тоді\n<operation>\n` Тут між командами «якщо» і «тоді» є стан, і вже після цього з нового рядка і після **4 місця** написано операції (або операцій), що і буде зроблено, якщо твердження правильне. \n\n###Linguacode# наприклад, `\nа = 5\nБ = 2\nякщо А > Б тоді\nвисновок(«А > Б»)\n`",
        "conditionsCommandsIfElseTitle":"Команда \"Якщо-То\"",
        "conditionsCommandsIfElseContent":"Тому ми знаємо, як використовувати умовний оператор в програму. Тепер ми розглянемо випадок, коли умова хибна.\n\nПисьмовій формі «**-**» заява `linguacode\nякщо <condition> тоді\n<operation N1>\nще\n<operation N2>\n` Тут після команди \"якщо\" з'явилася нова команда \"ще\". І з нового рядка, після 4 пробіли записується операція, яка буде виконана, якщо умова хибна.\n\n###Linguacode# наприклад, `\nа = 5\nБ = 10\nякщо А > Б\nвисновок(«А > Б»)\nще\nвисновок(«б<»)\n`",
        "conditionsCommandsElseIfTitle":"Команда \"Ще-Якщо\"",
        "conditionsCommandsElseIfContent":"Ми вже обговорювали, що команда буде виконана, грунтуючись на стані бути істинним або хибним. Але іноді нам потрібно перевірити кілька умов одночасно. \n\nПисьмовій формі \"**якщо-то-якщо**\" заява`linguacode\nякщо <condition N1> тоді\n<operation N1>\nще якщо <condition N2> тоді\n<operation N2>\nще\n<operation N3>\n` Тут ми повинні перевірити більш ніж одну умову. У випадку \"ще-якщо письмовій формі може бути 1 або більше \"ще, якщо\" заяви між командами \"якщо\" і \"інакше\". \n\n###Linguacode# наприклад, `\nа = 5\nб = 5\nякщо А > Б тоді\nвисновок(«А > Б»)\nще якщо a < b, то\nвисновок(«А < Б»)\nще\nвисновок(«B == А»)\n`",
        "booleanTypesBooleanTitle":"Опис",
        "booleanTypesBooleanContent":"Ми вже знаємо, як перевірити звітність і деякі з них можуть бути *правда* (22 > 18) або *брехня* (16 > 18). Іноді з-за довжини перевірка стану лінії, його стає важко читати вихідний код. Тут приходить на допомогу логічні значення \n\n- **правда** `linguacode\nумова = True\nвихід(стан) #правда\n` \n\n- **брехня**`linguacode\nумова = false\nвихід(стан) #неправдиві\n` Будь-яке логічне порівняння відомих нам повертає одне з зазначених значень \n\nПриклад *правда* порівняння `linguacode\nумова = 1 < 5\nвихід(стан) # правда\n` Приклад *помилкові* порівняння `linguacode\nумова = 10 < 5\nвихід(стан) # неправдиві\n` Так, перевіряти стан команди ми можемо використовувати змінні з булевими операторами значеннями. \n\n###Linguacode# наприклад, `\nвисновок(«написати \"а\":»)\nвхідні(а)\n\nвихід(«напиши номер \"б\":»)\nвхідні(б)\n\nусловие1 = А > Б\nусловие2 = А < Б\n\nякщо условие1 тоді\nрезультат = «а > б»\nще якщо условие2 тоді\nрезультат = «а < б»\nще\nрезультат = « = = б»։\nвисновок(«результат: » + результат)\n`",
        "booleanOperatorsComparisonTitle":"Оператори порівняння",
        "booleanOperatorsComparisonContent":"В умова перевірки команд ми вже використовували символи \"більше\" та \"менше\" < оператори порівняння. Але тепер тут ми можемо використовувати будь-які інші оператори, відомі нам. \n\n- **>** порівнює числові значення, в якому перший *#більше, ніж друга. Наприклад, `linguacode\nвихід(5 > 1) # правда\nвихід(1 > 5) # неправдиві\n` \n\n- **>=** порівнює числові значення, в якому перший *#більше або дорівнює* другий. Наприклад, `linguacode\nвихід(5 >= 5) # правда\nвихід(1 >= 5) # неправдиві\n` \n\n- **<** порівнює числові значення, в якому перший *#менше*, ніж друга. Наприклад, `linguacode\nвихід(1 < 5) # правда\nвихід(5 < 1) # неправдиві\n` \n\n- **<=** порівнює числові значення, в якому перший *#менше або дорівнює* другий. Наприклад, `linguacode\nвихід(1 <= 5) # правда\nвихід(5 <= 1) # неправдиві\n` \n\n- **==** порівняння числових або текстових значень, в якому перший *#дорівнює* другий. Наприклад, `linguacode\nвихід(5 == 5) # правда\nвихід(5 == 1) # неправдиві\nвисновок(«солдат» == «солдат») # правда\nвисновок(«Привіт» == «вертоліт») # неправдиві\n` \n\n- **!=** порівняння числових або текстових значень, в якому перший *#не одно* другий. Наприклад, `linguacode\nвихід(5 != 1) # правда\nвихід(5 != 5) # неправдиві\nвисновок(«Привіт» != «Хэло») # правда\nвисновок(«солдат» != «солдат») # неправдиві\n` \n\n- **()** повертає назад результаті числові або текстові порівняння. Наприклад, `linguacode\nвихід(не(1 > 5)) # правда\nвихід(не(5 == 5)) # неправдиві\nвихід(ні(false)) # правда\nвихід(не(правда)) # брехня\n`",
        "booleanOperatorsLogicalTitle":"Логічні оператори",
        "booleanOperatorsLogicalContent":"Тому ми знаємо, як писати якийсь умовний оператор, але часто нам потрібно, щоб об'єднати кілька умов в одному, і на його основі виконати деякі операції. Поєднання умов відбувається шляхом логічних операторів. \n\n- Команда «**і**» поєднує в собі дві умови в одне, яке називається **правда** коли обидві умови *правда* ** * * брехня** якщо хоча б одна з умов *брехня*. Наприклад, `linguacode\nвихід(5 > 1 և 10 < 100) # правда\nвихід(20 < 100 և 1 > 5) # неправдиві\n` \n\n- Команда «**або**» поєднує в собі дві умови в одне, яке називається **правда** якщо хоча б одна з умов-це *правда* ** * * брехня** коли дві умови будуть *помилкова*. Наприклад, `linguacode\nвихід(5 > 1 або 100 < 10) # правда\nвихід(20 > 100 або 1 > 5) # неправдиві\n`",
        "booleanOperatorsExecutingPriorityTitle":"Пріоритет виконання",
        "booleanOperatorsExecutingPriorityContent":"Ми дізналися, як поєднати 2 умови, але вони можуть бути більше, ніж 2, на основі змісту програми. У цьому випадку, умови будуть поєднуватися один з одним від *зліва направо*, поки вони не утворюють одну умову.\n\n###Linguacode# наприклад, `\nвихід(5 < 1 և 1 < 7 або 1 >= 3 і 9 == 9)\n` це ж як `linguacode\nвиведення(помилкової և True або false або True)\n` давайте об'єднаємо **1-й** і **2ом** \"**брехня і правда**\" умов в одному․ `linguacode\nвихід(або false false або True)\n`тоді **1+2** стан з **3-х** \"**брехня або false**\" `linguacode\nвихід(false або True)\n` і, нарешті,**1+2+3** стан **4** \"**false або True**\"․ `linguacode\nвихід(правда)\n` Отже, ми об'єднуємо 4 умови в одному. Ми можемо об'єднати декілька умов, таким чином. \n\nІноді потрібно міняти зліва направо поєднання пріоритету за допомогою дужок. \n\n###Linguacode# наприклад, `\nвихід(5 < 1 և (1 < 7 або (1 >= 3 і 9 == 9)))\n` \n\nце ж як `linguacode\nвиведення(помилкової և (True або false або True)))\n` давайте об'єднаємо **3-й** і **4** \"**false або True**\" умови `linguacode\nвихід(хибність (false або True))\n` після того як він **2ом** стан з **3+4** стан буде \"**false або True**\" `linguacode\nвиведення(помилкової և правда)\n` і, нарешті, давайте об'єднаємо **1-й** стан з **2+(3+4)**. Це буде \"**брехня і правда**\" `linguacode\nвисновок(помилковий)\n` Отже, ми побачили, що результат змінюється зі зміною поєднання пріоритет."
      },
      "syntaxInfo":{
        "modalTitle":"Команда керівництво",
        "cheatSheetTitle":"Шпаргалка",
        "lesson":"Підручник"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b> Hotkeys</b>",
      "undo":"Скасувати",
      "redo":"Повтор",
      "selectAll":"Вибрати все",
      "run":"Запустити",
      "terminal":"Термінал"
    },
    "program":{
      "program":"Програма",
      "sourceCode":"Вихідний код",
      "functionArgumentSyntaxError":"Функція синтаксис аргумент помилка в рядку ${line}.",
      "undefinedVariable":"У \"${variable}\" змінна не визначена в рядку ${line}.",
      "indentError":"Простір помилка в рядку ${line}.",
      "hackAttempt":"Спробу злому. Ваш \"${ip}\" IP-адресу збережено у нашій базі даних.",
      "syntaxError":"Синтаксична помилка",
      "timeout":"Скласти тайм-аут. Переконайтеся, що код не до нескінченності.",
      "true":"правда",
      "false":"помилкові",
      "NaN":"невідомо",
      "null":"невідомо",
      "Infinity":"нескінченність",
      "undefined":"не визначено"
    },
    "programListGroup":{
      "programs":"Програми"
    },
    "terminal":{
      "hotkeys":"<b> Hotkeys</b>",
      "undo":"Скасувати",
      "redo":"Повтор",
      "selectAll":"Вибрати все",
      "terminal":"Термінал"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"Знак в"
    },
    "menuButton":{
      "settings":"Параметри",
      "logOut":"Вихід"
    }
  },
  "panels":{
    "header":{
      "title":"Вдома"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"Користувач не має ніяких програм поки що немає."
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"У вас немає ніяких програм поки що немає.",
      "programNotFoundClickPartFirst":"Натисніть",
      "programNotFoundClickPartSecond":"тут",
      "programNotFoundClickPartThird":"щоб створити нову програму."
    },
    "loading":{
      "loading":"Завантаження"
    }
  }
}