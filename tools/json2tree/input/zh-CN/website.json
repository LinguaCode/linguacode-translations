{
  "blocks":{
    "controlPanelBlock":{
      "edit":"编辑",
      "delete":"删除"
    },
    "lovePanelBlock":{
      "like":"喜欢",
      "liked":"很喜欢",
      "star":"明星",
      "starred":"主演"
    },
    "moreFromUserBlock":{
      "viewAll":"查看所有的",
      "moreFromFirst":"更多来自",
      "moreFromLast":""
    },
    "programListFilterBlock":{
      "sortBy":"排序",
      "recent":"近",
      "views":"的风景",
      "stars":"星星",
      "likes":"喜欢",
      "random":"随机的"
    },
    "shareBlock":{
      "link":"链接",
      "share":"分享",
      "tweet":"鸣叫",
      "textTwitter":"程序\"${programTitle}\"通过${userName}上#LinguaCode${userPageLink}",
      "descriptionVK":"LinguaCode是一个社会编码平台，并是专为儿童设计的，他们在那里可以学习程，并分享他们的编码与他们的母语并不需要知道的英语。"
    },
    "userPrimaryInfoBlock":{
      "editProfile":"编辑档案"
    },
    "userSecondaryInfoBlock":{
      "joinedOn":"加入上"
    }
  },
  "pages":{
    "errorPage":{
      "title":"错误",
      "explanation":"对不起，一个严重的错误上发生的这一页。"
    },
    "landingPage":{
      "title":"LinguaCode：学习的编码",
      "learningByCoding":"学习<span className=\"masthead--lora-italic\">by Coding</span>",
      "explanation":"我们学习的编程和编码如此充满欢乐和生活中，你会笑出声来。",
      "facebookSignIn":"使用 Facebook 登入",
      "or":"或者",
      "seeTheListOfPrograms":"看到列表中的存在程序",
      "descriptionHead":"最好的新的学习方式的一节目。",
      "descriptionBody":"LinguaCode是一个社会编码平台，并是专为儿童设计的，他们在那里可以学习程，并分享他们的编码与他们的母语并不需要知道的英语。",
      "advantagesHeadline":"LinguaCode可以帮助你<span className=\"u-emphasized\">learn更好</span>",
      "advantageTopFirstHeadline":"多语言",
      "advantageTopFirstDescription":"写程序上你的母语，而不是只。",
      "advantageTopSecondHeadline":"它是免费的！",
      "advantageTopSecondDescription":"一切都是免费的。",
      "advantageTopThirdHeadline":"快速启动",
      "advantageTopThirdDescription":"开始就是比你想象的要容易得多了。",
      "advantageBottomFirstHeadline":"想象力",
      "advantageBottomFirstDescription":"学习，尝试，创造！",
      "advantageBottomSecondHeadline":"教育",
      "advantageBottomSecondDescription":"学会编程，以及其他科目。",
      "advantageBottomThirdHeadline":"社会",
      "advantageBottomThirdDescription":"分享你的程序与朋友和找新的朋友。",
      "joinText":"加入到<span className=\"u-emphasized\">the community</span>的学习者",
      "facebookRegister":"现在注册，它是免费的！"
    },
    "notFoundPage":{
      "title":"页上找不到",
      "explanation":"对不起，但是你们试图景并不存在。",
      "descriptionPartFirst":"尝试去",
      "descriptionPartSecond":"主页",
      "descriptionPartThird":"代替。"
    },
    "programChangePage":{
      "titleOfEditPage":"编辑${userName}/${title}程序",
      "editProgramHeadline":"编辑程序",
      "editProgramButton":"编辑程序",
      "titleOfCreatePage":"创建一个新的程序",
      "newProgramHeadline":"创建一个新的程序",
      "submitProgramButton":"提交程序",
      "programContent":"一个程序包含的所有信息，你的代码。",
      "name":"名称",
      "programNameForm":"伟大的计划名称的短期和令人难忘，如<b>hello-world</b>的。",
      "titleOfProgram":"标题",
      "description":"描述",
      "validationError":"验证错误",
      "errorTextForNameLength":"长<b>name</b>应超过0和不32，它应该包括拉丁符号和破折号。",
      "errorTextForName":"这一名称的来源是已经在使用你的。",
      "errorTextForTitle":"长<b>title</b>应超过0和不128.",
      "errorTextForDescription":"长<b>description</b>应超过0和不5120的。",
      "errorTextForSource":"长<b>source</b>应超过0和不10240的。"
    },
    "programs":{
      "title":"程序"
    },
    "settingsPage":{
      "title":"设置",
      "publicProfile":"公共档案",
      "validationError":"验证错误",
      "username":"用户名",
      "yourUsername":"你的用户名",
      "usernameWasAlreadyUsed":"用户名是已经被使用",
      "usernameWasReserved":"用户名是保留",
      "usernameValidation":"长<b>username</b>应少于24和含有小小的字母的拉丁美洲和数字。",
      "name":"名称",
      "yourFirstNameAndLastName":"你的名字和姓氏",
      "nameValidation":"长<b>name</b>应超过0和不到24",
      "bio":"生物",
      "tellALittleAboutYourself":"告诉一些关于你自己",
      "bioValidation":"长<b>bio</b>应该不那么128个。",
      "country":"国",
      "select":"选择",
      "countryValidation":"选择的任何国家",
      "updateProfile":"更新个人资料"
    }
  },
  "modals":{
    "loginRequiredModal":{
      "signInTitle":"登录在",
      "signInDescription":"操作是可能的，只有当你在签署中。"
    },
    "programDeleteModal":{
      "programDeleteConfirmation":"你确定要删除的程序？",
      "answerYes":"是的",
      "answerNo":"没有"
    },
    "syntaxInfoModal":{
      "cheatSheet":{
        "outputName":"输出",
        "outputNameValue":"``linguacode\n输出(X)\n``",
        "outputDescription":"印任何X值：数字，操作，文本和可变价值观。 例如",
        "outputDescriptionValue":"``linguacode\n输出(4)第4\n输出(\"你好\")#你好\n输出(1+2)#3\n``",
        "inputName":"输入",
        "inputNameValue":"``linguacode\n输入(X)\n``",
        "inputDescription":"任何X变量值，宣布通过用户。 例如",
        "inputDescriptionValue":"``linguacode\n输入(a)\n``",
        "ifElseStatementName":"检查的声明",
        "ifElseStatementNameValue":"``linguacode\n如果<condition N1>然后\n<operation N1>\n否则，如果<condition N2>然后\n<operation N2>\n别\n<operation N3>\n``",
        "ifElseStatementDescription":"行动将执行根据规定的条件是正确的。 例如",
        "ifElseStatementDescriptionValue":"``linguacode\na=5\nb=5\n如果一个>b然后\n输出(\">b\")\n否则，如果一个<b然后\n输出(\"<b\")\n别\n输出(\"b==\")#b==\n``",
        "loopForName":"限制重复",
        "loopForNameValue":"``linguacode\n重复<N>次\n<operation>\n``",
        "loopForDescription":"执行一块代码的次数。 例如",
        "loopForDescriptionValue":"``linguacode\n重复10次\n输出(\"你好\")\n``",
        "loopWhileDoName":"循环\"，而要做的\"",
        "loopWhileDoNameValue":"``linguacode\n同时<condition>然后\n<operation>\n``",
        "loopWhileDoDescription":"\"虽然做到\"循环执行通过的一块代码，作为一个指定的条件是正确的。 例如",
        "loopWhileDoDescriptionValue":"``linguacode\na=1\n同时<5然后\n产出(a)\na=1\n``",
        "loopDoWhileName":"循环\"做的话\"",
        "loopDoWhileNameValue":"``linguacode\n做\n<operation>\n同时<condition>\n``",
        "loopDoWhileDescription":"循环\"做的话，\"将重复的循环，因为只要条件是真实的。 例如",
        "loopDoWhileDescriptionValue":"``linguacode\na=1\n做 \n产出(a)\na=1\n同时<5\n``",
        "piName":"pi的数学定",
        "piNameValue":"``linguacode\n输出(pi)\n``",
        "piDescription":"印刷品的数学定<b>pi</b>的。 例如",
        "piDescriptionValue":"``linguacode\n输出(pi)#3.141592653589793\n``",
        "eNumberName":"e数学定",
        "eNumberNameValue":"``linguacode\n输出(e)\n``",
        "eNumberDescription":"印刷品的数学定<b>e</b>的。 例如",
        "eNumberDescriptionValue":"``linguacode\n输出(e)#2.718281828459045\n``",
        "sqrName":"方的数量",
        "sqrNameValue":"``linguacode\n编(X)\n``",
        "sqrDescription":"返回方的<b>X</b>数量输入的用户。 例如",
        "sqrDescriptionValue":"``linguacode\nX=5 \nY=编(X) \n输出(Y)第25\n``",
        "powName":"力量",
        "powNameValue":"``linguacode\npow(X,Y)\n``",
        "powDescription":"返回的价值<b>X</b>的力量<b>Y</b>的。 例如",
        "powDescriptionValue":"``linguacode\nX=2 \nY=5 \nZ=pow(X,Y) \n输出(Z)第32\n``",
        "sqrtName":"方根号",
        "sqrtNameValue":"``linguacode\nsqrt(X)\n``",
        "sqrtDescription":"返回的平方根<b>X</b>数量输入的用户。 例如",
        "sqrtDescriptionValue":"``linguacode\nX=9 \nY=sqrt(X) \n输出(Y)#3\n``",
        "absName":"绝对值数",
        "absNameValue":"``linguacode\nabs(X)\n``",
        "absDescription":"返回的绝对值<b>X</b>数量输入的用户。 例如՝",
        "absDescriptionValue":"``linguacode\nX=-5 \nY=abs(X) \n输出(Y)#5\n``",
        "roundName":"数四舍五入",
        "roundNameValue":"``linguacode\n圆(X)\n``",
        "roundDescription":"回合的一个<b>X</b>数最接近的整数和返回的价值。 例如",
        "roundDescriptionValue":"``linguacode\nX=2.3 \na=round(X) \n产出(a)#2\n``",
        "floorName":"数字楼",
        "floorNameValue":"``linguacode\n楼(X)\n``",
        "floorDescription":"回合的一个<b>X</b>数<b>downwards</b>最接近的整数和返回的价值。 例如",
        "floorDescriptionValue":"``linguacode\nX=2.6 \na=floor(X) \n产出(a)#2\n``",
        "ceilName":"数ceil",
        "ceilNameValue":"``linguacode\nceil(X)\n``",
        "ceilDescription":"圆<b>X</b>数<b>upwards</b>其最接近的整数和返回的价值",
        "ceilDescriptionValue":"``linguacode\nX=2.2 \na=ceil(X) \n产出(a)#3\n``",
        "sinName":"正弦",
        "sinNameValue":"``linguacode\nsin(X)\n``",
        "sinDescription":"返回的价值<b>sine</b>的<b>X</b>数。 例如",
        "sinDescriptionValue":"``linguacode\nX=sin(pi) \n输出(X)#0\n``",
        "cosName":"余弦",
        "cosNameValue":"``linguacode\ncos(X)\n``",
        "cosDescription":"返回的价值<b>cosine</b>的<b>X</b>数。 例如",
        "cosDescriptionValue":"``linguacode\nX=cos(pi) \n输出(X)#-1\n``",
        "tanName":"切",
        "tanNameValue":"``linguacode\ntan(X)\n``",
        "tanDescription":"返回的价值<b>tangent</b>的<b>X</b>数。 例如՝",
        "tanDescriptionValue":"``linguacode\nX=tan(pi) \n输出(X)#0\n``",
        "ctgName":"余切",
        "ctgNameValue":"``linguacode\n集团(X)\n``",
        "ctgDescription":"返回的价值<b>cotangent</b>的<b>X</b>数。 例如՝",
        "ctgDescriptionValue":"``linguacode\nX=集团(pi/4) \n输出(X)#1\n``",
        "arcSinName":"反正弦",
        "arcSinNameValue":"``linguacode\n符号有时在和之间易(X)\n``",
        "arcSinDescription":"返回值，其中的正弦得到相同的价值为<b>X</b>的。 例如",
        "arcSinDescriptionValue":"``linguacode\na=符号有时在和之间易(1) \n产出(a)#pi/2 \n``",
        "arcCosName":"值。",
        "arcCosNameValue":"``linguacode\narccos(X)\n``",
        "arcCosDescription":"返回值其余弦得到相同的价值为<b>X</b>的。 例如",
        "arcCosDescriptionValue":"``linguacode\na=arccos(1) \n产出(a)#0\n``",
        "arcTanName":"反正切",
        "arcTanNameValue":"``linguacode\natan(X)\n``",
        "arcTanDescription":"返回哪里切得到相同的价值为<b>X</b>的。 例如",
        "arcTanDescriptionValue":"``linguacode\na=atan(0) \n产出(a)#0\n``",
        "arcCtgName":"Arccotangent",
        "arcCtgNameValue":"``linguacode\narcctg(X)\n``",
        "arcCtgDescription":"返回值其余切得到相同的价值为<b>X</b>的。 例如",
        "arcCtgDescriptionValue":"``linguacode\na=arcctg(1) \n产出(a)#pi/4\n``",
        "logName":"对数",
        "logNameValue":"``linguacode\nlog(X,Y)\n``",
        "logDescription":"返回的价值对数<b>X</b>基<b>Y</b>的。 例如",
        "logDescriptionValue":"``linguacode\na=log(3,27) \n产出(a)#3\n``",
        "lgName":"常用对数",
        "lgNameValue":"``linguacode\nlg(Y)\n``",
        "lgDescription":"返回的价值对数<b>X</b>基<b>10</b>的。 例如",
        "lgDescriptionValue":"``linguacode\na=eng(100) \n产出(a)#10\n``",
        "lnName":"自然对数",
        "lnNameValue":"``linguacode\nln(Y)\n``",
        "lnDescription":"返回的价值对数<b>X</b>基<b>e</b>的。 例如",
        "lnDescriptionValue":"``linguacode\n一=l(e) \n产出(a)#1\n``",
        "randomName":"随机数发生",
        "randomNameValue":"``linguacode\n随机(X，[Y])\n``",
        "randomDescription":"如果参数<b>Y</b>给出的是，程序将随机产生和返回的随机整数从range<b>[X;Y]</b>的。 但没有<b>Y</b>参数范围内将<b>[0;X]</b>的。 例如",
        "randomDescriptionValueFirst":"``linguacode\nX=10 \na=随机(X)#[0;10]\n产出(a)第4 \n``",
        "randomDescriptionValueSecond":"``linguacode\nX=5 \nY=15 \na=随机(X,Y)#[5条；15]\n产出(a)#12\n``"
      },
      "tutorials":{
        "intro":"介绍",
        "output":"输出",
        "variables":"变量",
        "input":"输入",
        "operations":"操作",
        "conditions":"条件",
        "boolean":"布尔",
        "languageAboutLanguageTitle":"关于语言",
        "languageAboutLanguageContent":"LinguaCode是创建了所有那些，那些想要学习的编程基础的更舒适的方式。 \n学习与LinguaCode这是不必要的外语知识或技术技能。 所有你需要的是愿意学习和尽职调查。 \n\n#### 特点：\n-**多种语言的**\n-**多**\n-**简单的源代码**\n-**自由**\n",
        "languageFeaturesTitle":"语言功能",
        "languageFeaturesContent":"LinguaCode是基于Python,Pascal和JavaScript，使它容易理解的简单的源代码然后学习另一种编程语言更迅速。 \n\n**这里所有的基本概念的语言：**\n\n-**每个命令开始从新的线.** \n源代码将更加简单和清晰的通过这种方式。\n-**命令可以写的这两个小写的。** \n它加速的过程的节目，但它的首选编写与小写的。\n-**案文可写入之间的引号和撇.** \n在许多国家没有引号中使用，所以在这里你可以选择便利的版本。\n-**书面文本后的符号\"\\#\"被认为是评论并不影响工作的源码。** \n评论提供了用于记笔记。",
        "outputCommandDefinitionTitle":"命令的定义",
        "outputCommandDefinitionContent":"每一个程序，其做了一些操作，应当我们展示信息有关的结果。 这就是为什么所有编程系统文本输出的可能性和地方在那里我们可以看到的结果，这就是所谓的****. \n\n命令\"*output*\"被用于文本的输出。 \n\n#### 例如 \n源代码``linguacode\n输出(\"你好\")\n``结果``终端\n你好\n``",
        "outputPossibleValuesTitle":"可能值",
        "outputPossibleValuesContent":"指令输出可以打印文本、数字、数学作业和可变价值观。\n\n#### 例如 \n源代码 \n``linguacode\n输出(100)\n输出(5*25)\n``结果``终端\n100\n125\n``",
        "variablesDeclaresAndAssignsTitle":"宣布和分配",
        "variablesDeclaresAndAssignsContent":"我们常常需要保存的文本、数字和数字操作的地方与目的再次使用它。 容器，在那里我们可以节省不同的数值是所谓**变量**. 首先，我们必须给予一个名字的变量，然后分配价值。 之后我们可以参照价值简单地通过调用的变其名称。 \n变量存储在随机存取存储器(RAM)的计算机和当我们使用的变量，计算机返回的价值相对应的变量名称从RAM。\n#### 重要的是要记住\n变量名称 \n**1.** 可能含有的字母符号或数字 \n**2.** 不能以一个号码 \n**3.** 不能包含空间和算术运算符号\n#### 例如 \n对打印的号码**617** 而不是这个 \n``linguacode\n输出(617)\n``\n我们会写\n``linguacode\nX=617\n输出(X)\n``\n结果，\n``终端\n617\n`` \n如果我们想要的输出同样价值的三倍，我们将编写 \n``linguacode\nX=617\n输出(X)\n输出(X)\n输出(X)\n`` \n结果， \n``终端\n617\n617\n617\n``",
        "variablesPracticalUseTitle":"实际使用情况",
        "variablesPracticalUseContent":"正如我们看到，我们可以分配数字和文本价值观对变量。 但是，我们常常需要分配的变量有一定的价值，已被分配到另一个。 在这种情况下，我们可以将已有的可变为新的一个。\n#### 例如 \n源代码\n``linguacode\na=1\nb=2\nc=a+b\n输出(c)\n`` \n结果，\n``终端\n3\n``\n",
        "variablesMultipleUsesTitle":"多使用情况",
        "variablesMultipleUsesContent":"你不需要创建一个新的变量，对于一个新的价值。 我们也可以改变的数值分配的变量。 我们将避免不必要的变量和来源码将更简单的方式。\n#### 例如\n让我们假设，我们必须**100** 苹果和保存这种价值**苹果**变量。 苹果的数量正在减少由**5** 每一天。 \n我们必须输出数苹果的每一天。 \n\n源代码\n``linguacode\n苹果=100\n输出(apple)\n\n苹果=apple-5#95\n输出(apple)\n\n苹果=apple-5#90\n输出(apple)\n\n苹果=apple-5#85\n输出(apple)\n`` \n结果，\n``终端\n100\n95\n90\n85\n``",
        "inputCommandDefinitionTitle":"命令的定义",
        "inputCommandDefinitionContent":"在编程中，我们既需要输出和在许多情况下输入的数据。 我们需要它时候的变量可能收到的任何价值。 我们也可以改变源码的每一次和分配新的价值观的可变的，但它不是有效的和需要太长的时间。 \n\n在这种情况下，我们使用的命令\"*input*\". \n\n这里是一个简单的例的程序，其输出双倍的数量输入的用户。 ``linguacode\n输入(数)\n输出(*2)\n``在运行这个程序，我们将看到的符号\"**>**\"这意味着程序已经开始，我们需要输入一个缺失的数据。 后输入任何数量和紧迫****我们将会看到双倍的输入数。 ``终端\n>617\n1234\n``主要是我们需要编写程序，其中可以使用的人，他们甚至不知道程序。",
        "inputWorkMechanismTitle":"工作机制",
        "inputWorkMechanismContent":"现在让我们来看看如何命令的输入工作。 例如，我们有这个程序``linguacode\n输出(\"请输入您的凭据：\")\n输出(\"Name:\")\n输入(名称)\n输出(\"Surname:\")\n输入(姓)\n输出(\"Hi\"+名+\"\"+姓)\n``我们看到有6个行在我们的程序。 \n运行后，我们可以看到，程序的工作，直到线3.``终端\n请输入您的凭据：\n名称：\n>\n``后进入错过的数据，我们将看到，现在它的工作，直到线5.``终端\n请输入您的凭据：\n名称：\n>海洋\n姓名:\n>\n``最后进入最后搞砸了数据的程序将工作和结束。``终端\n请输入您的凭据：\n名称：\n>海洋\n姓名:\n>Chamchyan\n嗨，海洋Chamchyan\n``我们看到，这个命令程序工作的一部分通过的部分需要输入错过的数据。",
        "operationsArithmeticOperatorsTitle":"算术运算",
        "operationsArithmeticOperatorsContent":"在LinguaCode这有可能实施的简单的算术运算喜欢**+**, **-**, **\\***, **/**. \n\n例如这项计划将做所有的算术运营商**1** 和**2** 数字。 ``linguacode\n输出(1+2)#3\n输出(1-2)#-1\n输出(1*2)#2\n输出(1/2)#0.5\n``#### 重要的是要记住 \n正如我们所知的数学数乘变的另一个变量或数量可以写不符号的乘法运算。 例如*7次X*将书面**7倍***X次Y***XY**. \n但是在编程是很重要的编写符号的乘法运算。 例如**7\\*X**，或者**X*Y**.",
        "operationsExecutingPriorityTitle":"操作执行的优先权",
        "operationsExecutingPriorityContent":"这两个在数学和编程中如果有一个部门或一个乘，我们首先做的他们只有在我们做加法和减法。 \n\n#### 例如，``linguacode\nX=10 + 2 * 4 - 2\n#X=10 + 8 - 2\n#X=18-2\n#X=16\n``但我们可以改变执行的优先权通过使用方括号。 \n#### 例如，``linguacode\nX= (10 + 2) * (4 - 2)\n#X=12*(4-2)\n#X=12*2\n#X=24\n``在编程，我们可以使用括号内，即使它们是不必要的。 \n这不会是错误的，但它的首选编写简单和明确的源代码，这将很容易理解他人。",
        "operationsNumbersTitle":"号码",
        "operationsNumbersContent":"因为我们知道<a href=\"https://en.wikipedia.org/wiki/Number\" target=\"_blank\">numbers</a>是数学对象的用于计数，衡量和标签。 \n有5种数字。 我们会处理他们所有人，除了复杂的numbes \n-**自然数** **1**, **2**, ...``linguacode\n输出(7+4)第13\n`` \n-**整数** ..., **-1**, **0**, **1**, ...``linguacode\n输出(-6 * 5 + -3)#-33\n`` \n-**合理的数字** **1/2**, **2/3**, **0.125**, ...``linguacode\n输出(0.617 * 2 * 1000)#1234\n`` \n-**真实的数字** **√2**, **1.62**, ...``linguacode\n输出(第2/3+1/2)的#1\n``",
        "operationsSumOfStringAndNumberTitle":"总的串数字",
        "operationsSumOfStringAndNumberContent":"正如我们看到，这有可能增加的数字以及文字，其结果是线路都合并在一个线上。 但是，我们常常需要得到一个线，这会有用的数值。 在这种情况下，它可以添加的文字的数量，其结果数将被修改并合并的文本为文本。``linguacode\ntext=\"有\"+365+\"天在一年的\"\n#text=\"有\"+\"365\"+\"天在一年的\"\n#text=\"有365\"+\"天在一年的\"\n#text=\"有365天在一年的\"\n``#### 重要的是要记住 \n有线，我们可以做的只是增加操作。 而这样做的其他行动将导致错误。",
        "conditionsCommandsIfTitle":"命令\"如果\"",
        "conditionsCommandsIfContent":"有时在我们编程需要执行一些行动基础上的条件。 它有条件的检查的命令就像\"如果\"\"如果-其他\"和\"其他-如果\"。 \n\n书面形式的命令\"**如果**\"``linguacode\n如果<condition>然后\n<operation>\n``在这里之间的命令\"，如果\"和\"随后\"有任何条件，之后，从新的行和后**4个空格**写作(或操作的)，这将是完成果的声明是真实的。 \n\n#### 例如，``linguacode\na=5\nb=2\n如果一个>b然后\n输出(\">b\")\n``",
        "conditionsCommandsIfElseTitle":"命令\"如果-其他\"",
        "conditionsCommandsIfElseContent":"因此，我们知道如何使用有条件声明的程序。 现在我们将讨论时的情况的条件是错误的。\n\n书面形式\"**如果其他**\"声明``linguacode\n如果<condition>然后\n<operation N1>\n别\n<operation N2>\n``在此之后，命令\"，如果\"没有一个新的命令\"其他\"。 和新的生产线，后4位是书面的操作，这将能完成，如果上述条件是错误的。\n\n#### 例如，``linguacode\na=5\nb=10\n如果一个>b\n输出(\">b\")\n别\n输出(\"b<\")\n``",
        "conditionsCommandsElseIfTitle":"命令\"其他-如果\"",
        "conditionsCommandsElseIfContent":"我们已经讨论了其命令，将执行根据条件是真实的或虚假的。 但有时我们需要检查比一个条件，在同一时间。 \n\n书面形式\"**如果其他-如果**\"声明``linguacode\n如果<condition N1>然后\n<operation N1>\n否则，如果<condition N2>然后\n<operation N2>\n别\n<operation N3>\n``在这里，我们必须检查超过一个条件。 在情况下的\"其他-如果\"书面形式可能有1或更多的\"其他-如果\"的声明之间的命令\"，如果\"和\"其他\"。 \n\n#### 例如，``linguacode\na=5\nb=5\n如果一个>b然后\n输出(\">b\")\n否则，如果一个<b然后\n输出(\"<b\")\n别\n输出(\"b==\")\n``",
        "booleanTypesBooleanTitle":"描述",
        "booleanTypesBooleanContent":"我们已经知道如何检查报表和一些他们可以**(22>18)或*false*(16>18). 有时，因为长度的条件检查线，它变得难于阅读的源代码。 这里涉及到帮助布尔的价值观 \n\n-****``linguacode\n条件=true\n输出(条件)#真的\n`` \n\n-**false**``linguacode\n条件=false\n输出(条件)#假\n``任何布尔的比较我们所知的返回一个给定的数值 \n\nExemple*真实*比较``linguacode\n条件=1<5\n输出(条件)#真的\n``Exemple*false*比较``linguacode\n条件=10<5\n输出(条件)#假\n``这样的情况检查的命令，我们可以利用的变量与布尔的价值观。 \n\n#### 例如，``linguacode\n输出(\"写一号\"a\":\")\n输入(a)\n\n输出(\"写一号\"b\"：\")\n输入(b)\n\n条件1=>b\ncondition2=<b\n\n如果条件1然后\n结果=\">b\"\n否则，如果condition2然后\n结果=\"<b\"\n别\n结果=\"a==b\"։\n输出(\"的结果：\"+结果)\n``",
        "booleanOperatorsComparisonTitle":"比较符",
        "booleanOperatorsComparisonContent":"在条件检查的命令，我们有已使用符号为\"大于\">\"不少于\"<比较的运营商。 但现在这里我们可以使用的任何其他运营商已知我们。 \n\n-**>**比较的数值，其中第一个被*#大*比第二个。 例如，``linguacode\n输出(5>1)#真的\n输出(1>5)#假\n`` \n\n-**>=**比较的数值，其中第一个被*#大于或等于*第二个。 例如，``linguacode\n输出(5>=5)#真的\n输出(1>=5)#假\n`` \n\n-**<**比较的数值，其中第一个被*#低*比第二个。 例如，``linguacode\n输出(1<5)#真的\n输出(5<1)#假\n`` \n\n-**<=**比较的数值，其中第一个被*#少于或等于*第二个。 例如，``linguacode\n输出(1<=5)#真的\n输出(5<=1)#假\n`` \n\n-**==**比较数字或文本价值观，其中第一个被*#等于*第二个。 例如，``linguacode\n输出(5==5)#真的\n输出(5==1)#假\n输出(\"士兵\"==\"士兵\")#真的\n输出(\"Hello\"==\"Helo\")#假\n`` \n\n-**!=** 比较数字或文本价值观，其中第一个被*#不等于*第二个。 例如，``linguacode\n输出(5!= 1)#真的\n输出(5!= 5)#假\n输出(\"HelLo\"!= \"直升机\")#真的\n输出(\"战士\"!= \"士兵\")#假\n`` \n\n-**不()**返回扭转结果的任何数字或文字比较。 例如，``linguacode\n输出(不(1>5))#真的\n输出(不(5==5))#假\n输出(不(false))#真的\n输出(不(true))#假\n``",
        "booleanOperatorsLogicalTitle":"Boolean operators",
        "booleanOperatorsLogicalContent":"因此，我们知道如何写任何有条件的声明，但是我们常常需要结合一些条件中的一个，并在此基础上执行一些行动。 该组合的条件下通过布尔经营者。 \n\n-命令\"****\"结合两个条件中的一个，这就是所谓的****在两个条件都是****false**当至少一项条件是*false*. 例如，``linguacode\n输出(5>1և10<100)#真的\n输出(20<100և1>5)#假\n`` \n\n-命令\"****\"结合两个条件中的一个，这就是所谓的****当至少一项条件是****false**当两个条件*false*. 例如，``linguacode\n输出(5>1或100<10)#真的\n输出(20>100或1>5)#假\n``",
        "booleanOperatorsExecutingPriorityTitle":"执行的优先权",
        "booleanOperatorsExecutingPriorityContent":"我们学会了如何结合2个条件，但是他们可以超过2,基于节目的内容。 在这种情况下，情况将会相互结合，从*左到右*，直到他们形成一个条件。\n\n#### 例如，``linguacode\n输出(5<1և1<7人或1>=3或9==9)\n``这个是一样的``linguacode\n输出(false և真正的或虚假的或真正的)\n``让我们结合**第1****2**\"**假和真**\"条件中的一个高品 ``linguacode\n输出(虚假的或虚假的或真正的)\n`然后**1+2** 条件与**3**将\"**虚假的或虚假的**\"``linguacode\n输出量(假或真实)\n``最后**1+2+3** 条件与**4**将\"**虚假的或真正**\"高品 ``linguacode\n输出的(真实)\n``等等我们结合4条件中的一个。 我们可以将更多的条件的方式。 \n\n有时我们需要改变左到右相结合的优先权通过使用方括号。 \n\n#### 例如，``linguacode\n输出(5<1և(1<7或(1>=3或9==9)))\n`` \n\n这是一样的``linguacode\n输出(false և(真实的或者(假或true)))\n``让我们结合**3****4**\"**虚假的或真正**\"条件中的一个``linguacode\n输出量(假或(false或true))\n``之后，它**2**状况**3+4** 条件将是\"**虚假的或真正**\"``linguacode\n输出(false և true)\n``最后，让我们结合**第1**状况**2+(3+4)**. 这将是\"**假和真**\"``linguacode\n输出(false)\n``这样，我们看到，结果是改变组合的优先事项。"
      },
      "syntaxInfo":{
        "modalTitle":"命令指南",
        "cheatSheetTitle":"抄",
        "lesson":"教程"
      }
    }
  },
  "modules":{
    "ide":{
      "title":"<b>Hotkeys</b>",
      "undo":"撤消",
      "redo":"重做",
      "selectAll":"所有的选择",
      "run":"运行",
      "terminal":"终端"
    },
    "program":{
      "program":"程序",
      "sourceCode":"源代码",
      "functionArgumentSyntaxError":"功能的论点中的语法错误${line}线。",
      "undefinedVariable":"\"${variable}\"变量没有定义${line}线。",
      "indentError":"空间误差在${line}线。",
      "hackAttempt":"哈克企图。 你的\"${ip}\"ip地址被保存在我们的数据库。",
      "syntaxError":"语法错误",
      "timeout":"编制超时。 确认代码没有无限的循环。",
      "true":"真的",
      "false":"假",
      "NaN":"未知",
      "null":"未知",
      "Infinity":"无穷",
      "undefined":"不确定"
    },
    "programListGroup":{
      "programs":"程序"
    },
    "terminal":{
      "hotkeys":"<b>Hotkeys</b>",
      "undo":"撤消",
      "redo":"重做",
      "selectAll":"所有的选择",
      "terminal":"终端"
    }
  },
  "buttons":{
    "loginButton":{
      "signIn":"登录在"
    },
    "menuButton":{
      "settings":"设置",
      "logOut":"登出"
    }
  },
  "panels":{
    "header":{
      "title":"家"
    }
  },
  "elements":{
    "emptyProgramListForOthersComponent":{
      "programNotFoundForOthers":"用户没有任何程序。"
    },
    "emptyProgramListForOwnerComponent":{
      "programNotFoundListForOwner":"你没有任何程序。",
      "programNotFoundClickPartFirst":"点击",
      "programNotFoundClickPartSecond":"在这里，",
      "programNotFoundClickPartThird":"创建一个新的程序。"
    },
    "loading":{
      "loading":"加载"
    }
  }
}